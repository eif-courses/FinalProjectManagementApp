package templates

import (
    "FinalProjectManagementApp/auth"
    "FinalProjectManagementApp/components/badge"
    "FinalProjectManagementApp/components/button"
    "FinalProjectManagementApp/components/icon"
    "FinalProjectManagementApp/components/input"
    "FinalProjectManagementApp/components/table"
    "FinalProjectManagementApp/database"
    "database/sql"
    "fmt"
    "strconv"
)

templ SupervisorStudentList(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string, pagination *database.PaginationInfo, searchValue string) {
    @Layout(user, currentLocale, "Mano studentai", "/my-students") {
        <div class="space-y-6">
            <!-- Header -->
            <div class="space-y-4">
                <div>
                    <h1 class="text-3xl font-bold tracking-tight text-foreground">
                        if currentLocale == "en" {
                            My Students
                        } else {
                            Mano studentai
                        }
                    </h1>
                    <p class="text-muted-foreground">
                        if currentLocale == "en" {
                            Students assigned to you as supervisor
                        } else {
                            Studentai, kuriems esate paskirtas vadovu
                        }
                        <span class="font-medium ml-2">({ strconv.Itoa(len(students)) } total)</span>
                    </p>
                </div>

                <!-- Search Bar -->
                <div class="w-full">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none z-10">
                            @icon.Search(icon.Props{Size: 20, Class: "text-muted-foreground"})
                        </div>
                        @input.Input(input.Props{
                            Type:        "text",
                            ID:          "search",
                            Name:        "search",
                            Placeholder: getSearchPlaceholder(currentLocale),
                            Value:       searchValue,
                            Class:       "pl-10 h-12",
                            Attributes: templ.Attributes{
                                "hx-get":       "/my-students",
                                "hx-trigger":   "input changed delay:300ms, search",
                                "hx-target":    "#student-table-container",
                                "autocomplete": "off",
                            },
                        })
                    </div>
                </div>
            </div>

            <!-- Table Container -->
            <div id="student-table-container">
                @SupervisorStudentTable(user, students, currentLocale)
                if pagination != nil {
                    @SupervisorPagination(pagination)
                }
            </div>
        </div>

        <!-- Modal Container -->
        <div id="modal-container" style="display: none;"></div>

        @SupervisorStudentScripts()
    }
}

templ SupervisorStudentTable(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string) {
    @table.Table() {
        @table.Header() {
            @table.Row() {
                @table.Head() {
                    if currentLocale == "en" {
                        Group
                    } else {
                        Grupė
                    }
                }
                @table.Head() {
                    if currentLocale == "en" {
                        Student Name
                    } else {
                        Vardas pavardė
                    }
                }
                @table.Head() {
                    if currentLocale == "en" {
                        Topic Status
                    } else {
                        Temos būsena
                    }
                }
                @table.Head() {
                    if currentLocale == "en" {
                        Documents
                    } else {
                        Dokumentai
                    }
                }
                @table.Head() {
                    if currentLocale == "en" {
                        Supervisor Report
                    } else {
                        Vadovo atsiliepimas
                    }
                }
                @table.Head() {
                    if currentLocale == "en" {
                        Reviewer
                    } else {
                        Recenzentas
                    }
                }
            }
        }
        @table.Body() {
            for _, student := range students {
                @table.Row() {
                    @table.Cell() {
                        @badge.Badge(badge.Props{Variant: badge.VariantDefault, Class: "text-xs"}) {
                            { student.StudentGroup }
                        }
                    }
                    @table.Cell() {
                        <div class="space-y-1">
                            <div class="font-medium text-foreground text-sm">
                                { student.GetDisplayName(currentLocale) }
                            </div>
                            <div class="text-xs text-muted-foreground">
                                { student.GetLocalizedTitle(currentLocale) }
                            </div>
                            <div class="text-xs text-muted-foreground">
                                { student.StudentEmail }
                            </div>
                        </div>
                    }
                    @table.Cell() {
                        @SupervisorTopicStatus(student, currentLocale)
                    }
                    @table.Cell() {
                        @DocumentsCell(user, student.ID, student.HasSourceCode)
                    }
                    @table.Cell() {
                        @SupervisorReportStatus(user, student, currentLocale)
                    }
                    @table.Cell() {
                        @SupervisorReviewerInfo(student, currentLocale)
                    }
                }
            }
        }
    }
}

templ SupervisorTopicStatus(student database.StudentSummaryView, locale string) {
    <div class="space-y-1">
        if student.TopicApproved {
            <div class="flex items-center gap-1">
                <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                <span class="text-xs text-green-700 font-medium">
                    if locale == "en" {
                        Approved
                    } else {
                        Patvirtinta
                    }
                </span>
            </div>
        } else if getSupervisorTopicStatus(student.TopicStatus) == "submitted" {
            <div class="flex items-center gap-1">
                <div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
                <span class="text-xs text-yellow-700 font-medium">
                    if locale == "en" {
                        Awaiting review
                    } else {
                        Laukia peržiūros
                    }
                </span>
            </div>
            @button.Button(button.Props{
                Variant: button.VariantDefault,
                Size:    button.SizeIcon,
                Class:   "h-7 px-2 text-xs mt-1",
                Attributes: templ.Attributes{
                    "onclick": fmt.Sprintf("reviewTopic(%d)", student.ID),
                },
            }) {
                @icon.Eye(icon.Props{Size: 12})
                <span class="ml-1">
                    if locale == "en" {
                        Review
                    } else {
                        Peržiūrėti
                    }
                </span>
            }
        } else if getSupervisorTopicStatus(student.TopicStatus) == "supervisor_approved" {
            <div class="flex items-center gap-1">
                <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span class="text-xs text-blue-700 font-medium">
                    if locale == "en" {
                        You approved
                    } else {
                        Jūs patvirtinote
                    }
                </span>
            </div>
        } else if getSupervisorTopicStatus(student.TopicStatus) == "draft" {
            <span class="text-xs text-muted-foreground">
                if locale == "en" {
                    Draft
                } else {
                    Juodraštis
                }
            </span>
        } else {
            <span class="text-xs text-muted-foreground">
                if locale == "en" {
                    Not started
                } else {
                    Nepradėta
                }
            </span>
        }

        // Always show view button if topic exists
        if getSupervisorTopicStatus(student.TopicStatus) != "" && getSupervisorTopicStatus(student.TopicStatus) != "not_started" {
            @button.Button(button.Props{
                Variant: button.VariantGhost,
                Size:    button.SizeIcon,
                Class:   "h-6 w-6 p-0",
                Attributes: templ.Attributes{
                    "onclick": fmt.Sprintf("viewTopic(%d)", student.ID),
                    "title":   "View topic",
                },
            }) {
                @icon.FileText(icon.Props{Size: 14})
            }
        }
    </div>
}

templ SupervisorReportStatus(user *auth.AuthenticatedUser, student database.StudentSummaryView, locale string) {
    <div class="space-y-1">
        if student.HasSupervisorReport {
            if student.SupervisorReportSigned.Valid && student.SupervisorReportSigned.Bool {
                <div class="flex items-center gap-1">
                    <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span class="text-xs text-green-700 font-medium">
                        if locale == "en" {
                            Signed
                        } else {
                            Pasirašyta
                        }
                    </span>
                </div>
            } else {
                <div class="flex items-center gap-1">
                    <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                    <span class="text-xs text-blue-700 font-medium">
                        if locale == "en" {
                            Draft
                        } else {
                            Juodraštis
                        }
                    </span>
                </div>
            }
            @button.Button(button.Props{
                Variant: button.VariantGhost,
                Size:    button.SizeIcon,
                Class:   "h-6 w-6 p-0",
                Attributes: templ.Attributes{
                    "onclick": fmt.Sprintf("viewSupervisorReport(%d)", student.ID),
                    "title":   "View report",
                },
            }) {
                @icon.Eye(icon.Props{Size: 14})
            }
        } else {
            <div class="flex items-center gap-1">
                <div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
                <span class="text-xs text-yellow-700">
                    if locale == "en" {
                        Not filled
                    } else {
                        Neužpildyta
                    }
                </span>
            </div>
            @button.Button(button.Props{
                Variant: button.VariantDefault,
                Size:    button.SizeIcon,
                Class:   "h-7 px-2 text-xs mt-1",
                Attributes: templ.Attributes{
                    "onclick": fmt.Sprintf("createSupervisorReport(%d)", student.ID),
                },
            }) {
                @icon.Plus(icon.Props{Size: 12})
                <span class="ml-1">
                    if locale == "en" {
                        Create
                    } else {
                        Pildyti
                    }
                </span>
            }
        }
    </div>
}

templ SupervisorReviewerInfo(student database.StudentSummaryView, locale string) {
    <div class="space-y-1">
        if getSupervisorStringFromNullString(student.ReviewerName) != "" {
            <div class="text-xs font-medium">
                { getSupervisorStringFromNullString(student.ReviewerName) }
            </div>
            if student.HasReviewerReport {
                if student.ReviewerReportSigned.Valid && student.ReviewerReportSigned.Bool {
                    <div class="flex items-center gap-1">
                        <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span class="text-xs text-green-700">
                            if locale == "en" {
                                Report signed
                            } else {
                                Ataskaita pasirašyta
                            }
                        </span>
                    </div>
                } else {
                    <div class="flex items-center gap-1">
                        <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span class="text-xs text-blue-700">
                            if locale == "en" {
                                Report in progress
                            } else {
                                Ataskaita pildoma
                            }
                        </span>
                    </div>
                }
            } else {
                <span class="text-xs text-muted-foreground">
                    if locale == "en" {
                        Awaiting report
                    } else {
                        Laukia ataskaitos
                    }
                </span>
            }
        } else {
            <span class="text-xs text-muted-foreground">
                if locale == "en" {
                    Not assigned
                } else {
                    Nepaskirtas
                }
            </span>
        }
    </div>
}

templ SupervisorPagination(pagination *database.PaginationInfo) {
    <div class="flex items-center justify-between py-4">
        <div class="text-sm text-muted-foreground">
            Rodoma { strconv.Itoa((pagination.Page-1)*pagination.Limit + 1) } -
            { strconv.Itoa(supervisorMinInt(pagination.Page*pagination.Limit, pagination.Total)) } iš
            { strconv.Itoa(pagination.Total) }
        </div>
        <div class="flex items-center gap-2">
            if pagination.HasPrev {
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Attributes: templ.Attributes{
                        "hx-get":     "/my-students?page=" + strconv.Itoa(pagination.PrevPage),
                        "hx-target":  "#student-table-container",
                        "hx-include": "#search",
                    },
                }) {
                    @icon.ChevronLeft(icon.Props{Size: 16})
                }
            }

            for i := supervisorMaxInt(1, pagination.Page-2); i <= supervisorMinInt(pagination.TotalPages, pagination.Page+2); i++ {
                if i == pagination.Page {
                    @button.Button(button.Props{
                        Variant: button.VariantDefault,
                    }) {
                        { strconv.Itoa(i) }
                    }
                } else {
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Attributes: templ.Attributes{
                            "hx-get":     "/my-students?page=" + strconv.Itoa(i),
                            "hx-target":  "#student-table-container",
                            "hx-include": "#search",
                        },
                    }) {
                        { strconv.Itoa(i) }
                    }
                }
            }

            if pagination.HasNext {
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Attributes: templ.Attributes{
                        "hx-get":     "/my-students?page=" + strconv.Itoa(pagination.NextPage),
                        "hx-target":  "#student-table-container",
                        "hx-include": "#search",
                    },
                }) {
                    @icon.ChevronRight(icon.Props{Size: 16})
                }
            }
        </div>
    </div>
}

templ SupervisorStudentScripts() {
    <script>


    // Navbar debugging
    function checkNavbar() {
        const navbar = document.querySelector('nav');
        if (navbar) {
            console.log('Navbar status:', {
                display: navbar.style.display,
                visibility: navbar.style.visibility,
                opacity: navbar.style.opacity,
                zIndex: navbar.style.zIndex,
                computedZIndex: window.getComputedStyle(navbar).zIndex,
                computedDisplay: window.getComputedStyle(navbar).display,
                classes: navbar.className,
                position: window.getComputedStyle(navbar).position
            });
        } else {
            console.log('Navbar not found in DOM!');
        }
    }

    // Check navbar status periodically
    setInterval(checkNavbar, 2000);

    // Check navbar when modal operations happen
    document.addEventListener('htmx:afterRequest', function() {
        setTimeout(checkNavbar, 100);
    });


        console.log('SupervisorStudentScripts: Loading');

        // Ensure ModalManager is available
        function waitForModalManager(callback) {
            if (window.ModalManager) {
                callback();
            } else {
                console.log('SupervisorStudentScripts: Waiting for ModalManager...');
                setTimeout(() => waitForModalManager(callback), 100);
            }
        }

        // Use ModalManager for all modal operations
        function reviewTopic(studentId) {
            console.log('SupervisorStudentScripts: reviewTopic called for student:', studentId);
            window.currentReviewStudentId = studentId;

            waitForModalManager(() => {
                window.ModalManager.openHTMXModal(
                    '/topic-registration/' + studentId + '?mode=review',
                    function() {
                        console.log('SupervisorStudentScripts: Topic modal loaded successfully');
                    },
                    function(error) {
                        console.error('SupervisorStudentScripts: Failed to load topic registration:', error);
                        alert('Failed to load topic registration. Please try again.');
                    }
                );
            });
        }

        function viewTopic(studentId) {
            console.log('SupervisorStudentScripts: viewTopic called for student:', studentId);
            waitForModalManager(() => {
                window.ModalManager.openHTMXModal(
                    '/topic-registration/' + studentId + '?mode=view',
                    null,
                    function(error) {
                        console.error('SupervisorStudentScripts: Failed to load topic:', error);
                        alert('Failed to load topic');
                    }
                );
            });
        }

        function createSupervisorReport(studentId) {
            console.log('SupervisorStudentScripts: createSupervisorReport called for student:', studentId);
            waitForModalManager(() => {
                window.ModalManager.openHTMXModal(
                    '/supervisor-report/' + studentId + '/compact-modal',
                    function() {
                        console.log('SupervisorStudentScripts: Supervisor report modal loaded');
                    },
                    function(error) {
                        console.error('SupervisorStudentScripts: Failed to load supervisor report form:', error);
                        alert('Failed to load supervisor report form');
                    }
                );
            });
        }

        function viewSupervisorReport(studentId) {
            console.log('SupervisorStudentScripts: viewSupervisorReport called for student:', studentId);
            waitForModalManager(() => {
                window.ModalManager.openHTMXModal(
                    '/supervisor-report/' + studentId + '/compact-modal?mode=view',
                    function() {
                        console.log('SupervisorStudentScripts: Supervisor report view loaded');
                    },
                    function(error) {
                        console.error('SupervisorStudentScripts: Failed to load supervisor report:', error);
                        alert('Failed to load supervisor report');
                    }
                );
            });
        }

        function viewStudentRepository(studentId) {
            console.log('SupervisorStudentScripts: Opening repository for student:', studentId);
            window.open('/repository/student/' + studentId, '_blank');
        }

        // Make functions globally available
        window.reviewTopic = reviewTopic;
        window.viewTopic = viewTopic;
        window.createSupervisorReport = createSupervisorReport;
        window.viewSupervisorReport = viewSupervisorReport;
        window.viewStudentRepository = viewStudentRepository;

        // Handle dynamic document loading
        document.addEventListener('DOMContentLoaded', function() {
            console.log('SupervisorStudentScripts: DOM loaded, initializing document loading');
            const docElements = document.querySelectorAll('[data-load-documents="true"]');
            docElements.forEach(function(element) {
                const studentId = element.getAttribute('data-student-id');
                loadDocuments(studentId);
            });
        });

        function loadDocuments(studentId) {
            fetch('/api/public/students/' + studentId + '/documents')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('docs-' + studentId);
                    if (data.documents && data.documents.length > 0) {
                        let html = '<div class="flex flex-wrap gap-1">';
                        data.documents.forEach(doc => {
                            let icon = '📄';
                            let title = doc.type;

                            if (doc.type === 'thesis_pdf' || doc.type === 'thesis') {
                                icon = '📕';
                                title = 'Thesis PDF';
                            } else if (doc.type === 'presentation') {
                                icon = '📊';
                                title = 'Presentation';
                            }

                            html += `
                                <button onclick="${doc.hasPreview ? `viewDocument(${doc.id})` : `downloadDocument(${doc.id})`}"
                                    class="text-xs p-1 hover:bg-gray-100 rounded"
                                    title="${title}">
                                    ${icon}
                                </button>
                            `;
                        });
                        html += '</div>';
                        container.innerHTML = html;
                    } else {
                        container.innerHTML = '<span class="text-xs text-gray-400">-</span>';
                    }
                })
                .catch(error => {
                    console.error('SupervisorStudentScripts: Error loading documents:', error);
                });
        }

        window.viewDocument = function(documentId) {
            window.open('/api/public/documents/' + documentId + '/preview', '_blank');
        };

        window.downloadDocument = function(documentId) {
            window.location.href = '/api/public/documents/' + documentId + '/download';
        };

        // Refresh table after actions
        document.addEventListener('htmx:afterRequest', function(evt) {
            const trigger = evt.detail.xhr.getResponseHeader('HX-Trigger');
            if (trigger && (trigger.includes('topicUpdated') || trigger.includes('reportSaved'))) {
                console.log('SupervisorStudentScripts: Refreshing table after action');
                // Refresh the table
                htmx.ajax('GET', '/my-students', {
                    target: '#student-table-container',
                    values: { search: document.getElementById('search')?.value || '' }
                });
            }
        });

        console.log('SupervisorStudentScripts: All functions loaded');
    </script>
}

// Helper functions with unique names to avoid conflicts
func getSearchPlaceholder(locale string) string {
    if locale == "en" {
        return "Search students by name, surname, topic..."
    }
    return "Ieškoti studentų pagal vardą, pavardę, temą..."
}

func getSupervisorTopicStatus(status sql.NullString) string {
    if status.Valid {
        return status.String
    }
    return ""
}

func getSupervisorStringFromNullString(ns sql.NullString) string {
    if ns.Valid {
        return ns.String
    }
    return ""
}

func supervisorMinInt(a, b int) int {
    if a < b {
        return a
    }
    return b
}

func supervisorMaxInt(a, b int) int {
    if a > b {
        return a
    }
    return b
}