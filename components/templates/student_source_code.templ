// components/templates/student_source_code.templ
package templates

import (
    "FinalProjectManagementApp/database"
    "FinalProjectManagementApp/components/card"
    "FinalProjectManagementApp/components/button"
    "FinalProjectManagementApp/components/icon"
    "fmt"
)

templ SourceCodeSection(data *StudentDashboardData) {
    @card.Card() {
        @card.Header() {
            @card.Title() {
                ðŸ’» Source Code Repository
            }
            @card.Description() {
                Upload your thesis source code to GitHub for evaluation and archival.
            }
        }
        @card.Content() {
            if data.SourceCodeRepository != nil {
                @SourceCodeUploaded(data.SourceCodeRepository)
            } else {
                @SourceCodeUploadForm()
            }
        }
    }
}

templ SourceCodeUploaded(doc *database.Document) {
    <div class="space-y-4">
        <!-- Status Banner -->
        <div class="flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg">
            <div class="flex items-center space-x-3">
                @icon.CircleCheck(icon.Props{Size: 20, Class: "text-green-600"})
                <div>
                    <p class="font-medium text-green-800">Source Code Uploaded</p>
                    <p class="text-sm text-green-600">Successfully uploaded to GitHub repository</p>
                </div>
            </div>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                { doc.UploadStatus }
            </span>
        </div>

        <!-- Repository Info -->
        <div class="border rounded-lg p-4 space-y-3">
            <div class="flex items-center justify-between">
                <h4 class="font-medium">Repository Details</h4>
                if doc.RepositoryURL != nil {
                    <a href={ templ.SafeURL(*doc.RepositoryURL) } target="_blank"
                       class="inline-flex items-center text-sm text-blue-600 hover:text-blue-800">
                        @icon.ExternalLink(icon.Props{Size: 14, Class: "mr-1"})
                        View on GitHub
                    </a>
                }
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                    <span class="text-muted-foreground">Uploaded:</span>
                    <span class="ml-2 font-medium">{ doc.UploadedDate.Format("Jan 2, 2006 15:04") }</span>
                </div>
                <div>
                    <span class="text-muted-foreground">Status:</span>
                    <span class="ml-2 font-medium">{ doc.ValidationStatus }</span>
                </div>
                if doc.FileSize != nil {
                    <div>
                        <span class="text-muted-foreground">Size:</span>
                        <span class="ml-2 font-medium">{ formatFileSize(*doc.FileSize) }</span>
                    </div>
                }
                if doc.CommitID != nil {
                    <div>
                        <span class="text-muted-foreground">Commit:</span>
                        <span class="ml-2 font-mono text-xs">{ (*doc.CommitID)[:7] }...</span>
                    </div>
                }
            </div>
        </div>

        <!-- Actions -->
        <div class="flex space-x-3">
            @button.Button(button.Props{
                Variant: button.VariantOutline,
                Size: button.SizeIcon,
                Attributes: templ.Attributes{
                    "onclick": "uploadNewVersion()",
                },
            }) {
                @icon.Upload(icon.Props{Size: 16, Class: "mr-2"})
                Upload New Version
            }

            if doc.RepositoryURL != nil {
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Size: button.SizeIcon,
                    Attributes: templ.Attributes{
                        "onclick": fmt.Sprintf("window.open('%s', '_blank')", *doc.RepositoryURL),
                    },
                }) {
                    @icon.Code(icon.Props{Size: 16, Class: "mr-2"})
                    View Code
                }
            }
        </div>
    </div>
}

templ SourceCodeUploadForm() {
    <div id="source-upload-container">
        <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors">
            <div class="space-y-4">
                @icon.Upload(icon.Props{Size: 48, Class: "mx-auto text-gray-400"})
                <div>
                    <h3 class="text-lg font-medium">Upload Source Code</h3>
                    <p class="text-muted-foreground">
                        Upload your thesis source code as a ZIP file. It will be automatically uploaded to GitHub.
                    </p>
                </div>

                <!-- Upload Form -->
                <form id="source-upload-form" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <input type="text" name="name" placeholder="Your Full Name" required
                               class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <input type="text" name="student_id" placeholder="Student ID" required
                               class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <input type="email" name="email" placeholder="Email Address" required
                               class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <input type="text" name="thesis_title" placeholder="Thesis Title" required
                               class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    </div>

                    <div class="space-y-2">
                        <input type="file" name="source_code" accept=".zip" required
                               class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
                        <p class="text-xs text-muted-foreground">Only ZIP files are accepted. Max size: 100MB</p>
                    </div>

                    @button.Button(button.Props{
                        Type: "submit",
                        Variant: button.VariantDefault,
                        Class: "w-full",
                        Attributes: templ.Attributes{
                            "id": "upload-button",
                        },
                    }) {
                        @icon.Upload(icon.Props{Size: 16, Class: "mr-2"})
                        Upload Source Code
                    }
                </form>

                <!-- Progress Bar (hidden initially) -->
                <div id="upload-progress" class="hidden space-y-2">
                    <div class="w-full bg-gray-200 rounded-full h-2">
                        <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                    </div>
                    <p id="upload-status" class="text-sm text-muted-foreground">Preparing upload...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Upload JavaScript -->
    <script>
        document.getElementById('source-upload-form').addEventListener('submit', async function(e) {
            e.preventDefault();

            const formData = new FormData(this);
            const uploadButton = document.getElementById('upload-button');
            const progressContainer = document.getElementById('upload-progress');
            const progressBar = document.getElementById('progress-bar');
            const statusText = document.getElementById('upload-status');

            // Show progress, hide form
            uploadButton.disabled = true;
            uploadButton.textContent = 'Uploading...';
            progressContainer.classList.remove('hidden');

            try {
                const response = await fetch('/api/source-code/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    // Simulate progress for better UX
                    let progress = 0;
                    const interval = setInterval(() => {
                        progress += 10;
                        progressBar.style.width = progress + '%';

                        if (progress >= 100) {
                            clearInterval(interval);
                            statusText.textContent = 'Upload completed successfully!';
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        }
                    }, 200);
                } else {
                    throw new Error(result.error || 'Upload failed');
                }
            } catch (error) {
                console.error('Upload error:', error);
                statusText.textContent = 'Upload failed: ' + error.message;
                statusText.className = 'text-sm text-red-600';
                uploadButton.disabled = false;
                uploadButton.textContent = 'Upload Source Code';
            }
        });

        function uploadNewVersion() {
            if (confirm('Upload a new version of your source code? This will create a new commit in your repository.')) {
                // Reset form and show upload interface
                location.reload();
            }
        }
    </script>
}