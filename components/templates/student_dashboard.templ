// components/templates/student_dashboard.templ
package templates

import (
    "fmt"
    "FinalProjectManagementApp/auth"
    "FinalProjectManagementApp/database"
    "FinalProjectManagementApp/components/card"
    "FinalProjectManagementApp/components/icon"
)

type StudentDashboardData struct {
    StudentRecord           *database.StudentRecord
    HasThesisPDF           bool
    ThesisDocument         *database.Document
    CompanyRecommendation  *database.Document
    VideoPresentation      *database.Document
    SupervisorReport       *database.SupervisorReport
    ReviewerReport         *database.ReviewerReport
    SourceCodeStatus       string
    SourceCodeRepository   *database.Document
    TopicStatus            string
    DefenseScheduled       bool
    DefenseDate            string
}

templ StudentDashboard(user *auth.AuthenticatedUser, data *StudentDashboardData, currentLocale string) {
    @Layout(user, currentLocale, "Student Dashboard") {
        <div class="space-y-8">
            <!-- Header with student info and progress -->
            @StudentHeader(user, data)

            <!-- Progress Overview -->
            @ProgressOverview(data)

            <!-- Main Content Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Left Column -->
                <div class="space-y-6">
                    @SourceCodeSection(data)
                    @CompanyRecommendationSection(data)
                    @VideoUploadSection(data)
                </div>

                <!-- Right Column -->
                <div class="space-y-6">
                    @ThesisPDFSection(data)
                    @ReportsSection(data)
                    @DefenseInfoSection(data)
                </div>
            </div>
        </div>
    }
}

templ StudentHeader(user *auth.AuthenticatedUser, data *StudentDashboardData) {
    @card.Card() {
        @card.Content() {
            <div class="flex items-start justify-between">
                <div class="flex items-center space-x-4">
                    <div class="h-16 w-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center">
                        <span class="text-xl font-bold text-white">
                            { getInitials(user.Name) }
                        </span>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold text-foreground">{ user.Name }</h1>
                        <p class="text-muted-foreground">{ data.StudentRecord.StudentNumber } ‚Ä¢ { data.StudentRecord.StudyProgram }</p>
                        <p class="text-sm text-muted-foreground">{ data.StudentRecord.Department }</p>
                    </div>
                </div>
                <div class="text-right">
                    <div class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                        @icon.GraduationCap(icon.Props{Size: 16, Class: "mr-1"})
                        Student
                    </div>
                </div>
            </div>
        }
    }
}

templ ProgressOverview(data *StudentDashboardData) {
    @card.Card() {
        @card.Header() {
            @card.Title() {
                üìã Thesis Progress Overview
            }
            @card.Description() {
                Track your thesis completion status across all required components.
            }
        }
        @card.Content() {
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                @ProgressItem("Topic", data.TopicStatus == "approved", "üìù")
                @ProgressItem("Source Code", data.SourceCodeRepository != nil, "üíª")
                @ProgressItem("PDF Thesis", data.HasThesisPDF, "üìÑ")
                @ProgressItem("Defense", data.DefenseScheduled, "üéì")
            </div>
            <div class="mt-4">
                @ProgressBar(calculateProgress(data))
            </div>
        }
    }
}

templ ProgressItem(title string, completed bool, emoji string) {
    <div class="flex items-center space-x-3 p-3 rounded-lg border bg-card">
        <span class="text-lg">{ emoji }</span>
        <div class="flex-1">
            <p class="text-sm font-medium">{ title }</p>
            <div class="flex items-center mt-1">
                if completed {
                    @icon.CircleCheck(icon.Props{Size: 16, Class: "text-green-600 mr-1"})
                    <span class="text-xs text-green-600 font-medium">Complete</span>
                } else {
                    @icon.Clock(icon.Props{Size: 16, Class: "text-yellow-600 mr-1"})
                    <span class="text-xs text-yellow-600 font-medium">Pending</span>
                }
            </div>
        </div>
    </div>
}

templ ProgressBar(percentage int) {
    <div class="w-full bg-gray-200 rounded-full h-3">
        <div
            class="bg-gradient-to-r from-blue-500 to-green-500 h-3 rounded-full transition-all duration-500"
            style={ "width: " + templ.EscapeString(fmt.Sprintf("%d%%", percentage)) }
        ></div>
    </div>
    <p class="text-sm text-center mt-2 text-muted-foreground">
        { fmt.Sprintf("%d%% Complete", percentage) }
    </p>
}