package templates

import "FinalProjectManagementApp/auth"

templ Layout(user *auth.AuthenticatedUser, currentLocale string, title string) {
    <!DOCTYPE html>
    <html lang={ currentLocale }>
    <head>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>{ title } - Baigiamųjų darbų talpykla</title>
        <link rel="stylesheet" href="/assets/css/output.css"/>
    </head>
    <body class="bg-background text-foreground min-h-screen">
        @Navbar(user, currentLocale)
        <main class="container mx-auto px-4 py-6">
            { children... }
        </main>

        <!-- Add HTMX -->
        <script src="https://unpkg.com/htmx.org@1.9.10"></script>
        <script src="/static/js/navbar.js"></script>
        <script src="/static/js/repository-preview.js"></script>

        <!-- Modal System Initialization -->
        <script nonce="">
            if (typeof window.modalState === 'undefined') {
                window.modalState = {
                    openModalId: null
                };
            }

            (function() { // IIFE
                function closeModal(modal, immediate = false) {
                    if (!modal || modal.style.display === 'none') return;

                    const content = modal.querySelector('[data-modal-content]');
                    const modalId = modal.id;

                    // Apply leaving transitions
                    modal.classList.remove('opacity-100');
                    modal.classList.add('opacity-0');

                    if (content) {
                        content.classList.remove('scale-100', 'opacity-100');
                        content.classList.add('scale-95', 'opacity-0');
                    }

                    function hideModal() {
                        modal.style.display = 'none';

                        if (window.modalState.openModalId === modalId) {
                            window.modalState.openModalId = null;
                            document.body.style.overflow = '';
                        }

                        // Clean up modal container if it exists
                        const modalContainer = document.getElementById('modal-container');
                        if (modalContainer) {
                            modalContainer.innerHTML = '';
                            modalContainer.style.display = 'none';
                            modalContainer.className = '';
                            modalContainer.removeAttribute('style');
                            modalContainer.style.display = 'none';
                        }
                    }

                    if (immediate) {
                        hideModal();
                    } else {
                        setTimeout(hideModal, 300);
                    }
                }

                function openModal(modal) {
                    if (!modal) return;

                    // Close any open modal first
                    if (window.modalState.openModalId) {
                        const openModal = document.getElementById(window.modalState.openModalId);
                        if (openModal && openModal !== modal) {
                            closeModal(openModal, true);
                        }
                    }

                    const content = modal.querySelector('[data-modal-content]');

                    // Display and prepare for animation
                    modal.style.display = 'flex';

                    // Store as currently open modal
                    window.modalState.openModalId = modal.id;
                    document.body.style.overflow = 'hidden';

                    // Force reflow before adding transition classes
                    void modal.offsetHeight;

                    // Start animations
                    modal.classList.remove('opacity-0');
                    modal.classList.add('opacity-100');

                    if (content) {
                        content.classList.remove('scale-95', 'opacity-0');
                        content.classList.add('scale-100', 'opacity-100');

                        // Focus first focusable element
                        setTimeout(() => {
                            const focusable = content.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
                            if (focusable) focusable.focus();
                        }, 50);
                    }
                }

                function closeModalById(modalId, immediate = false) {
                    const modal = document.getElementById(modalId);
                    if (modal) closeModal(modal, immediate);
                }

                function openModalById(modalId) {
                    const modal = document.getElementById(modalId);
                    if (modal) openModal(modal);
                }

                function handleClickAway(e) {
                    const openModalId = window.modalState.openModalId;
                    if (!openModalId) return;

                    const modal = document.getElementById(openModalId);
                    if (!modal || modal.getAttribute('data-disable-click-away') === 'true') return;

                    const content = modal.querySelector('[data-modal-content]');
                    const trigger = e.target.closest('[data-modal-trigger]');

                    if (content && !content.contains(e.target) &&
                        (!trigger || trigger.getAttribute('data-modal-target-id') !== openModalId)) {
                        closeModal(modal);
                    }
                }

                function handleEscKey(e) {
                    if (e.key !== 'Escape' || !window.modalState.openModalId) return;

                    const modal = document.getElementById(window.modalState.openModalId);
                    if (modal && modal.getAttribute('data-disable-esc') !== 'true') {
                        closeModal(modal);
                    }
                }

                function initTrigger(trigger) {
                    const targetId = trigger.getAttribute('data-modal-target-id');
                    if (!targetId) return;

                    trigger.addEventListener('click', () => {
                        if (!trigger.hasAttribute('disabled') &&
                            !trigger.classList.contains('opacity-50')) {
                            openModalById(targetId);
                        }
                    });
                }

                function initCloseButton(closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        const targetId = closeBtn.getAttribute('data-modal-target-id');
                        if (targetId) {
                            closeModalById(targetId);
                        } else {
                            const modal = closeBtn.closest('[data-modal]');
                            if (modal && modal.id) {
                                closeModal(modal);
                            }
                        }
                    });
                }

                function initAllComponents(root = document) {
                    if (root instanceof Element && root.matches('[data-modal-trigger]')) {
                        initTrigger(root);
                    }
                    for (const trigger of root.querySelectorAll('[data-modal-trigger]')) {
                        initTrigger(trigger);
                    }

                    if (root instanceof Element && root.matches('[data-modal-close]')) {
                        initCloseButton(root);
                    }
                    for (const closeBtn of root.querySelectorAll('[data-modal-close]')) {
                        initCloseButton(closeBtn);
                    }
                }

                const handleHtmxSwap = (event) => {
                    const target = event.detail.elt
                    if (target instanceof Element) {
                        requestAnimationFrame(() => initAllComponents(target));
                    }
                };

                if (typeof window.modalEventsInitialized === 'undefined') {
                    document.addEventListener('click', handleClickAway);
                    document.addEventListener('keydown', handleEscKey);
                    window.modalEventsInitialized = true;
                }

                // Make functions globally available
                window.closeModal = closeModal;
                window.openModal = openModal;
                window.closeModalById = closeModalById;
                window.openModalById = openModalById;

                initAllComponents();
                document.addEventListener('DOMContentLoaded', () => initAllComponents());
                document.body.addEventListener('htmx:afterSwap', handleHtmxSwap);
                document.body.addEventListener('htmx:oobAfterSwap', handleHtmxSwap);
            })(); // End of IIFE
        </script>
    </body>
    </html>
}

templ LayoutWithSidebar(user *auth.AuthenticatedUser, currentLocale string, title string, showSidebar bool) {
    <!DOCTYPE html>
    <html lang={ currentLocale }>
    <head>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <title>{ title } - Baigiamųjų darbų talpykla</title>
        <link rel="stylesheet" href="/assets/css/output.css"/>
    </head>
    <body class="bg-background text-foreground">
        <div class="min-h-screen flex flex-col">
            @Navbar(user, currentLocale)

            if showSidebar && user != nil {
                <div class="flex flex-1">
                    @Sidebar(user)
                    <main class="flex-1 p-6">
                        { children... }
                    </main>
                </div>
            } else {
                <main class="flex-1 container mx-auto px-4 py-6">
                    { children... }
                </main>
            }
        </div>

        <!-- Add HTMX -->
        <script src="https://unpkg.com/htmx.org@1.9.10"></script>
        <script src="/static/js/navbar.js"></script>

        <!-- Modal System Initialization (same as above) -->
               <script nonce="">
                   if (typeof window.modalState === 'undefined') {
                       window.modalState = {
                           openModalId: null
                       };
                   }

                   (function() { // IIFE
                       function closeModal(modal, immediate = false) {
                           if (!modal || modal.style.display === 'none') return;

                           const content = modal.querySelector('[data-modal-content]');
                           const modalId = modal.id;

                           // Apply leaving transitions
                           modal.classList.remove('opacity-100');
                           modal.classList.add('opacity-0');

                           if (content) {
                               content.classList.remove('scale-100', 'opacity-100');
                               content.classList.add('scale-95', 'opacity-0');
                           }

                           function hideModal() {
                               modal.style.display = 'none';

                               if (window.modalState.openModalId === modalId) {
                                   window.modalState.openModalId = null;
                                   document.body.style.overflow = '';
                               }

                               // Clean up modal container if it exists
                               const modalContainer = document.getElementById('modal-container');
                               if (modalContainer) {
                                   modalContainer.innerHTML = '';
                                   modalContainer.style.display = 'none';
                                   modalContainer.className = '';
                                   modalContainer.removeAttribute('style');
                                   modalContainer.style.display = 'none';
                               }
                           }

                           if (immediate) {
                               hideModal();
                           } else {
                               setTimeout(hideModal, 300);
                           }
                       }

                       function openModal(modal) {
                           if (!modal) return;

                           // Close any open modal first
                           if (window.modalState.openModalId) {
                               const openModal = document.getElementById(window.modalState.openModalId);
                               if (openModal && openModal !== modal) {
                                   closeModal(openModal, true);
                               }
                           }

                           const content = modal.querySelector('[data-modal-content]');

                           // Display and prepare for animation
                           modal.style.display = 'flex';

                           // Store as currently open modal
                           window.modalState.openModalId = modal.id;
                           document.body.style.overflow = 'hidden';

                           // Force reflow before adding transition classes
                           void modal.offsetHeight;

                           // Start animations
                           modal.classList.remove('opacity-0');
                           modal.classList.add('opacity-100');

                           if (content) {
                               content.classList.remove('scale-95', 'opacity-0');
                               content.classList.add('scale-100', 'opacity-100');

                               // Focus first focusable element
                               setTimeout(() => {
                                   const focusable = content.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
                                   if (focusable) focusable.focus();
                               }, 50);
                           }
                       }

                       function closeModalById(modalId, immediate = false) {
                           const modal = document.getElementById(modalId);
                           if (modal) closeModal(modal, immediate);
                       }

                       function openModalById(modalId) {
                           const modal = document.getElementById(modalId);
                           if (modal) openModal(modal);
                       }

                       function handleClickAway(e) {
                           const openModalId = window.modalState.openModalId;
                           if (!openModalId) return;

                           const modal = document.getElementById(openModalId);
                           if (!modal || modal.getAttribute('data-disable-click-away') === 'true') return;

                           const content = modal.querySelector('[data-modal-content]');
                           const trigger = e.target.closest('[data-modal-trigger]');

                           if (content && !content.contains(e.target) &&
                               (!trigger || trigger.getAttribute('data-modal-target-id') !== openModalId)) {
                               closeModal(modal);
                           }
                       }

                       function handleEscKey(e) {
                           if (e.key !== 'Escape' || !window.modalState.openModalId) return;

                           const modal = document.getElementById(window.modalState.openModalId);
                           if (modal && modal.getAttribute('data-disable-esc') !== 'true') {
                               closeModal(modal);
                           }
                       }

                       function initTrigger(trigger) {
                           const targetId = trigger.getAttribute('data-modal-target-id');
                           if (!targetId) return;

                           trigger.addEventListener('click', () => {
                               if (!trigger.hasAttribute('disabled') &&
                                   !trigger.classList.contains('opacity-50')) {
                                   openModalById(targetId);
                               }
                           });
                       }

                       function initCloseButton(closeBtn) {
                           closeBtn.addEventListener('click', () => {
                               const targetId = closeBtn.getAttribute('data-modal-target-id');
                               if (targetId) {
                                   closeModalById(targetId);
                               } else {
                                   const modal = closeBtn.closest('[data-modal]');
                                   if (modal && modal.id) {
                                       closeModal(modal);
                                   }
                               }
                           });
                       }

                       function initAllComponents(root = document) {
                           if (root instanceof Element && root.matches('[data-modal-trigger]')) {
                               initTrigger(root);
                           }
                           for (const trigger of root.querySelectorAll('[data-modal-trigger]')) {
                               initTrigger(trigger);
                           }

                           if (root instanceof Element && root.matches('[data-modal-close]')) {
                               initCloseButton(root);
                           }
                           for (const closeBtn of root.querySelectorAll('[data-modal-close]')) {
                               initCloseButton(closeBtn);
                           }
                       }

                       const handleHtmxSwap = (event) => {
                           const target = event.detail.elt
                           if (target instanceof Element) {
                               requestAnimationFrame(() => initAllComponents(target));
                           }
                       };

                       if (typeof window.modalEventsInitialized === 'undefined') {
                           document.addEventListener('click', handleClickAway);
                           document.addEventListener('keydown', handleEscKey);
                           window.modalEventsInitialized = true;
                       }

                       // Make functions globally available
                       window.closeModal = closeModal;
                       window.openModal = openModal;
                       window.closeModalById = closeModalById;
                       window.openModalById = openModalById;

                       initAllComponents();
                       document.addEventListener('DOMContentLoaded', () => initAllComponents());
                       document.body.addEventListener('htmx:afterSwap', handleHtmxSwap);
                       document.body.addEventListener('htmx:oobAfterSwap', handleHtmxSwap);
                   })(); // End of IIFE
               </script>

    </body>
    </html>
}

templ Sidebar(user *auth.AuthenticatedUser) {
    <aside class="w-64 border-r bg-card text-card-foreground">
        <div class="p-6">
            <h2 class="text-lg font-semibold mb-4">Navigation</h2>
            <nav class="space-y-2">
                @SidebarLink("/dashboard", "Dashboard", "🏠")
                @SidebarLink("/projects", "Projects", "📁")
                @SidebarLink("/submissions", "Submissions", "📄")
                @SidebarLink("/settings", "Settings", "⚙️")
            </nav>
        </div>
    </aside>
}

templ SidebarLink(href string, text string, icon string) {
    <a href={ templ.SafeURL(href) }
        class="flex items-center space-x-3 text-sm font-medium rounded-md px-3 py-2 hover:bg-accent hover:text-accent-foreground transition-colors"
    >
        <span class="text-lg">{ icon }</span>
        <span>{ text }</span>
    </a>
}