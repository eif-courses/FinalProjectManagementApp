package templates

import (
	"FinalProjectManagementApp/components/button"
	"FinalProjectManagementApp/components/modal"
	"FinalProjectManagementApp/components/textarea"
	"FinalProjectManagementApp/components/input"
	"FinalProjectManagementApp/components/form"
	"FinalProjectManagementApp/components/icon"
	"FinalProjectManagementApp/database"
	"fmt"
)

templ CompactSupervisorForm(props database.SupervisorReportFormProps, formData *database.SupervisorReportFormData) {
	@modal.Modal(modal.Props{ID: "supervisor-modal", Class: "w-[95vw] max-w-4xl mx-auto my-2"}) {
		@modal.Header() {
			<div class="relative px-6 py-2 border-b">
				<button onclick="closeSupervisorModal()" class="absolute top-2 right-4 text-gray-500 hover:text-gray-700 text-xl font-bold">
					×
				</button>
				<div class="text-center pr-8">
					<h2 class="text-lg font-bold text-gray-900 dark:text-white">
						if props.FormVariant == "en" {
							if props.IsReadOnly {
								SUPERVISOR'S EVALUATION REPORT (VIEW ONLY)
							} else {
								SUPERVISOR'S EVALUATION REPORT
							}
						} else {
							if props.IsReadOnly {
								BAIGIAMOJO DARBO VADOVO ATSILIEPIMAS (PERŽIŪRA)
							} else {
								BAIGIAMOJO DARBO VADOVO ATSILIEPIMAS
							}
						}
					</h2>
				</div>
			</div>
		}
		@modal.Body() {
			<div class="px-6 py-3" style="max-height: calc(90vh - 120px); overflow-y: auto;">
				<!-- Auto-save indicator -->
				if !props.IsReadOnly {
					<div class="flex items-center justify-between mb-3">
						<div id="auto-save-status" class="text-sm text-gray-500 flex items-center gap-2">
							<span id="save-icon" class="hidden">
								@icon.Save(icon.Props{Size: 14})
							</span>
							<span id="save-text">
								if props.FormVariant == "en" {
									Auto-save enabled
								} else {
									Automatinis išsaugojimas įjungtas
								}
							</span>
						</div>
						<div class="text-xs text-gray-400">
							<span id="last-saved"></span>
						</div>
					</div>
				}

				<form
					id="compact-supervisor-form"
					if !props.IsReadOnly {
						hx-post={ fmt.Sprintf("/supervisor-report/%d/submit", props.StudentRecord.ID) }
						hx-target="#supervisor-modal"
						hx-swap="outerHTML"
					}
					class="space-y-4"
					data-student-id={ fmt.Sprintf("%d", props.StudentRecord.ID) }
				>
					<!-- Add hidden field to track if this is a draft -->
					<input type="hidden" name="is_draft" id="is_draft" value="false"/>

					<!-- Compact Header Info -->
					<div class="bg-gray-50 dark:bg-gray-800 rounded p-3 space-y-2 text-sm">
						<div>
							<span class="font-medium">
								if props.FormVariant == "en" {
									Study Program:
								} else {
									Studijų programa:
								}
							</span>
							<span class="ml-2">{ props.StudentRecord.StudentGroup }</span>
						</div>
						<div>
							<span class="font-medium">
								if props.FormVariant == "en" {
									Student:
								} else {
									Studentas (-ė):
								}
							</span>
							<span class="ml-2">{ props.StudentRecord.GetFullName() }</span>
						</div>
						<div>
							<span class="font-medium">
								if props.FormVariant == "en" {
									Thesis Title:
								} else {
									Baigiamojo darbo tema:
								}
							</span>
							<span class="ml-2 font-semibold">{ props.StudentRecord.GetLocalizedTitle(props.FormVariant) }</span>
						</div>
					</div>

					<!-- Evaluation Text -->
					@form.Item() {
						@form.Label(form.LabelProps{
							For: "supervisor_comments",
						}) {
							if props.FormVariant == "en" {
								Evaluation Text
							} else {
								Atsiliepimo tekstas
							}
							if !props.IsReadOnly {
								<span class="text-red-500 ml-1">*</span>
							}
						}
						@textarea.Textarea(textarea.Props{
							ID:          "supervisor_comments",
							Name:        "supervisor_comments",
							Value:       formData.SupervisorComments,
							Required:    !props.IsReadOnly,
							Class:       "text-sm w-full auto-save-field",
							Rows:        4,
							Placeholder: getPlaceholder(props.FormVariant, "feedback"),
							Disabled:    props.IsReadOnly,
							Attributes: templ.Attributes{
								"minlength": "50",
								"oninput": "updateCharCount(this)",
							},
						})
						if !props.IsReadOnly {
							@form.Description() {
								<span id="char-count">0</span>/50 characters minimum
							}
						}
					}

					<!-- Defense Eligibility -->
					<div class="border rounded-lg p-3">
						@form.Item() {
							@form.Label(form.LabelProps{}) {
								if props.FormVariant == "en" {
									Defense Eligibility
								} else {
									Gynimo tinkamumas
								}
								if !props.IsReadOnly {
									<span class="text-red-500 ml-1">*</span>
								}
							}
							<div class="space-y-2 mt-2">
								<label class="flex items-start gap-2">
									<input
										type="radio"
										id="is_pass_or_failed_true"
										name="is_pass_or_failed"
										value="true"
										checked?={ formData.IsPassOrFailed }
										class="form-radio h-4 w-4 text-blue-600 mt-0.5 auto-save-field"
										if props.IsReadOnly {
											disabled
										}
									/>
									<span class="text-sm">
										if props.FormVariant == "en" {
											Thesis is suitable for defense at the Final Thesis Defense Commission meeting.
										} else {
											Baigiamasis darbas tinkamas ginti Baigiamųjų darbų gynimo komisijos posėdyje.
										}
									</span>
								</label>
								<label class="flex items-start gap-2">
									<input
										type="radio"
										id="is_pass_or_failed_false"
										name="is_pass_or_failed"
										value="false"
										checked?={ !formData.IsPassOrFailed }
										class="form-radio h-4 w-4 text-blue-600 mt-0.5 auto-save-field"
										if props.IsReadOnly {
											disabled
										}
									/>
									<span class="text-sm">
										if props.FormVariant == "en" {
											Thesis is not suitable for defense at the Final Thesis Defense Commission meeting due to plagiarism detection.
										} else {
											Baigiamasis darbas netinkamas ginti Baigiamųjų darbų gynimo komisijos posėdyje dėl plagiato fakto nustatymo.
										}
									</span>
								</label>
							</div>
						}
					</div>

					<!-- Plagiarism Analysis -->
					<div class="border rounded-lg p-3">
						<h4 class="text-sm font-medium mb-3">
							if props.FormVariant == "en" {
								Plagiarism Analysis
							} else {
								Plagiato analizė
							}
						</h4>
						<p class="text-sm text-gray-600 mb-3">
							if props.FormVariant == "en" {
								Determined similarity with other works:
							} else {
								Nustatyta sutaptis su kitais darbais:
							}
						</p>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
							@form.Item() {
								@form.Label(form.LabelProps{
									For: "other_match",
								}) {
									if props.FormVariant == "en" {
										Total similarity
									} else {
										Bendra sutaptis
									}
								}
								<div class="flex items-center gap-2">
									@input.Input(input.Props{
										ID:       "other_match",
										Type:     input.TypeNumber,
										Name:     "other_match",
										Value:    fmt.Sprintf("%.1f", formData.OtherMatch),
										Class:    "w-20 text-center auto-save-field",
										Disabled: props.IsReadOnly,
										Attributes: templ.Attributes{
											"min":  "0",
											"max":  "100",
											"step": "0.1",
										},
									})
									<span class="text-sm">
										if props.FormVariant == "en" {
											% of total work
										} else {
											% viso darbo
										}
									</span>
								</div>
							}

							@form.Item() {
								@form.Label(form.LabelProps{
									For: "one_match",
								}) {
									if props.FormVariant == "en" {
										Similarity with one source
									} else {
										Sutaptis su vienu šaltiniu
									}
								}
								<div class="flex items-center gap-2">
									@input.Input(input.Props{
										ID:       "one_match",
										Type:     input.TypeNumber,
										Name:     "one_match",
										Value:    fmt.Sprintf("%.1f", formData.OneMatch),
										Class:    "w-20 text-center auto-save-field",
										Disabled: props.IsReadOnly,
										Attributes: templ.Attributes{
											"min":  "0",
											"max":  "100",
											"step": "0.1",
										},
									})
									<span class="text-sm">%</span>
								</div>
							}

							@form.Item() {
								@form.Label(form.LabelProps{
									For: "own_match",
								}) {
									if props.FormVariant == "en" {
										Own previous works
									} else {
										Savi ankstesni darbai
									}
								}
								<div class="flex items-center gap-2">
									@input.Input(input.Props{
										ID:       "own_match",
										Type:     input.TypeNumber,
										Name:     "own_match",
										Value:    fmt.Sprintf("%.1f", formData.OwnMatch),
										Class:    "w-20 text-center auto-save-field",
										Disabled: props.IsReadOnly,
										Attributes: templ.Attributes{
											"min":  "0",
											"max":  "100",
											"step": "0.1",
										},
									})
									<span class="text-sm">%</span>
								</div>
							}

							@form.Item() {
								@form.Label(form.LabelProps{
									For: "join_match",
								}) {
									if props.FormVariant == "en" {
										Joint work authors
									} else {
										Bendri autoriai
									}
								}
								<div class="flex items-center gap-2">
									@input.Input(input.Props{
										ID:       "join_match",
										Type:     input.TypeNumber,
										Name:     "join_match",
										Value:    fmt.Sprintf("%.1f", formData.JoinMatch),
										Class:    "w-20 text-center auto-save-field",
										Disabled: props.IsReadOnly,
										Attributes: templ.Attributes{
											"min":  "0",
											"max":  "100",
											"step": "0.1",
										},
									})
									<span class="text-sm">%</span>
								</div>
							}
						</div>
					</div>

					<!-- Supervisor Info -->
					<div class="border rounded-lg p-3">
						<h4 class="text-sm font-medium mb-3">
							if props.FormVariant == "en" {
								Supervisor Information
							} else {
								Vadovo informacija
							}
						</h4>
						<div class="text-sm text-gray-700 dark:text-gray-300 mb-3">
							if props.FormVariant == "en" {
								Thesis supervisor:
							} else {
								Baigiamojo darbo vadovas:
							}
							<span class="font-medium ml-2">{ props.CurrentSupervisorName }</span>
						</div>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
							@form.Item() {
								@form.Label(form.LabelProps{
									For: "supervisor_workplace",
								}) {
									if props.FormVariant == "en" {
										Workplace
									} else {
										Darbovietė
									}
									if !props.IsReadOnly {
										<span class="text-red-500 ml-1">*</span>
									}
								}
								@input.Input(input.Props{
									ID:       "supervisor_workplace",
									Type:     input.TypeText,
									Name:     "supervisor_workplace",
									Value:    formData.SupervisorWorkplace,
									Required: !props.IsReadOnly,
									Class:    "w-full auto-save-field",
									Disabled: props.IsReadOnly,
								})
							}

							@form.Item() {
								@form.Label(form.LabelProps{
									For: "supervisor_position",
								}) {
									if props.FormVariant == "en" {
										Position
									} else {
										Pareigos
									}
									if !props.IsReadOnly {
										<span class="text-red-500 ml-1">*</span>
									}
								}
								@input.Input(input.Props{
									ID:       "supervisor_position",
									Type:     input.TypeText,
									Name:     "supervisor_position",
									Value:    formData.SupervisorPosition,
									Required: !props.IsReadOnly,
									Class:    "w-full auto-save-field",
									Disabled: props.IsReadOnly,
								})
							}
						</div>
					</div>

					<!-- Date -->
					<div class="text-center text-sm text-gray-600 dark:text-gray-400 pt-3 border-t">
						<span id="current-date"></span>
					</div>
				</form>
				<div id="modal-result" class="mt-3"></div>
			</div>
		}
		@modal.Footer() {
			<div class="border-t pt-2 px-6 pb-2">
				<div class="flex flex-wrap justify-end gap-2">
					@modal.Close(modal.CloseProps{ModalID: "supervisor-modal"}) {
						@button.Button(button.Props{
							Variant: button.VariantGhost,
							Class:   "h-9 px-4 text-sm",
						}) {
							if props.FormVariant == "en" {
								Close
							} else {
								Uždaryti
							}
						}
					}
					if !props.IsReadOnly {
						<!-- Save as Draft button -->
						@button.Button(button.Props{
							Variant: button.VariantOutline,
							Class:   "h-9 px-4 text-sm",
							Attributes: templ.Attributes{
								"onclick": "saveSupervisorDraft()",
							},
						}) {
							@icon.Save(icon.Props{Size: 14})
							<span class="ml-1">
								if props.FormVariant == "en" {
									Save Draft
								} else {
									Išsaugoti juodraštį
								}
							</span>
						}
						<!-- Submit button -->
						@button.Button(button.Props{
							Type:    button.TypeSubmit,
							Variant: button.VariantSecondary,
							Class:   "h-9 px-4 text-sm",
							Attributes: templ.Attributes{
								"form":    "compact-supervisor-form",
								"onclick": "return validateAndSubmitSupervisor()",
							},
						}) {
							if props.FormVariant == "en" {
								💾 Confirm and Submit
							} else {
								💾 Patvirtinti ir pateikti
							}
						}
					}
				</div>
			</div>
		}
	}
	@SupervisorModalScripts()
}


templ SupervisorModalScripts() {
	<script>
		// Wrap everything in an IIFE and use a namespace to avoid global scope pollution
		(function() {
			// Check if already initialized
			if (window.supervisorForm) {
				// Clean up existing timers
				if (window.supervisorForm.autoSaveTimer) {
					clearTimeout(window.supervisorForm.autoSaveTimer);
				}
			}

			// Create namespace for supervisor form
			window.supervisorForm = {
				autoSaveTimer: null,
				hasUnsavedChanges: false,
				AUTOSAVE_DELAY: 3000
			};

			// Set current date
			const dateElement = document.getElementById('current-date');
			if (dateElement) {
				dateElement.textContent = new Date().toLocaleDateString('lt-LT');
			}

			// Define functions in namespace
			window.initializeSupervisorAutoSave = function() {
				const form = document.getElementById('compact-supervisor-form');
				if (!form || form.querySelector('[disabled]')) return;

				// Remove existing listeners first
				const fields = form.querySelectorAll('.auto-save-field');
				fields.forEach(field => {
					// Clone node to remove all event listeners
					const newField = field.cloneNode(true);
					field.parentNode.replaceChild(newField, field);

					// Add new listeners
					newField.addEventListener('input', window.handleSupervisorFieldChange);
					newField.addEventListener('change', window.handleSupervisorFieldChange);
				});
			};

			window.handleSupervisorFieldChange = function() {
				window.supervisorForm.hasUnsavedChanges = true;
				clearTimeout(window.supervisorForm.autoSaveTimer);

				// Update status to show saving will occur
				window.updateSupervisorSaveStatus('pending');

				// Set timer for auto-save
				window.supervisorForm.autoSaveTimer = setTimeout(() => {
					window.supervisorAutoSave();
				}, window.supervisorForm.AUTOSAVE_DELAY);
			};

			window.updateSupervisorSaveStatus = function(status) {
				const saveIcon = document.getElementById('save-icon');
				const saveText = document.getElementById('save-text');
				const lastSaved = document.getElementById('last-saved');

				if (!saveText) return;

				switch(status) {
					case 'pending':
						if (saveIcon) saveIcon.classList.remove('hidden');
						saveText.textContent = 'Changes detected...';
						saveText.classList.add('text-yellow-600');
						saveText.classList.remove('text-green-600', 'text-red-600');
						break;
					case 'saving':
						if (saveIcon) saveIcon.classList.remove('hidden');
						saveText.textContent = 'Saving...';
						saveText.classList.add('text-blue-600');
						saveText.classList.remove('text-yellow-600', 'text-green-600');
						break;
					case 'saved':
						if (saveIcon) saveIcon.classList.remove('hidden');
						saveText.textContent = 'All changes saved';
						saveText.classList.remove('text-blue-600', 'text-yellow-600');
						saveText.classList.add('text-green-600');
						const now = new Date();
						if (lastSaved) {
							lastSaved.textContent = `Last saved: ${now.toLocaleTimeString()}`;
						}
						window.supervisorForm.hasUnsavedChanges = false;
						break;
					case 'error':
						if (saveIcon) saveIcon.classList.add('hidden');
						saveText.textContent = 'Error saving';
						saveText.classList.add('text-red-600');
						break;
				}
			};

			window.supervisorAutoSave = function() {
				const form = document.getElementById('compact-supervisor-form');
				if (!form) return;

				const studentId = form.dataset.studentId;

				// Set draft flag
				const draftInput = document.getElementById('is_draft');
				if (draftInput) draftInput.value = 'true';

				window.updateSupervisorSaveStatus('saving');

				// Gather form data
				const formData = new FormData(form);

				// Send via HTMX
				htmx.ajax('POST', `/supervisor-report/${studentId}/save-draft`, {
					values: Object.fromEntries(formData),
					target: '#modal-result',
					swap: 'innerHTML'
				}).then(() => {
					window.updateSupervisorSaveStatus('saved');
				}).catch(() => {
					window.updateSupervisorSaveStatus('error');
				});
			};

			window.saveSupervisorDraft = function() {
				const form = document.getElementById('compact-supervisor-form');
				if (!form) return;

				const studentId = form.dataset.studentId;

				// Set draft flag
				const draftInput = document.getElementById('is_draft');
				if (draftInput) draftInput.value = 'true';

				// Gather form data
				const formData = new FormData(form);

				// Show saving indicator
				window.updateSupervisorSaveStatus('saving');

				// Send via HTMX
				htmx.ajax('POST', `/supervisor-report/${studentId}/save-draft`, {
					values: Object.fromEntries(formData),
					target: '#modal-result',
					swap: 'innerHTML'
				}).then(() => {
					window.updateSupervisorSaveStatus('saved');
					setTimeout(() => {
						window.showSupervisorSuccessMessage('Draft saved successfully!');
					}, 500);
				});
			};

			window.updateCharCount = function(textarea) {
				const charCount = document.getElementById('char-count');
				if (charCount) {
					const length = textarea.value.length;
					charCount.textContent = length;

					if (length < 50) {
						charCount.style.color = 'red';
					} else {
						charCount.style.color = 'green';
					}
				}
			};

			window.validateAndSubmitSupervisor = function() {
				// Set draft flag to false for final submission
				const draftInput = document.getElementById('is_draft');
				if (draftInput) draftInput.value = 'false';

				// Validate form
				return window.validateSupervisorForm();
			};

			window.validateSupervisorForm = function() {
				const form = document.getElementById('compact-supervisor-form');
				if (!form) return false;

				const comments = form.querySelector('#supervisor_comments');
				const workplace = form.querySelector('#supervisor_workplace');
				const position = form.querySelector('#supervisor_position');

				if (!comments || !workplace || !position) {
					alert('Form fields not found');
					return false;
				}

				const commentsValue = comments.value.trim();
				const workplaceValue = workplace.value.trim();
				const positionValue = position.value.trim();

				if (!commentsValue || !workplaceValue || !positionValue) {
					alert('Please fill in all required fields');
					return false;
				}

				if (commentsValue.length < 50) {
					alert('Supervisor comments must be at least 50 characters long. Current length: ' + commentsValue.length);
					return false;
				}

				// Check if defense eligibility is selected
				const defenseEligibility = form.querySelector('input[name="is_pass_or_failed"]:checked');
				if (!defenseEligibility) {
					alert('Please select defense eligibility status');
					return false;
				}

				return true;
			};

			window.showSupervisorSuccessMessage = function(message) {
				const result = document.getElementById('modal-result');
				if (!result) return;

				result.innerHTML = `
					<div class="bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded">
						<div class="flex items-center">
							<svg class="h-5 w-5 text-green-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
							<span>${message}</span>
						</div>
					</div>
				`;

				setTimeout(() => {
					result.innerHTML = '';
				}, 3000);
			};

		window.closeSupervisorModal = function() {
            if (window.supervisorForm && window.supervisorForm.hasUnsavedChanges) {
                if (!confirm('You have unsaved changes. Are you sure you want to close?')) {
                    return;
                }
            }

            const modal = document.getElementById('supervisor-modal');
            if (modal) {
                modal.classList.remove('opacity-100');
                modal.classList.add('opacity-0');
                const content = modal.querySelector('[data-modal-content]');
                if (content) {
                    content.classList.remove('scale-100', 'opacity-100');
                    content.classList.add('scale-95', 'opacity-0');
                }

                setTimeout(() => {
                    modal.style.display = 'none';
                    document.body.style.overflow = '';
                    if (window.modalState) {
                        window.modalState.openModalId = null;
                    }
                    if (window.supervisorForm) {
                        window.supervisorForm.hasUnsavedChanges = false;
                        // Clear timer
                        if (window.supervisorForm.autoSaveTimer) {
                            clearTimeout(window.supervisorForm.autoSaveTimer);
                        }
                    }

                    // IMPORTANT: Clean up the modal container
                    const modalContainer = document.getElementById('modal-container');
                    if (modalContainer) {
                        modalContainer.innerHTML = '';
                        modalContainer.style.display = 'none';
                        modalContainer.className = '';
                        modalContainer.removeAttribute('style');
                        modalContainer.style.display = 'none';
                    }
                }, 300);
            }
        };

			// Modal opening logic
			requestAnimationFrame(function() {
				requestAnimationFrame(function() {
					const modal = document.getElementById('supervisor-modal');
					if (modal) {
						if (window.modalState && window.modalState.openModalId) {
							const existingModal = document.getElementById(window.modalState.openModalId);
							if (existingModal && existingModal !== modal) {
								existingModal.style.display = 'none';
								existingModal.classList.add('opacity-0');
							}
						}

						if (!window.modalState) {
							window.modalState = { openModalId: null };
						}

						window.modalState.openModalId = 'supervisor-modal';
						document.body.style.overflow = 'hidden';
						modal.style.display = 'flex';
						modal.offsetHeight;
						modal.classList.remove('opacity-0', 'hidden');
						modal.classList.add('opacity-100');

						const content = modal.querySelector('[data-modal-content]');
						if (content) {
							content.classList.remove('scale-95', 'opacity-0');
							content.classList.add('scale-100', 'opacity-100');
						}

						// Initialize auto-save listeners
						window.initializeSupervisorAutoSave();

						// Initialize character count
						setTimeout(function() {
							const textarea = document.getElementById('supervisor_comments');
							if (textarea && !textarea.disabled) {
								window.updateCharCount(textarea);
							}
						}, 200);
					}
				});
			});

			// Clean up old event listeners and add new ones
			const oldBeforeUnload = window.onbeforeunload;
			window.addEventListener('beforeunload', function (e) {
				if (window.supervisorForm && window.supervisorForm.hasUnsavedChanges) {
					e.preventDefault();
					e.returnValue = '';
				}
			});

			// Remove old htmx listeners and add new one
			document.removeEventListener('htmx:afterRequest', window.supervisorFormHtmxHandler);

			window.supervisorFormHtmxHandler = function(evt) {
                if (evt.detail.successful && (
                    evt.target.closest('#compact-supervisor-form') ||
                    evt.detail.xhr.getResponseHeader('HX-Trigger') === 'supervisorReportSaved'
                )) {
                    window.supervisorForm.hasUnsavedChanges = false;

                    const draftInput = document.getElementById('is_draft');
                    const isDraft = draftInput && draftInput.value === 'true';

                    if (!isDraft) {
                        // Final submission - close modal properly
                        window.closeSupervisorModal();

                        // Wait for modal to close before refreshing
                        setTimeout(() => {
                            // Refresh the page or specific content as needed
                            if (typeof htmx !== 'undefined') {
                                htmx.ajax('GET', window.location.pathname, {
                                    target: 'body',
                                    swap: 'outerHTML'
                                });
                            } else {
                                location.reload();
                            }
                        }, 400);
                    }
                }
            };

			document.addEventListener('htmx:afterRequest', window.supervisorFormHtmxHandler);

			// Remove old keydown listener and add new one
			document.removeEventListener('keydown', window.supervisorFormEscapeHandler);

			window.supervisorFormEscapeHandler = function(e) {
				if (e.key === 'Escape' && window.modalState && window.modalState.openModalId === 'supervisor-modal') {
					if (window.supervisorForm && window.supervisorForm.hasUnsavedChanges) {
						if (confirm('You have unsaved changes. Are you sure you want to close?')) {
							window.closeSupervisorModal();
						}
					} else {
						window.closeSupervisorModal();
					}
				}
			};

			document.addEventListener('keydown', window.supervisorFormEscapeHandler);

			// Clean up on modal close
			document.addEventListener('htmx:beforeSwap', function(evt) {
				if (evt.detail.target && evt.detail.target.id === 'supervisor-modal') {
					// Clean up timers
					if (window.supervisorForm && window.supervisorForm.autoSaveTimer) {
						clearTimeout(window.supervisorForm.autoSaveTimer);
					}
				}
			});

		})();
	</script>
}



// Helper function
func getPlaceholder(formVariant, fieldType string) string {
	if formVariant == "en" {
		return "Enter supervisor's feedback and comments..."
	}
	return "Įveskite vadovo atsiliepimą ir komentarus..."
}