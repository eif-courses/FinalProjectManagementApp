package templates

import (
	"FinalProjectManagementApp/components/button"
	"FinalProjectManagementApp/components/modal"
	"FinalProjectManagementApp/database"
	"fmt"
)

func getPlaceholder(formVariant, fieldType string) string {
	if formVariant == "en" {
		return "Enter supervisor's feedback and comments..."
	}
	return "Įveskite vadovo atsiliepimą ir komentarus..."
}

templ CompactSupervisorForm(props database.SupervisorReportFormProps, formData *database.SupervisorReportFormData) {
	@modal.Modal(modal.Props{ID: "supervisor-modal", Class: "max-w-4xl w-full mx-4"}) {
		@modal.Header() {
			<div class="text-center">
				<h2 class="text-lg font-bold text-gray-900 dark:text-white mb-1">
					if props.FormVariant == "en" {
						if props.IsReadOnly {
							SUPERVISOR'S EVALUATION REPORT (VIEW ONLY)
						} else {
							SUPERVISOR'S EVALUATION REPORT
						}
					} else {
						if props.IsReadOnly {
							BAIGIAMOJO DARBO VADOVO ATSILIEPIMAS (PERŽIŪRA)
						} else {
							BAIGIAMOJO DARBO VADOVO ATSILIEPIMAS
						}
					}
				</h2>
				<p class="text-sm text-gray-600 dark:text-gray-300">
					{ props.StudentRecord.GetFullName() }
				</p>
			</div>
		}
		@modal.Body() {
			<form
				id="compact-supervisor-form"
				if !props.IsReadOnly {
					hx-post={ fmt.Sprintf("/supervisor-report/%d/submit", props.StudentRecord.ID) }
					hx-target="#supervisor-modal"
					hx-swap="outerHTML"
				}
				class="space-y-4 text-sm"
			>
				<!-- Study Program Info -->
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-xs">
					<div>
						<span class="font-medium">
							if props.FormVariant == "en" {
								Study Program:
							} else {
								Studijų programa:
							}
						</span>
						<span class="ml-2">{ props.StudentRecord.StudentGroup }</span>
					</div>
					<div class="text-right">
						<span class="font-medium">
							if props.FormVariant == "en" {
								Student:
							} else {
								Studentas (-ė):
							}
						</span>
						<span class="ml-2">{ props.StudentRecord.GetFullName() }</span>
					</div>
				</div>
				<!-- Thesis Title -->
				<div class="border-t pt-3">
					<div class="mb-2">
						<span class="font-medium text-sm">
							if props.FormVariant == "en" {
								Thesis Title:
							} else {
								Baigiamojo darbo tema:
							}
						</span>
						<span class="ml-2 font-semibold">{ props.StudentRecord.GetLocalizedTitle(props.FormVariant) }</span>
					</div>
				</div>
				<!-- Evaluation Text - FIXED -->
				<div>
					<label class="block text-sm font-medium mb-2">
						if props.FormVariant == "en" {
							Evaluation Text (minimum 50 characters)
						} else {
							Atsiliepimo tekstas (mažiausiai 50 simbolių)
						}
						if !props.IsReadOnly {
							<span class="text-red-500 ml-1">*</span>
						}
					</label>
					<textarea
						id="supervisor_comments"
						name="supervisor_comments"
						placeholder={ getPlaceholder(props.FormVariant, "feedback") }
						required?={ !props.IsReadOnly }
						rows="4"
						class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
						if props.IsReadOnly {
							class="w-full px-3 py-2 border border-gray-200 rounded-md shadow-sm text-sm bg-gray-50"
							disabled
							readonly
						}
						minlength="50"
						oninput="updateCharCount(this)"
					>{ formData.SupervisorComments }</textarea>
					if !props.IsReadOnly {
						<div class="text-xs text-gray-500 mt-1">
							<span id="char-count">0</span>/50 characters minimum
						</div>
					}
				</div>
				<!-- Defense Eligibility -->
				<div class="border-t pt-3">
					<label class="block text-sm font-medium mb-3">
						if props.FormVariant == "en" {
							Thesis is suitable for defense at the Final Thesis Defense Commission meeting.
						} else {
							Baigiamasis darbas tinkamas ginti Baigiamųjų darbų gynimo komisijos posėdyje.
						}
					</label>
					<div class="space-y-2">
						<label class="inline-flex items-center">
							<input
								type="radio"
								id="is_pass_or_failed_true"
								name="is_pass_or_failed"
								value="true"
								checked?={ formData.IsPassOrFailed }
								class="form-radio h-4 w-4 text-blue-600"
								if props.IsReadOnly {
									disabled
								}
							/>
							<span class="ml-2 text-sm">
								if props.FormVariant == "en" {
									Thesis is suitable for defense at the Final Thesis Defense Commission meeting.
								} else {
									Baigiamasis darbas tinkamas ginti Baigiamųjų darbų gynimo komisijos posėdyje.
								}
							</span>
						</label>
						<label class="inline-flex items-center">
							<input
								type="radio"
								id="is_pass_or_failed_false"
								name="is_pass_or_failed"
								value="false"
								checked?={ !formData.IsPassOrFailed }
								class="form-radio h-4 w-4 text-blue-600"
								if props.IsReadOnly {
									disabled
								}
							/>
							<span class="ml-2 text-sm">
								if props.FormVariant == "en" {
									Thesis is not suitable for defense at the Final Thesis Defense Commission meeting due to plagiarism detection.
								} else {
									Baigiamasis darbas netinkamas ginti Baigiamųjų darbų gynimo komisijos posėdyje dėl plagiato fakto nustatymo.
								}
							</span>
						</label>
					</div>
				</div>
				<!-- Plagiarism Analysis -->
				<div class="border-t pt-3">
					<h4 class="text-sm font-medium mb-3">
						if props.FormVariant == "en" {
							Determined similarity with other works makes up:
						} else {
							Nustatyta sutaptis su kitais darbais sudaro:
						}
					</h4>
					<div class="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
						<div class="flex items-center space-x-2">
							<input
								type="number"
								id="other_match"
								name="other_match"
								value={ fmt.Sprintf("%.1f", formData.OtherMatch) }
								min="0"
								max="100"
								step="0.1"
								class="w-16 px-2 py-1 border border-gray-300 rounded text-center text-sm"
								if props.IsReadOnly {
									class="w-16 px-2 py-1 border border-gray-200 rounded text-center text-sm bg-gray-50"
									disabled
									readonly
								}
							/>
							<span>
								if props.FormVariant == "en" {
									percent of total work;
								} else {
									procentų viso darbo, iš jų:
								}
							</span>
						</div>
						<div class="flex items-center space-x-2">
							<span class="text-sm">
								if props.FormVariant == "en" {
									similarity with one source
								} else {
									sutaptis su vienu šaltiniu
								}
							</span>
							<input
								type="number"
								id="one_match"
								name="one_match"
								value={ fmt.Sprintf("%.1f", formData.OneMatch) }
								min="0"
								max="100"
								step="0.1"
								class="w-16 px-2 py-1 border border-gray-300 rounded text-center text-sm"
								if props.IsReadOnly {
									class="w-16 px-2 py-1 border border-gray-200 rounded text-center text-sm bg-gray-50"
									disabled
									readonly
								}
							/>
							<span class="text-sm">
								if props.FormVariant == "en" {
									percent of total work;
								} else {
									procentų viso darbo;
								}
							</span>
						</div>
						<div class="flex items-center space-x-2">
							<span class="text-sm">
								if props.FormVariant == "en" {
									similarity with own previous works
								} else {
									sutaptis su kitais to paties studento studijų rašto darbais sudaro
								}
							</span>
							<input
								type="number"
								id="own_match"
								name="own_match"
								value={ fmt.Sprintf("%.1f", formData.OwnMatch) }
								min="0"
								max="100"
								step="0.1"
								class="w-16 px-2 py-1 border border-gray-300 rounded text-center text-sm"
								if props.IsReadOnly {
									class="w-16 px-2 py-1 border border-gray-200 rounded text-center text-sm bg-gray-50"
									disabled
									readonly
								}
							/>
							<span class="text-sm">
								if props.FormVariant == "en" {
									percent of total work;
								} else {
									procentų viso darbo;
								}
							</span>
						</div>
						<div class="flex items-center space-x-2">
							<span class="text-sm">
								if props.FormVariant == "en" {
									similarity with joint work authors
								} else {
									sutaptis su kitų studentų to paties jungtinio darbo autorių darbais sudaro
								}
							</span>
							<input
								type="number"
								id="join_match"
								name="join_match"
								value={ fmt.Sprintf("%.1f", formData.JoinMatch) }
								min="0"
								max="100"
								step="0.1"
								class="w-16 px-2 py-1 border border-gray-300 rounded text-center text-sm"
								if props.IsReadOnly {
									class="w-16 px-2 py-1 border border-gray-200 rounded text-center text-sm bg-gray-50"
									disabled
									readonly
								}
							/>
							<span class="text-sm">
								if props.FormVariant == "en" {
									percent of total work.
								} else {
									procentų viso darbo.
								}
							</span>
						</div>
					</div>
				</div>
				<!-- Confirmation -->
				<div class="border-t pt-3">
					<h4 class="text-sm font-medium mb-2">
						if props.FormVariant == "en" {
							Confirmation:
						} else {
							Patvirtinimas:
						}
					</h4>
					<div class="text-sm text-gray-700 dark:text-gray-300 mb-3">
						if props.FormVariant == "en" {
							Thesis supervisor (-ė):
						} else {
							Baigiamojo darbo vadovas (-ė):
						}
						<span class="font-medium ml-2">{ props.CurrentSupervisorName }</span>
					</div>
				</div>
				<!-- Supervisor Info -->
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
					<div>
						<label class="block text-sm font-medium mb-1">
							if props.FormVariant == "en" {
								Workplace
							} else {
								Darbovietė
							}
							if !props.IsReadOnly {
								<span class="text-red-500 ml-1">*</span>
							}
						</label>
						<input
							type="text"
							id="supervisor_workplace"
							name="supervisor_workplace"
							value={ formData.SupervisorWorkplace }
							required?={ !props.IsReadOnly }
							class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
							if props.IsReadOnly {
								class="w-full px-3 py-2 border border-gray-200 rounded-md shadow-sm text-sm bg-gray-50"
								disabled
								readonly
							}
						/>
					</div>
					<div>
						<label class="block text-sm font-medium mb-1">
							if props.FormVariant == "en" {
								Position
							} else {
								Pareigos
							}
							if !props.IsReadOnly {
								<span class="text-red-500 ml-1">*</span>
							}
						</label>
						<input
							type="text"
							id="supervisor_position"
							name="supervisor_position"
							value={ formData.SupervisorPosition }
							required?={ !props.IsReadOnly }
							class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-sm"
							if props.IsReadOnly {
								class="w-full px-3 py-2 border border-gray-200 rounded-md shadow-sm text-sm bg-gray-50"
								disabled
								readonly
							}
						/>
					</div>
				</div>
				<!-- Date (auto-filled) -->
				<div class="text-center text-sm text-gray-600 dark:text-gray-400 pt-3 border-t">
					<span id="current-date"></span>
					<script>
						document.getElementById('current-date').textContent = new Date().toLocaleDateString('lt-LT');
					</script>
				</div>
			</form>
		}
		@modal.Footer() {
			<div class="flex gap-3 justify-end w-full pt-4 border-t">
				@modal.Close(modal.CloseProps{ModalID: "supervisor-modal"}) {
					@button.Button(button.Props{Variant: button.VariantGhost}) {
						if props.IsReadOnly {
							if props.FormVariant == "en" {
								Close
							} else {
								Uždaryti
							}
						} else {
							if props.FormVariant == "en" {
								Cancel
							} else {
								Atšaukti
							}
						}
					}
				}
				if !props.IsReadOnly {
					@button.Button(button.Props{
						Type:    button.TypeSubmit,
						Variant: button.VariantSecondary,
						Attributes: templ.Attributes{
							"form":    "compact-supervisor-form",
							"onclick": "return validateSupervisorForm()",
						},
					}) {
						if props.FormVariant == "en" {
							💾 Confirm and Submit
						} else {
							💾 Patvirtinti ir pateikti
						}
					}
				}
			</div>
		}
	}
	<script>
		// Wait for the modal to be fully loaded, then open it
		(function() {
            requestAnimationFrame(function() {
                requestAnimationFrame(function() {
                    const modal = document.getElementById('supervisor-modal');
                    if (modal) {
						if (window.modalState && window.modalState.openModalId) {
							const existingModal = document.getElementById(window.modalState.openModalId);
							if (existingModal && existingModal !== modal) {
								existingModal.style.display = 'none';
								existingModal.classList.add('opacity-0');
							}
						}

						if (!window.modalState) {
							window.modalState = { openModalId: null };
						}

						window.modalState.openModalId = 'supervisor-modal';
						document.body.style.overflow = 'hidden';
						modal.style.display = 'flex';
						modal.offsetHeight;
						modal.classList.remove('opacity-0', 'hidden');
						modal.classList.add('opacity-100');

						const content = modal.querySelector('[data-modal-content]');
						if (content) {
							content.classList.remove('scale-95', 'opacity-0');
							content.classList.add('scale-100', 'opacity-100');
						}
						setTimeout(function() {
                            const textarea = document.getElementById('supervisor_comments');
                            if (textarea && !textarea.disabled) {
                                updateCharCount(textarea);
                            }
                        }, 200);
					}
				});
			});
		})();

		// Handle form submission
		document.addEventListener('htmx:afterRequest', function(evt) {
			if (evt.detail.successful && evt.target.closest('#compact-supervisor-form')) {
				const modal = document.getElementById('supervisor-modal');
				if (modal && window.modalState) {
					modal.classList.remove('opacity-100');
					modal.classList.add('opacity-0');
					const content = modal.querySelector('[data-modal-content]');
					if (content) {
						content.classList.remove('scale-100', 'opacity-100');
						content.classList.add('scale-95', 'opacity-0');
					}
					setTimeout(() => {
						modal.style.display = 'none';
						window.modalState.openModalId = null;
						document.body.style.overflow = '';
					}, 300);
				}

				htmx.ajax('GET', '/students-list', {
					target: '#student-table-container',
					values: htmx.values('#filters-form')
				});
			}
		});

        function updateCharCount(textarea) {
            const charCount = document.getElementById('char-count');
            if (charCount) {
                const length = textarea.value.length;
                charCount.textContent = length;

                if (length < 50) {
                    charCount.style.color = 'red';
                } else {
                    charCount.style.color = 'green';
                }
            }
        }

        function validateSupervisorForm() {
            const form = document.getElementById('compact-supervisor-form');
            const comments = form.querySelector('#supervisor_comments').value.trim();
            const workplace = form.querySelector('#supervisor_workplace').value.trim();
            const position = form.querySelector('#supervisor_position').value.trim();

            if (!comments || !workplace || !position) {
                alert('Please fill in all required fields');
                return false;
            }

            if (comments.length < 50) {
                alert('Supervisor comments must be at least 50 characters long. Current length: ' + comments.length);
                return false;
            }

            return true;
        }
	</script>
}