// supervisor_report.templ
package templates

import "fmt"
import "time"
import "FinalProjectManagementApp/database"

templ SupervisorReportForm(props SupervisorReportFormProps, formData *SupervisorReportFormData) {
	<div class="supervisor-report-container">
		<button
			class="inline-flex items-center px-3 py-2 border border-transparent text-xs font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
			hx-get={ fmt.Sprintf("/supervisor-report/%d/modal", props.StudentRecord.ID) }
			hx-target="#modal-container"
			hx-swap="innerHTML"
			hx-indicator="#loading-indicator"
		>
			<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
			</svg>
			{ props.ButtonLabel }
			<div id="loading-indicator" class="htmx-indicator ml-2">
				<svg class="animate-spin h-3 w-3 text-white" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
			</div>
		</button>

		<!-- Status indicators -->
		<div class="mt-2 space-y-1">
			if props.InitialReport != nil {
				<div class="flex items-center space-x-2 text-xs">
					<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
						{ getReportStatusText(props.FormVariant, "exists") }
					</span>
					if props.InitialReport.IsSigned {
						<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
							{ getReportStatusText(props.FormVariant, "signed") }
						</span>
					} else {
						<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
							{ getReportStatusText(props.FormVariant, "unsigned") }
						</span>
					}
				</div>
			} else {
				<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
					{ getReportStatusText(props.FormVariant, "missing") }
				</span>
			}
		</div>

		<div id="modal-container"></div>
	</div>
}

templ SupervisorReportModal(props SupervisorReportFormProps, formData *SupervisorReportFormData) {
	<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50"
		 onclick="document.getElementById('modal-container').innerHTML = ''"
		 id="supervisor-report-modal">
		<div class="relative top-4 mx-auto p-5 border w-11/12 max-w-6xl shadow-lg rounded-md bg-white dark:bg-gray-800 max-h-[95vh] overflow-y-auto"
			 onclick="event.stopPropagation()">

			<!-- Header -->
			<div class="flex items-center justify-between border-b border-gray-200 dark:border-gray-700 pb-4 mb-6 sticky top-0 bg-white dark:bg-gray-800 z-10">
				<div>
					<h3 class="text-lg font-semibold leading-6 text-gray-900 dark:text-white">
						if props.FormVariant == "en" {
							Final Thesis Supervisor's Review Form
						} else {
							Baigiamojo darbo vadovo atsiliepimo pildymas
						}
					</h3>
					<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
						{ props.StudentRecord.GetFullName() } - { props.StudentRecord.StudentGroup }
					</p>
				</div>
				<button
					onclick="document.getElementById('modal-container').innerHTML = ''"
					class="ml-auto flex-shrink-0 text-gray-500 hover:bg-red-100 dark:hover:bg-red-900/50 hover:text-red-700 dark:hover:text-red-400 focus:ring-2 focus:ring-red-500 rounded-sm p-2"
					aria-label="Close modal"
				>
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>

			<!-- Form Content -->
			<form
				hx-post={ fmt.Sprintf("/supervisor-report/%d/submit", props.StudentRecord.ID) }
				hx-target="#modal-container"
				hx-swap="innerHTML"
				hx-indicator="#saving-indicator"
				class="text-sm text-gray-900 dark:text-gray-100 space-y-6"
				autocomplete="off"
			>
				<!-- CSRF Token (if you're using CSRF protection) -->
				<!-- <input type="hidden" name="csrf_token" value={ getCSRFToken() } /> -->

				@FormHeader(props)
				@StudentInfoSection(props)
				@FeedbackTextSection(props, formData)
				@DefenseEligibilitySection(props, formData)
				@PlagiarismPercentagesSection(props, formData)
				@SupervisorDetailsSection(props, formData)
				@FormActions(props)
			</form>
		</div>
	</div>
}

templ FormHeader(props SupervisorReportFormProps) {
	<div class="text-right text-xs mb-8 text-gray-600 dark:text-gray-400 border-b border-gray-200 dark:border-gray-600 pb-4">
		<p>
			if props.FormVariant == "en" {
				Vilnius Kolegija Final Thesis (Projects)
			} else {
				Vilniaus kolegijos baigiamųjų darbų (projektų)
			}
		</p>
		<p>
			if props.FormVariant == "en" {
				preparation and defense procedure description
			} else {
				rengimo ir gynimo tvarkos aprašo
			}
		</p>
		<p class="font-semibold text-gray-800 dark:text-gray-200">
			if props.FormVariant == "en" {
				appendix 4
			} else {
				4 priedas
			}
		</p>
	</div>

	<div class="text-center uppercase font-semibold mb-8 space-y-1 text-gray-800 dark:text-gray-200">
		<p class="text-lg">
			if props.FormVariant == "en" {
				Vilnius kolegija
			} else {
				Vilniaus kolegijos
			}
		</p>
		<p>
			if props.FormVariant == "en" {
				Faculty of Electronics and Informatics
			} else {
				Elektronikos ir informatikos fakultetas
			}
		</p>
		<p>{ props.StudentRecord.Department }
			if props.FormVariant == "en" {
				DEPARTMENT
			} else {
				KATEDRA
			}
		</p>
	</div>

	<div class="text-center uppercase font-semibold mb-8">
		<p class="text-xl text-gray-900 dark:text-white">
			if props.FormVariant == "en" {
				Final Thesis Supervisor's Review
			} else {
				Baigiamojo darbo vadovo atsiliepimas
			}
		</p>
	</div>
}

templ StudentInfoSection(props SupervisorReportFormProps) {
	<div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6 mb-6 border border-gray-200 dark:border-gray-600">
		<h4 class="font-semibold text-gray-900 dark:text-white mb-4">
			if props.FormVariant == "en" {
				Student Information
			} else {
				Studento informacija
			}
		</h4>

		<div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
			<div>
				<label class="text-gray-600 dark:text-gray-400">
					if props.FormVariant == "en" {
						Study Program:
					} else {
						Studijų programa:
					}
				</label>
				<p class="font-medium text-gray-900 dark:text-white">
					„{ props.StudentRecord.StudyProgram }",
					if props.FormVariant == "en" {
						code
					} else {
						kodas
					}
					{ props.StudentRecord.ProgramCode }
				</p>
			</div>

			<div>
				<label class="text-gray-600 dark:text-gray-400">
					if props.FormVariant == "en" {
						Student:
					} else {
						Studentas (-ė):
					}
				</label>
				<p class="font-medium text-gray-900 dark:text-white">{ props.StudentRecord.GetDisplayName(props.FormVariant) }</p>
				<p class="text-xs text-gray-500 dark:text-gray-400">{ props.StudentRecord.StudentEmail }</p>
			</div>

			<div>
				<label class="text-gray-600 dark:text-gray-400">
					if props.FormVariant == "en" {
						Group:
					} else {
						Grupė:
					}
				</label>
				<p class="font-medium text-gray-900 dark:text-white">{ props.StudentRecord.StudentGroup }</p>
			</div>

			<div>
				<label class="text-gray-600 dark:text-gray-400">
					if props.FormVariant == "en" {
						Student Number:
					} else {
						Studento numeris:
					}
				</label>
				<p class="font-medium text-gray-900 dark:text-white">{ props.StudentRecord.StudentNumber }</p>
			</div>
		</div>

		<div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
			<label class="text-gray-600 dark:text-gray-400">
				if props.FormVariant == "en" {
					Final Thesis Topic:
				} else {
					Baigiamojo darbo tema:
				}
			</label>
			<p class="font-bold text-gray-900 dark:text-white text-base leading-relaxed">
				{ props.StudentRecord.GetLocalizedTitle(props.FormVariant) }
			</p>
		</div>
	</div>
}

templ FeedbackTextSection(props SupervisorReportFormProps, formData *SupervisorReportFormData) {
	<div class="space-y-3">
		<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
			if props.FormVariant == "en" {
				Supervisor's Feedback Text
			} else {
				Vadovo atsiliepimo tekstas
			}
			<span class="text-red-500">*</span>
		</label>

		if props.ValidationErrors["supervisor_comments"] != "" {
			<p class="text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 p-2 rounded">
				{ props.ValidationErrors["supervisor_comments"] }
			</p>
		}

		<textarea
			name="supervisor_comments"
			rows="8"
			class="mt-1 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 text-sm"
			placeholder={ getPlaceholder(props.FormVariant, "feedback") }
			required
			minlength="50"
		>{ formData.SupervisorComments }</textarea>

		<div class="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
			<span>
				if props.FormVariant == "en" {
					Minimum 50 characters required
				} else {
					Reikalingi mažiausiai 50 simboliai
				}
			</span>
			<span id="comment-counter">{ fmt.Sprintf("%d", len(formData.SupervisorComments)) }</span>
		</div>
	</div>
}

templ DefenseEligibilitySection(props SupervisorReportFormProps, formData *SupervisorReportFormData) {
	<div class="space-y-4 border-t border-gray-200 dark:border-gray-600 pt-6">
		<h4 class="font-semibold text-gray-900 dark:text-white text-base">
			if props.FormVariant == "en" {
				Defense Eligibility Assessment
			} else {
				Tinkamumo gynimui vertinimas
			}
		</h4>

		<div class="space-y-3">
			<label class="flex items-start space-x-3 p-4 border-2 border-green-200 dark:border-green-700 rounded-lg hover:bg-green-50 dark:hover:bg-green-900/20 cursor-pointer transition-colors">
				<input
					type="radio"
					name="is_pass_or_failed"
					value="true"
					checked?={ formData.IsPassOrFailed }
					class="mt-1 h-4 w-4 text-green-600 border-gray-300 focus:ring-green-500"
				/>
				<div class="text-sm">
					<div class="font-medium text-gray-900 dark:text-white mb-1">
						<svg class="inline w-4 h-4 mr-1 text-green-600" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
						</svg>
						if props.FormVariant == "en" {
							Suitable for Defense
						} else {
							Tinkamas ginti
						}
					</div>
					<div class="text-gray-600 dark:text-gray-400">
						if props.FormVariant == "en" {
							The thesis is suitable for defense at the Final Thesis Defense Committee meeting.
						} else {
							Baigiamasis darbas tinkamas ginti Baigiamųjų darbų gynimo komisijos posėdyje.
						}
					</div>
				</div>
			</label>

			<label class="flex items-start space-x-3 p-4 border-2 border-red-200 dark:border-red-700 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 cursor-pointer transition-colors">
				<input
					type="radio"
					name="is_pass_or_failed"
					value="false"
					checked?={ !formData.IsPassOrFailed }
					class="mt-1 h-4 w-4 text-red-600 border-gray-300 focus:ring-red-500"
				/>
				<div class="text-sm">
					<div class="font-medium text-gray-900 dark:text-white mb-1">
						<svg class="inline w-4 h-4 mr-1 text-red-600" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
						</svg>
						if props.FormVariant == "en" {
							Not Suitable for Defense
						} else {
							Netinkamas ginti
						}
					</div>
					<div class="text-gray-600 dark:text-gray-400">
						if props.FormVariant == "en" {
							The thesis is not suitable for defense due to plagiarism detection.
						} else {
							Baigiamasis darbas netinkamas ginti dėl plagiato fakto nustatymo.
						}
					</div>
				</div>
			</label>
		</div>
	</div>
}

templ PlagiarismPercentagesSection(props SupervisorReportFormProps, formData *SupervisorReportFormData) {
	<div class="space-y-4 border-t border-gray-200 dark:border-gray-600 pt-6">
		<h4 class="font-semibold text-gray-900 dark:text-white text-base">
			if props.FormVariant == "en" {
				Plagiarism Analysis Results
			} else {
				Plagiato analizės rezultatai
			}
		</h4>

		<!-- Total Match Percentage -->
		<div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800">
			<div class="flex items-center space-x-2 text-sm mb-2">
				<span class="text-gray-700 dark:text-gray-300 font-medium">
					if props.FormVariant == "en" {
						Total identified match with other works:
					} else {
						Bendra nustatyta sutaptis su kitais darbais:
					}
				</span>
			</div>
			<div class="flex items-center space-x-2">
				<input
					type="number"
					name="other_match"
					step="0.1"
					min="0"
					max="100"
					value={ fmt.Sprintf("%.1f", formData.OtherMatch) }
					class="w-24 px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md text-center focus:ring-blue-500 focus:border-blue-500"
					placeholder="0.0"
					required
					oninput="updateTotalSimilarity()"
				/>
				<span class="text-gray-700 dark:text-gray-300">
					if props.FormVariant == "en" {
						percent of the entire work, breakdown:
					} else {
						procentų viso darbo, iš jų:
					}
				</span>
			</div>

			if props.ValidationErrors["other_match"] != "" {
				<p class="text-sm text-red-600 dark:text-red-400 mt-2">{ props.ValidationErrors["other_match"] }</p>
			}
		</div>

		<!-- Detailed Breakdown -->
		<div class="grid grid-cols-1 gap-3 pl-4">
			@PlagiarismField(props, "one_match", "sutaptis su vienu šaltiniu", "match with one source", formData.OneMatch)
			@PlagiarismField(props, "own_match", "sutaptis su kitais to paties studento studijų rašto darbais", "match with other written works of the same student", formData.OwnMatch)
			@PlagiarismField(props, "join_match", "sutaptis su kitų studentų to paties jungtinio darbo autorių darbais", "match with works of other students who are authors of the same joint work", formData.JoinMatch)
		</div>

		<!-- Total Display and Assessment -->
		<div class="bg-gray-100 dark:bg-gray-700 rounded-lg p-4 border border-gray-200 dark:border-gray-600">
			<div class="flex justify-between items-center mb-2">
				<span class="font-medium text-gray-700 dark:text-gray-300">
					if props.FormVariant == "en" {
						Total Similarity:
					} else {
						Bendras panašumas:
					}
				</span>
				<span class="font-bold text-xl" id="total-similarity" data-similarity={ fmt.Sprintf("%.1f", formData.GetTotalSimilarity()) }>
					{ fmt.Sprintf("%.1f%%", formData.GetTotalSimilarity()) }
				</span>
			</div>
			<div class="flex justify-between items-center">
				<span class="text-sm text-gray-600 dark:text-gray-400">
					if props.FormVariant == "en" {
						Assessment:
					} else {
						Vertinimas:
					}
				</span>
				<span class={ "text-sm font-medium " + formData.GetSimilarityColor() } id="similarity-status">
					{ getSimilarityStatusText(props.FormVariant, formData.GetSimilarityStatus()) }
				</span>
			</div>
		</div>
	</div>
}

templ PlagiarismField(props SupervisorReportFormProps, fieldName, ltLabel, enLabel string, value float64) {
	<div class="flex items-center space-x-3 text-sm bg-white dark:bg-gray-800 p-3 rounded-md border border-gray-200 dark:border-gray-600">
		<span class="flex-1 text-gray-700 dark:text-gray-300">
			if props.FormVariant == "en" {
				{ enLabel }
			} else {
				{ ltLabel }
			}
		</span>
		<input
			type="number"
			name={ fieldName }
			step="0.1"
			min="0"
			max="100"
			value={ fmt.Sprintf("%.1f", value) }
			class="w-20 px-2 py-1 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded text-center focus:ring-blue-500 focus:border-blue-500"
			placeholder="0.0"
			required
			oninput="updateTotalSimilarity()"
		/>
		<span class="text-gray-700 dark:text-gray-300 w-16">
			if props.FormVariant == "en" {
				percent
			} else {
				proc.
			}
		</span>
	</div>
}

templ SupervisorDetailsSection(props SupervisorReportFormProps, formData *SupervisorReportFormData) {
	<div class="space-y-6 border-t border-gray-200 dark:border-gray-600 pt-6">
		<h4 class="font-semibold text-gray-900 dark:text-white text-base">
			if props.FormVariant == "en" {
				Supervisor Information
			} else {
				Vadovo informacija
			}
		</h4>

		<!-- Supervisor Identity Display -->
		<div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600">
			<div class="flex flex-col sm:flex-row sm:items-end sm:justify-between sm:space-x-4">
				<div class="mb-2 sm:mb-0">
					<p class="text-gray-700 dark:text-gray-300 text-sm">
						if props.FormVariant == "en" {
							Final Thesis Supervisor:
						} else {
							Baigiamojo darbo vadovas (-ė):
						}
					</p>
				</div>
				<div class="text-left sm:text-right">
					<p class="font-medium text-gray-900 dark:text-white">
						{ props.CurrentSupervisorName }
					</p>
					<p class="text-xs text-gray-500 dark:text-gray-400">
						{ props.CurrentSupervisorEmail }
					</p>
					<div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
						<p>
							if props.FormVariant == "en" {
								(first name, last name, signature)
							} else {
								(vardas, pavardė, parašas)
							}
						</p>
					</div>
				</div>
			</div>
		</div>

		<!-- Workplace and Position -->
		<div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
					if props.FormVariant == "en" {
						Workplace
					} else {
						Darbovietė
					}
					<span class="text-red-500">*</span>
				</label>

				if props.ValidationErrors["supervisor_workplace"] != "" {
					<p class="text-sm text-red-600 dark:text-red-400 mb-1">{ props.ValidationErrors["supervisor_workplace"] }</p>
				}

				<input
					type="text"
					name="supervisor_workplace"
					value={ formData.SupervisorWorkplace }
					placeholder={ getPlaceholder(props.FormVariant, "workplace") }
					class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
					required
					minlength="2"
				/>
			</div>

			<div>
				<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
					if props.FormVariant == "en" {
						Position
					} else {
						Pareigos
					}
					<span class="text-red-500">*</span>
				</label>

				if props.ValidationErrors["supervisor_position"] != "" {
					<p class="text-sm text-red-600 dark:text-red-400 mb-1">{ props.ValidationErrors["supervisor_position"] }</p>
				}

				<input
					type="text"
					name="supervisor_position"
					value={ formData.SupervisorPosition }
					placeholder={ getPlaceholder(props.FormVariant, "position") }
					class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
					required
					minlength="2"
				/>
			</div>
		</div>

		<!-- Optional Grade Section -->
		<div class="border border-gray-200 dark:border-gray-600 rounded-lg p-4">
			<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
				if props.FormVariant == "en" {
					Preliminary Grade (Optional)
				} else {
					Preliminarus įvertinimas (neprivalomas)
				}
			</label>
			<select
				name="grade"
				class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
			>
				<option value="">
					if props.FormVariant == "en" {
						No grade assigned
					} else {
						Įvertinimas nepriskirtas
					}
				</option>
				for i := 10; i >= 1; i-- {
					<option value={ fmt.Sprintf("%d", i) } selected?={ formData.Grade != nil && *formData.Grade == i }>
						{ fmt.Sprintf("%d - %s", i, getGradeText(props.FormVariant, i)) }
					</option>
				}
			</select>
			<p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
				if props.FormVariant == "en" {
					This grade is preliminary and for internal use only
				} else {
					Šis įvertinimas yra preliminarus ir skirtas tik vidiniam naudojimui
				}
			</p>
		</div>

		<!-- Additional Comments -->
		<div>
			<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
				if props.FormVariant == "en" {
					Additional Comments (Optional)
				} else {
					Papildomi komentarai (neprivalomi)
				}
			</label>
			<textarea
				name="final_comments"
				rows="3"
				class="block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
				placeholder={ getPlaceholder(props.FormVariant, "additional_comments") }
			>{ formData.FinalComments }</textarea>
		</div>

		<!-- Submission Date Display -->
		<div class="text-center bg-gray-100 dark:bg-gray-700 rounded-lg p-3 border border-gray-200 dark:border-gray-600">
			<p class="font-medium text-gray-900 dark:text-white">{ time.Now().Format("2006-01-02") }</p>
			<p class="text-xs text-gray-500 dark:text-gray-400">
				if props.FormVariant == "en" {
					(submission date)
				} else {
					(pateikimo data)
				}
			</p>
		</div>
	</div>
}

templ FormActions(props SupervisorReportFormProps) {
	<div class="flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-3 pt-6 border-t border-gray-200 dark:border-gray-600 sticky bottom-0 bg-white dark:bg-gray-800 pb-2">
		<button
			type="button"
			onclick="document.getElementById('modal-container').innerHTML = ''"
			class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
		>
			<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
			</svg>
			if props.FormVariant == "en" {
				Cancel
			} else {
				Atšaukti
			}
		</button>

		<button
			type="submit"
			class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 disabled:opacity-50"
		>
			<div id="saving-indicator" class="htmx-indicator mr-2">
				<svg class="animate-spin h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
			</div>
			<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
			if props.FormVariant == "en" {
				Save and Submit Report
			} else {
				Išsaugoti ir pateikti atsiliepimą
			}
		</button>
	</div>
}

// Helper functions
func getPlaceholder(variant, field string) string {
	if variant == "en" {
		switch field {
		case "feedback":
			return "Describe the author's independence, initiative, consistency in thesis preparation, theoretical background quality, practical implementation, adherence to requirements, writing quality, and overall assessment..."
		case "workplace":
			return "Enter your workplace..."
		case "position":
			return "Enter your position/duties"
		case "additional_comments":
			return "Any additional observations, recommendations, or notes..."
		default:
			return ""
		}
	} else {
		switch field {
		case "feedback":
			return "Aprašykite baigiamojo darbo autoriaus savarankiškumą, iniciatyvą, darbo rengimo nuoseklumą, teorinio pagrindo kokybę, praktinio įgyvendinimo lygį, reikalavimų laikymąsi, rašymo kokybę ir bendrą vertinimą..."
		case "workplace":
			return "Įrašykite darbovietę..."
		case "position":
			return "Nurodykite savo pareigas..."
		case "additional_comments":
			return "Papildomi pastebėjimai, rekomendacijos ar komentarai..."
		default:
			return ""
		}
	}
}

func getReportStatusText(variant, status string) string {
	if variant == "en" {
		switch status {
		case "exists":
			return "Report exists"
		case "signed":
			return "Signed"
		case "unsigned":
			return "Pending signature"
		case "missing":
			return "Report missing"
		default:
			return "Unknown"
		}
	} else {
		switch status {
		case "exists":
			return "Atsiliepimas egzistuoja"
		case "signed":
			return "Pasirašytas"
		case "unsigned":
			return "Laukia parašo"
		case "missing":
			return "Atsiliepimas trūksta"
		default:
			return "Nežinoma"
		}
	}
}

func getSimilarityStatusText(variant, status string) string {
	if variant == "en" {
		switch status {
		case "Low":
			return "Low similarity"
		case "Moderate":
			return "Moderate similarity"
		case "High":
			return "High similarity"
		default:
			return "Unknown"
		}
	} else {
		switch status {
		case "Low":
			return "Žemas panašumas"
		case "Moderate":
			return "Vidutinis panašumas"
		case "High":
			return "Aukštas panašumas"
		default:
			return "Nežinoma"
		}
	}
}

func getGradeText(variant string, grade int) string {
	if variant == "en" {
		return database.GetGradeText(grade)
	} else {
		switch grade {
		case 10:
			return "Puikiai"
		case 9:
			return "Labai gerai"
		case 8:
			return "Gerai"
		case 7:
			return "Patenkinamai"
		case 6:
			return "Silpnai"
		case 5:
			return "Blogai"
		default:
			return "Nežinoma"
		}
	}
}