// templates/import_preview.templ
package templates

import (
    "fmt"
    "FinalProjectManagementApp/components/icon"
)

templ ImportPreview(records []map[string]string, totalRecords int) {
    <div class="space-y-3">
        <div class="text-sm text-gray-600">
            Rasta { fmt.Sprintf("%d", totalRecords) } įrašų.
            if totalRecords > 10 {
                <span class="text-xs text-gray-500">(Rodomi visi įrašai su slinkties galimybe)</span>
            }
        </div>

        // Add a horizontally and vertically scrollable container
        <div class="overflow-auto max-h-96 border border-gray-200 rounded">
            <table class="text-xs">
                <thead class="bg-gray-50 sticky top-0 z-10">
                    <tr>
                        <th class="border px-2 py-1 text-left whitespace-nowrap sticky left-0 bg-gray-50">#</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Vardas</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Pavardė</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Studento numeris</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Studento el. paštas</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Grupė</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Baigiamojo darbo tema</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Tema (EN)</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Vadovo el. paštas</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Studijų programa</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Katedra</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Programos kodas</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Metai</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Recenzento el. paštas</th>
                        <th class="border px-2 py-1 whitespace-nowrap">Recenzentas</th>
                    </tr>
                </thead>
                <tbody>
                    for i, record := range records {
                        <tr class={ templ.KV("bg-gray-50", i%2 == 0) }>
                            if i%2 == 0 {
                                <td class="border px-2 py-1 text-center text-gray-500 sticky left-0 bg-gray-50">
                                    { fmt.Sprintf("%d", i+1) }
                                </td>
                            } else {
                                <td class="border px-2 py-1 text-center text-gray-500 sticky left-0 bg-white">
                                    { fmt.Sprintf("%d", i+1) }
                                </td>
                            }
                            <td class="border px-2 py-1 whitespace-nowrap">
                                { getValueOrDash(record["StudentName"]) }
                            </td>
                            <td class="border px-2 py-1 whitespace-nowrap">
                                { getValueOrDash(record["StudentLastname"]) }
                            </td>
                            <td class="border px-2 py-1 whitespace-nowrap font-mono text-xs">
                                { getValueOrDash(record["StudentNumber"]) }
                            </td>
                            <td class="border px-2 py-1 whitespace-nowrap">
                                <div class="max-w-xs truncate" title={ record["StudentEmail"] }>
                                    { getValueOrDash(record["StudentEmail"]) }
                                </div>
                            </td>
                            <td class="border px-2 py-1 text-center font-medium">
                                { getValueOrDash(record["StudentGroup"]) }
                            </td>
                            <td class="border px-2 py-1">
                                <div class="max-w-sm truncate" title={ record["FinalProjectTitle"] }>
                                    { getValueOrDash(record["FinalProjectTitle"]) }
                                </div>
                            </td>
                            <td class="border px-2 py-1">
                                <div class="max-w-sm truncate" title={ record["FinalProjectTitleEn"] }>
                                    { getValueOrDash(record["FinalProjectTitleEn"]) }
                                </div>
                            </td>
                            <td class="border px-2 py-1 whitespace-nowrap">
                                <div class="max-w-xs truncate" title={ record["SupervisorEmail"] }>
                                    { getValueOrDash(record["SupervisorEmail"]) }
                                </div>
                            </td>
                            <td class="border px-2 py-1 whitespace-nowrap">
                                { getValueOrDash(record["StudyProgram"]) }
                            </td>
                            <td class="border px-2 py-1 whitespace-nowrap">
                                { getValueOrDash(record["Department"]) }
                            </td>
                            <td class="border px-2 py-1 text-center font-mono text-xs">
                                { getValueOrDash(record["ProgramCode"]) }
                            </td>
                            <td class="border px-2 py-1 text-center">
                                { getValueOrDash(record["CurrentYear"]) }
                            </td>
                            <td class="border px-2 py-1 whitespace-nowrap">
                                <div class="max-w-xs truncate" title={ record["ReviewerEmail"] }>
                                    { getValueOrDash(record["ReviewerEmail"]) }
                                </div>
                            </td>
                            <td class="border px-2 py-1 whitespace-nowrap">
                                { getValueOrDash(record["ReviewerName"]) }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        // Show data validation summary
        <div class="grid grid-cols-4 gap-3 text-sm">
            <div class="bg-blue-50 border border-blue-200 rounded p-3">
                <div class="font-medium text-blue-800 text-xs">Iš viso studentų</div>
                <div class="text-2xl font-bold text-blue-600">{ fmt.Sprintf("%d", totalRecords) }</div>
            </div>
            <div class="bg-green-50 border border-green-200 rounded p-3">
                <div class="font-medium text-green-800 text-xs">Su EN tema</div>
                <div class="text-2xl font-bold text-green-600">{ fmt.Sprintf("%d", countNonEmpty(records, "FinalProjectTitleEn")) }</div>
            </div>
            <div class="bg-yellow-50 border border-yellow-200 rounded p-3">
                <div class="font-medium text-yellow-800 text-xs">Su recenzentu</div>
                <div class="text-2xl font-bold text-yellow-600">{ fmt.Sprintf("%d", countNonEmpty(records, "ReviewerEmail")) }</div>
            </div>
            <div class="bg-purple-50 border border-purple-200 rounded p-3">
                <div class="font-medium text-purple-800 text-xs">Su katedra</div>
                <div class="text-2xl font-bold text-purple-600">{ fmt.Sprintf("%d", countNonEmpty(records, "Department")) }</div>
            </div>
        </div>

        // Show missing data warnings if any
        if hasMissingRequiredFields(records) {
            <div class="bg-red-50 border border-red-200 rounded p-3">
                <div class="flex items-start gap-2">
                    @icon.TriangleAlert(icon.Props{Size: 16, Class: "text-red-600 mt-0.5"})
                    <div class="text-sm text-red-800">
                        <div class="font-medium mb-1">Aptikti trūkstami privalomi laukai:</div>
                        <ul class="list-disc list-inside text-xs space-y-1">
                            if countEmpty(records, "StudentName") > 0 {
                                <li>{ fmt.Sprintf("%d įrašų be vardo", countEmpty(records, "StudentName")) }</li>
                            }
                            if countEmpty(records, "StudentLastname") > 0 {
                                <li>{ fmt.Sprintf("%d įrašų be pavardės", countEmpty(records, "StudentLastname")) }</li>
                            }
                            if countEmpty(records, "StudentNumber") > 0 {
                                <li>{ fmt.Sprintf("%d įrašų be studento numerio", countEmpty(records, "StudentNumber")) }</li>
                            }
                            if countEmpty(records, "StudentEmail") > 0 {
                                <li>{ fmt.Sprintf("%d įrašų be el. pašto", countEmpty(records, "StudentEmail")) }</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }

        // Show info about horizontal scrolling
        <div class="bg-gray-50 border border-gray-200 rounded p-2 text-xs text-gray-600">
            <div class="flex items-center gap-1">
                @icon.Info(icon.Props{Size: 14})
                <span>Naudokite horizontalią slinkties juostą, kad pamatytumėte visus stulpelius</span>
            </div>
        </div>
    </div>
}

// Helper functions
func getValueOrDash(value string) string {
    if value == "" {
        return "-"
    }
    return value
}

func countNonEmpty(records []map[string]string, field string) int {
    count := 0
    for _, record := range records {
        if record[field] != "" {
            count++
        }
    }
    return count
}

func countEmpty(records []map[string]string, field string) int {
    count := 0
    for _, record := range records {
        if record[field] == "" {
            count++
        }
    }
    return count
}

func hasMissingRequiredFields(records []map[string]string) bool {
    requiredFields := []string{"StudentName", "StudentLastname", "StudentNumber", "StudentEmail"}
    for _, record := range records {
        for _, field := range requiredFields {
            if record[field] == "" {
                return true
            }
        }
    }
    return false
}