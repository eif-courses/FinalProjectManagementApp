package templates

import (
    "FinalProjectManagementApp/auth"
    "FinalProjectManagementApp/components/button"
)

templ Navbar(user *auth.AuthenticatedUser, currentLocale string) {
    <nav class="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50">
        <div class="container mx-auto px-4">
            <div class="flex items-center justify-between h-16">
                <!-- Logo and Title -->
                <div class="flex items-center space-x-3">
                    <img src="/static/images/viko-logo.png" alt="VIK Logo" class="h-8 w-auto"/>
                    <span class="hidden md:block text-lg font-semibold text-foreground">
                        Baigiamųjų darbų talpykla
                    </span>
                </div>

                <!-- Desktop Navigation -->
                <div class="hidden md:flex items-center space-x-1">
                    @RoleBasedNavigation(user)
                    @LanguageDropdown(currentLocale)
                    @UserDropdown(user)
                </div>

                <!-- Mobile menu button -->
                <div class="md:hidden">
                    @button.Button(button.Props{
                        Variant: button.VariantGhost,
                        Size: button.SizeIcon,
                        Class: "p-2",
                        Attributes: templ.Attributes{
                            "onclick": "toggleMobileMenu()",
                            "aria-label": "Toggle menu",
                        },
                    }) {
                        <svg id="menu-icon" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
                        </svg>
                        <svg id="close-icon" class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    }
                </div>
            </div>

            <!-- Mobile Navigation Menu -->
            @MobileNavigation(user, currentLocale)
        </div>
    </nav>
}

templ RoleBasedNavigation(user *auth.AuthenticatedUser) {
    if user.Role == "admin" {
        @NavLink("/admin", "⚙️", "Administratoriui")
    }

    if user.Role == "department_head" || user.Role == "admin" {
        @NavLink("/department", "🏢", "Vedėjui")
    }

    @NavLink("/reviews", "📝", "Recenzentui")
    @NavLink("/manage", "👥", "Vadovui")

    if user.Role == "admin" || user.Role == "department_head" || user.Role == "supervisor" {
        @NavLink("/students-list", "👥", "Studentų sąrašas")
    }
}

templ NavLink(href string, icon string, text string) {
    <a href={ templ.SafeURL(href) } class="inline-flex items-center px-3 py-2 text-sm font-medium text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors">
        <span class="mr-2">{ icon }</span>
        <span>{ text }</span>
    </a>
}

templ LanguageDropdown(currentLocale string) {
    <div class="relative">
        @button.Button(button.Props{
            Variant: button.VariantGhost,
            Class: "inline-flex items-center",
            Attributes: templ.Attributes{
                "onclick": "toggleDropdown('language-dropdown')",
            },
        }) {
            <span class="mr-2">🌐</span>
            <span>{ getLanguageName(currentLocale) }</span>
            <svg class="ml-1 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
        }

        <div id="language-dropdown" class="hidden absolute right-0 mt-2 w-48 bg-popover text-popover-foreground rounded-md shadow-lg border py-1 z-50">
            <a href="?locale=lt" class={ getLocaleClass(currentLocale, "lt") }>
                Lietuvių
            </a>
            <a href="?locale=en" class={ getLocaleClass(currentLocale, "en") }>
                English
            </a>
        </div>
    </div>
}

templ UserDropdown(user *auth.AuthenticatedUser) {
    <div class="relative ml-3">
        @button.Button(button.Props{
            Variant: button.VariantGhost,
            Class: "flex items-center",
            Attributes: templ.Attributes{
                "onclick": "toggleDropdown('user-dropdown')",
            },
        }) {
            <div class="flex flex-col items-end mr-3">
                <span class="text-sm font-medium text-foreground">{ user.Email }</span>
                <span class="text-xs text-muted-foreground">{ user.JobTitle }</span>
            </div>
            <div class="h-8 w-8 bg-muted rounded-full flex items-center justify-center">
                <span class="text-sm font-medium text-muted-foreground">
                    { string(user.Name[0]) }
                </span>
            </div>
            <svg class="ml-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
            </svg>
        }

        <div id="user-dropdown" class="hidden absolute right-0 mt-2 w-56 bg-popover text-popover-foreground rounded-md shadow-lg border py-1 z-50">
            <a href="/profile" class="flex items-center px-4 py-2 text-sm hover:bg-accent hover:text-accent-foreground transition-colors">
                <span class="mr-3">👤</span>
                <span>Profile</span>
            </a>
            <a href="/settings" class="flex items-center px-4 py-2 text-sm hover:bg-accent hover:text-accent-foreground transition-colors">
                <span class="mr-3">⚙️</span>
                <span>Settings</span>
            </a>
            <div class="border-t border-border my-1"></div>
            <a href="/auth/logout" class="flex items-center px-4 py-2 text-sm text-destructive hover:bg-destructive/10 transition-colors">
                <span class="mr-3">🚪</span>
                <span>Atsijungti</span>
            </a>
        </div>
    </div>
}

templ MobileNavigation(user *auth.AuthenticatedUser, currentLocale string) {
    <div id="mobile-menu" class="hidden md:hidden border-t border-border py-3">
        <div class="space-y-1">
            @MobileRoleBasedNav(user)
            @MobileLanguageSelector(currentLocale)
            @MobileUserInfo(user)
        </div>
    </div>
}

templ MobileRoleBasedNav(user *auth.AuthenticatedUser) {
    if user.Role == "admin" {
        @MobileNavLink("/admin", "⚙️", "Administratoriui")
    }
    if user.Role == "department_head" || user.Role == "admin" {
        @MobileNavLink("/department", "🏢", "Vedėjui")
    }
    @MobileNavLink("/reviews", "📝", "Recenzentui")
    @MobileNavLink("/manage", "👥", "Vadovui")
    if user.Role == "admin" || user.Role == "department_head" || user.Role == "supervisor" {
        @MobileNavLink("/students-list", "👥", "Studentų sąrašas")
    }
}

templ MobileNavLink(href string, icon string, text string) {
    <a href={ templ.SafeURL(href) } class="flex items-center px-3 py-2 text-sm font-medium text-muted-foreground hover:text-foreground hover:bg-accent rounded-md transition-colors">
        <span class="mr-3">{ icon }</span>
        <span>{ text }</span>
    </a>
}

templ MobileLanguageSelector(currentLocale string) {
    <div class="px-3 py-2">
        <div class="text-xs font-medium text-muted-foreground uppercase tracking-wider mb-2">Kalba</div>
        <div class="space-y-1">
            <a href="?locale=lt" class={ getMobileLocaleClass(currentLocale, "lt") }>
                🇱🇹 Lietuvių
            </a>
            <a href="?locale=en" class={ getMobileLocaleClass(currentLocale, "en") }>
                🇺🇸 English
            </a>
        </div>
    </div>
}

templ MobileUserInfo(user *auth.AuthenticatedUser) {
    <div class="px-3 py-2 border-t border-border mt-3">
        <div class="flex items-center space-x-3 mb-3">
            <div class="h-10 w-10 bg-muted rounded-full flex items-center justify-center">
                <span class="text-sm font-medium text-muted-foreground">
                    { string(user.Name[0]) }
                </span>
            </div>
            <div>
                <div class="text-sm font-medium text-foreground">{ user.Email }</div>
                <div class="text-xs text-muted-foreground">{ user.JobTitle }</div>
            </div>
        </div>
        <div class="space-y-1">
            <a href="/profile" class="flex items-center px-3 py-2 text-sm text-muted-foreground hover:bg-accent rounded-md transition-colors">
                <span class="mr-3">👤</span>
                <span>Profile</span>
            </a>
            <a href="/settings" class="flex items-center px-3 py-2 text-sm text-muted-foreground hover:bg-accent rounded-md transition-colors">
                <span class="mr-3">⚙️</span>
                <span>Settings</span>
            </a>
            <a href="/auth/logout" class="flex items-center px-3 py-2 text-sm text-destructive hover:bg-destructive/10 rounded-md transition-colors">
                <span class="mr-3">🚪</span>
                <span>Atsijungti</span>
            </a>
        </div>
    </div>
}

// Helper functions
func getLanguageName(locale string) string {
    switch locale {
    case "en":
        return "English"
    default:
        return "Lietuvių"
    }
}

func getLocaleClass(currentLocale, targetLocale string) string {
    baseClass := "block px-4 py-2 text-sm hover:bg-accent hover:text-accent-foreground transition-colors"
    if currentLocale == targetLocale {
        return baseClass + " text-primary bg-accent"
    }
    return baseClass + " text-popover-foreground"
}

func getMobileLocaleClass(currentLocale, targetLocale string) string {
    baseClass := "block px-3 py-1 text-sm rounded-md transition-colors"
    if currentLocale == targetLocale {
        return baseClass + " text-primary bg-accent"
    }
    return baseClass + " text-muted-foreground hover:bg-accent"
}