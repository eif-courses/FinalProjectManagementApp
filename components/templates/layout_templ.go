// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "FinalProjectManagementApp/auth"

func Layout(user *auth.AuthenticatedUser, currentLocale string, title string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(currentLocale)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/templates/layout.templ`, Line: 7, Col: 30}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/templates/layout.templ`, Line: 11, Col: 22}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " - Baigiamųjų darbų talpykla</title><link rel=\"stylesheet\" href=\"/assets/css/output.css\"></head><body class=\"bg-background text-foreground min-h-screen\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Navbar(user, currentLocale).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<main class=\"container mx-auto px-4 py-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</main><!-- Add HTMX --><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><script src=\"/static/js/navbar.js\"></script><script src=\"/static/js/repository-preview.js\"></script><!-- Modal System Initialization --><script nonce=\"\">\r\n            if (typeof window.modalState === 'undefined') {\r\n                window.modalState = {\r\n                    openModalId: null\r\n                };\r\n            }\r\n\r\n            (function() { // IIFE\r\n                function closeModal(modal, immediate = false) {\r\n                    if (!modal || modal.style.display === 'none') return;\r\n\r\n                    const content = modal.querySelector('[data-modal-content]');\r\n                    const modalId = modal.id;\r\n\r\n                    // Apply leaving transitions\r\n                    modal.classList.remove('opacity-100');\r\n                    modal.classList.add('opacity-0');\r\n\r\n                    if (content) {\r\n                        content.classList.remove('scale-100', 'opacity-100');\r\n                        content.classList.add('scale-95', 'opacity-0');\r\n                    }\r\n\r\n                    function hideModal() {\r\n                        modal.style.display = 'none';\r\n\r\n                        if (window.modalState.openModalId === modalId) {\r\n                            window.modalState.openModalId = null;\r\n                            document.body.style.overflow = '';\r\n                        }\r\n\r\n                        // Clean up modal container if it exists\r\n                        const modalContainer = document.getElementById('modal-container');\r\n                        if (modalContainer) {\r\n                            modalContainer.innerHTML = '';\r\n                            modalContainer.style.display = 'none';\r\n                            modalContainer.className = '';\r\n                            modalContainer.removeAttribute('style');\r\n                            modalContainer.style.display = 'none';\r\n                        }\r\n                    }\r\n\r\n                    if (immediate) {\r\n                        hideModal();\r\n                    } else {\r\n                        setTimeout(hideModal, 300);\r\n                    }\r\n                }\r\n\r\n                function openModal(modal) {\r\n                    if (!modal) return;\r\n\r\n                    // Close any open modal first\r\n                    if (window.modalState.openModalId) {\r\n                        const openModal = document.getElementById(window.modalState.openModalId);\r\n                        if (openModal && openModal !== modal) {\r\n                            closeModal(openModal, true);\r\n                        }\r\n                    }\r\n\r\n                    const content = modal.querySelector('[data-modal-content]');\r\n\r\n                    // Display and prepare for animation\r\n                    modal.style.display = 'flex';\r\n\r\n                    // Store as currently open modal\r\n                    window.modalState.openModalId = modal.id;\r\n                    document.body.style.overflow = 'hidden';\r\n\r\n                    // Force reflow before adding transition classes\r\n                    void modal.offsetHeight;\r\n\r\n                    // Start animations\r\n                    modal.classList.remove('opacity-0');\r\n                    modal.classList.add('opacity-100');\r\n\r\n                    if (content) {\r\n                        content.classList.remove('scale-95', 'opacity-0');\r\n                        content.classList.add('scale-100', 'opacity-100');\r\n\r\n                        // Focus first focusable element\r\n                        setTimeout(() => {\r\n                            const focusable = content.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\r\n                            if (focusable) focusable.focus();\r\n                        }, 50);\r\n                    }\r\n                }\r\n\r\n                function closeModalById(modalId, immediate = false) {\r\n                    const modal = document.getElementById(modalId);\r\n                    if (modal) closeModal(modal, immediate);\r\n                }\r\n\r\n                function openModalById(modalId) {\r\n                    const modal = document.getElementById(modalId);\r\n                    if (modal) openModal(modal);\r\n                }\r\n\r\n                function handleClickAway(e) {\r\n                    const openModalId = window.modalState.openModalId;\r\n                    if (!openModalId) return;\r\n\r\n                    const modal = document.getElementById(openModalId);\r\n                    if (!modal || modal.getAttribute('data-disable-click-away') === 'true') return;\r\n\r\n                    const content = modal.querySelector('[data-modal-content]');\r\n                    const trigger = e.target.closest('[data-modal-trigger]');\r\n\r\n                    if (content && !content.contains(e.target) &&\r\n                        (!trigger || trigger.getAttribute('data-modal-target-id') !== openModalId)) {\r\n                        closeModal(modal);\r\n                    }\r\n                }\r\n\r\n                function handleEscKey(e) {\r\n                    if (e.key !== 'Escape' || !window.modalState.openModalId) return;\r\n\r\n                    const modal = document.getElementById(window.modalState.openModalId);\r\n                    if (modal && modal.getAttribute('data-disable-esc') !== 'true') {\r\n                        closeModal(modal);\r\n                    }\r\n                }\r\n\r\n                function initTrigger(trigger) {\r\n                    const targetId = trigger.getAttribute('data-modal-target-id');\r\n                    if (!targetId) return;\r\n\r\n                    trigger.addEventListener('click', () => {\r\n                        if (!trigger.hasAttribute('disabled') &&\r\n                            !trigger.classList.contains('opacity-50')) {\r\n                            openModalById(targetId);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function initCloseButton(closeBtn) {\r\n                    closeBtn.addEventListener('click', () => {\r\n                        const targetId = closeBtn.getAttribute('data-modal-target-id');\r\n                        if (targetId) {\r\n                            closeModalById(targetId);\r\n                        } else {\r\n                            const modal = closeBtn.closest('[data-modal]');\r\n                            if (modal && modal.id) {\r\n                                closeModal(modal);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function initAllComponents(root = document) {\r\n                    if (root instanceof Element && root.matches('[data-modal-trigger]')) {\r\n                        initTrigger(root);\r\n                    }\r\n                    for (const trigger of root.querySelectorAll('[data-modal-trigger]')) {\r\n                        initTrigger(trigger);\r\n                    }\r\n\r\n                    if (root instanceof Element && root.matches('[data-modal-close]')) {\r\n                        initCloseButton(root);\r\n                    }\r\n                    for (const closeBtn of root.querySelectorAll('[data-modal-close]')) {\r\n                        initCloseButton(closeBtn);\r\n                    }\r\n                }\r\n\r\n                const handleHtmxSwap = (event) => {\r\n                    const target = event.detail.elt\r\n                    if (target instanceof Element) {\r\n                        requestAnimationFrame(() => initAllComponents(target));\r\n                    }\r\n                };\r\n\r\n                if (typeof window.modalEventsInitialized === 'undefined') {\r\n                    document.addEventListener('click', handleClickAway);\r\n                    document.addEventListener('keydown', handleEscKey);\r\n                    window.modalEventsInitialized = true;\r\n                }\r\n\r\n                // Make functions globally available\r\n                window.closeModal = closeModal;\r\n                window.openModal = openModal;\r\n                window.closeModalById = closeModalById;\r\n                window.openModalById = openModalById;\r\n\r\n                initAllComponents();\r\n                document.addEventListener('DOMContentLoaded', () => initAllComponents());\r\n                document.body.addEventListener('htmx:afterSwap', handleHtmxSwap);\r\n                document.body.addEventListener('htmx:oobAfterSwap', handleHtmxSwap);\r\n            })(); // End of IIFE\r\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func LayoutWithSidebar(user *auth.AuthenticatedUser, currentLocale string, title string, showSidebar bool) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<!doctype html><html lang=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(currentLocale)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/templates/layout.templ`, Line: 222, Col: 30}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/templates/layout.templ`, Line: 226, Col: 22}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " - Baigiamųjų darbų talpykla</title><link rel=\"stylesheet\" href=\"/assets/css/output.css\"></head><body class=\"bg-background text-foreground\"><div class=\"min-h-screen flex flex-col\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Navbar(user, currentLocale).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if showSidebar && user != nil {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<div class=\"flex flex-1\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = Sidebar(user).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<main class=\"flex-1 p-6\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ_7745c5c3_Var4.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</main></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<main class=\"flex-1 container mx-auto px-4 py-6\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ_7745c5c3_Var4.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</main>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</div><!-- Add HTMX --><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><script src=\"/static/js/navbar.js\"></script><!-- Modal System Initialization (same as above) --><script nonce=\"\">\r\n                   if (typeof window.modalState === 'undefined') {\r\n                       window.modalState = {\r\n                           openModalId: null\r\n                       };\r\n                   }\r\n\r\n                   (function() { // IIFE\r\n                       function closeModal(modal, immediate = false) {\r\n                           if (!modal || modal.style.display === 'none') return;\r\n\r\n                           const content = modal.querySelector('[data-modal-content]');\r\n                           const modalId = modal.id;\r\n\r\n                           // Apply leaving transitions\r\n                           modal.classList.remove('opacity-100');\r\n                           modal.classList.add('opacity-0');\r\n\r\n                           if (content) {\r\n                               content.classList.remove('scale-100', 'opacity-100');\r\n                               content.classList.add('scale-95', 'opacity-0');\r\n                           }\r\n\r\n                           function hideModal() {\r\n                               modal.style.display = 'none';\r\n\r\n                               if (window.modalState.openModalId === modalId) {\r\n                                   window.modalState.openModalId = null;\r\n                                   document.body.style.overflow = '';\r\n                               }\r\n\r\n                               // Clean up modal container if it exists\r\n                               const modalContainer = document.getElementById('modal-container');\r\n                               if (modalContainer) {\r\n                                   modalContainer.innerHTML = '';\r\n                                   modalContainer.style.display = 'none';\r\n                                   modalContainer.className = '';\r\n                                   modalContainer.removeAttribute('style');\r\n                                   modalContainer.style.display = 'none';\r\n                               }\r\n                           }\r\n\r\n                           if (immediate) {\r\n                               hideModal();\r\n                           } else {\r\n                               setTimeout(hideModal, 300);\r\n                           }\r\n                       }\r\n\r\n                       function openModal(modal) {\r\n                           if (!modal) return;\r\n\r\n                           // Close any open modal first\r\n                           if (window.modalState.openModalId) {\r\n                               const openModal = document.getElementById(window.modalState.openModalId);\r\n                               if (openModal && openModal !== modal) {\r\n                                   closeModal(openModal, true);\r\n                               }\r\n                           }\r\n\r\n                           const content = modal.querySelector('[data-modal-content]');\r\n\r\n                           // Display and prepare for animation\r\n                           modal.style.display = 'flex';\r\n\r\n                           // Store as currently open modal\r\n                           window.modalState.openModalId = modal.id;\r\n                           document.body.style.overflow = 'hidden';\r\n\r\n                           // Force reflow before adding transition classes\r\n                           void modal.offsetHeight;\r\n\r\n                           // Start animations\r\n                           modal.classList.remove('opacity-0');\r\n                           modal.classList.add('opacity-100');\r\n\r\n                           if (content) {\r\n                               content.classList.remove('scale-95', 'opacity-0');\r\n                               content.classList.add('scale-100', 'opacity-100');\r\n\r\n                               // Focus first focusable element\r\n                               setTimeout(() => {\r\n                                   const focusable = content.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\r\n                                   if (focusable) focusable.focus();\r\n                               }, 50);\r\n                           }\r\n                       }\r\n\r\n                       function closeModalById(modalId, immediate = false) {\r\n                           const modal = document.getElementById(modalId);\r\n                           if (modal) closeModal(modal, immediate);\r\n                       }\r\n\r\n                       function openModalById(modalId) {\r\n                           const modal = document.getElementById(modalId);\r\n                           if (modal) openModal(modal);\r\n                       }\r\n\r\n                       function handleClickAway(e) {\r\n                           const openModalId = window.modalState.openModalId;\r\n                           if (!openModalId) return;\r\n\r\n                           const modal = document.getElementById(openModalId);\r\n                           if (!modal || modal.getAttribute('data-disable-click-away') === 'true') return;\r\n\r\n                           const content = modal.querySelector('[data-modal-content]');\r\n                           const trigger = e.target.closest('[data-modal-trigger]');\r\n\r\n                           if (content && !content.contains(e.target) &&\r\n                               (!trigger || trigger.getAttribute('data-modal-target-id') !== openModalId)) {\r\n                               closeModal(modal);\r\n                           }\r\n                       }\r\n\r\n                       function handleEscKey(e) {\r\n                           if (e.key !== 'Escape' || !window.modalState.openModalId) return;\r\n\r\n                           const modal = document.getElementById(window.modalState.openModalId);\r\n                           if (modal && modal.getAttribute('data-disable-esc') !== 'true') {\r\n                               closeModal(modal);\r\n                           }\r\n                       }\r\n\r\n                       function initTrigger(trigger) {\r\n                           const targetId = trigger.getAttribute('data-modal-target-id');\r\n                           if (!targetId) return;\r\n\r\n                           trigger.addEventListener('click', () => {\r\n                               if (!trigger.hasAttribute('disabled') &&\r\n                                   !trigger.classList.contains('opacity-50')) {\r\n                                   openModalById(targetId);\r\n                               }\r\n                           });\r\n                       }\r\n\r\n                       function initCloseButton(closeBtn) {\r\n                           closeBtn.addEventListener('click', () => {\r\n                               const targetId = closeBtn.getAttribute('data-modal-target-id');\r\n                               if (targetId) {\r\n                                   closeModalById(targetId);\r\n                               } else {\r\n                                   const modal = closeBtn.closest('[data-modal]');\r\n                                   if (modal && modal.id) {\r\n                                       closeModal(modal);\r\n                                   }\r\n                               }\r\n                           });\r\n                       }\r\n\r\n                       function initAllComponents(root = document) {\r\n                           if (root instanceof Element && root.matches('[data-modal-trigger]')) {\r\n                               initTrigger(root);\r\n                           }\r\n                           for (const trigger of root.querySelectorAll('[data-modal-trigger]')) {\r\n                               initTrigger(trigger);\r\n                           }\r\n\r\n                           if (root instanceof Element && root.matches('[data-modal-close]')) {\r\n                               initCloseButton(root);\r\n                           }\r\n                           for (const closeBtn of root.querySelectorAll('[data-modal-close]')) {\r\n                               initCloseButton(closeBtn);\r\n                           }\r\n                       }\r\n\r\n                       const handleHtmxSwap = (event) => {\r\n                           const target = event.detail.elt\r\n                           if (target instanceof Element) {\r\n                               requestAnimationFrame(() => initAllComponents(target));\r\n                           }\r\n                       };\r\n\r\n                       if (typeof window.modalEventsInitialized === 'undefined') {\r\n                           document.addEventListener('click', handleClickAway);\r\n                           document.addEventListener('keydown', handleEscKey);\r\n                           window.modalEventsInitialized = true;\r\n                       }\r\n\r\n                       // Make functions globally available\r\n                       window.closeModal = closeModal;\r\n                       window.openModal = openModal;\r\n                       window.closeModalById = closeModalById;\r\n                       window.openModalById = openModalById;\r\n\r\n                       initAllComponents();\r\n                       document.addEventListener('DOMContentLoaded', () => initAllComponents());\r\n                       document.body.addEventListener('htmx:afterSwap', handleHtmxSwap);\r\n                       document.body.addEventListener('htmx:oobAfterSwap', handleHtmxSwap);\r\n                   })(); // End of IIFE\r\n               </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Sidebar(user *auth.AuthenticatedUser) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<aside class=\"w-64 border-r bg-card text-card-foreground\"><div class=\"p-6\"><h2 class=\"text-lg font-semibold mb-4\">Navigation</h2><nav class=\"space-y-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = SidebarLink("/dashboard", "Dashboard", "🏠").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = SidebarLink("/projects", "Projects", "📁").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = SidebarLink("/submissions", "Submissions", "📄").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = SidebarLink("/settings", "Settings", "⚙️").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</nav></div></aside>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func SidebarLink(href string, text string, icon string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<a href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 templ.SafeURL = templ.SafeURL(href)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var9)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\" class=\"flex items-center space-x-3 text-sm font-medium rounded-md px-3 py-2 hover:bg-accent hover:text-accent-foreground transition-colors\"><span class=\"text-lg\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(icon)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/templates/layout.templ`, Line: 465, Col: 36}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "</span> <span>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(text)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/templates/layout.templ`, Line: 466, Col: 20}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "</span></a>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
