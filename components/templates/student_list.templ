package templates

import (
    "FinalProjectManagementApp/auth"
    "FinalProjectManagementApp/database"
    "FinalProjectManagementApp/components/card"
    "FinalProjectManagementApp/components/button"
     "FinalProjectManagementApp/components/icon"
    "strconv"
)

// Main StudentList function
templ StudentList(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string, pagination *database.PaginationInfo, searchValue string) {
    @Layout(user, currentLocale, "Studentų sąrašas") {
        <div class="space-y-6">
            <!-- Header Section -->
            @StudentListHeader(user, searchValue)

            <!-- Filters -->
            @StudentListFilters(pagination)

            <!-- Table Container for HTMX updates -->
            <div id="student-table-container">
                @StudentTableWithPagination(user, students, currentLocale, pagination)
            </div>
        </div>

        <!-- Add HTMX CSS for indicators -->
        <style>
            .htmx-indicator {
                opacity: 0;
                transition: opacity 200ms ease-in;
            }
            .htmx-request .htmx-indicator {
                opacity: 1;
            }
            .htmx-request.htmx-indicator {
                opacity: 1;
            }
        </style>

        <script>
            // Clear all filters function
            function clearAllFilters() {
                document.getElementById('search').value = '';
                document.querySelectorAll('select').forEach(select => {
                    select.selectedIndex = 0;
                });
            }
        </script>
    }
}

// Update the search input in StudentListHeader
templ StudentListHeader(user *auth.AuthenticatedUser, searchValue string) {
    <div class="space-y-4">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold tracking-tight text-foreground">Studentų sąrašas</h1>
                <p class="text-muted-foreground">Valdyti ir peržiūrėti studentų informaciją</p>
            </div>

            <div class="flex items-center gap-3">
                if canExportData(user.Role) {
                    @button.Button(button.Props{
                        Variant: button.VariantDefault,
                        Class: "flex items-center gap-2",
                        Attributes: templ.Attributes{
                            "onclick": "exportData()",
                        },
                    }) {
                        @icon.Download(icon.Props{Size: 16})
                        Eksportuoti
                    }
                }
            </div>
        </div>

        <!-- HTMX-powered Search Bar -->
        <div class="w-full">
            <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none z-10">
                    @icon.Search(icon.Props{Size: 20, Class: "text-gray-400"})
                </div>
                <input
                    type="text"
                    id="search"
                    name="search"
                    name="search"
                    placeholder="Ieškoti studentų pagal vardą, pavardę, temą arba el. paštą..."
                    class="block w-full pl-10 pr-4 py-3 text-sm border border-gray-300 bg-white rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 placeholder:text-gray-500 transition-all duration-200"
                    autocomplete="off"
                    value={ searchValue }
                    hx-get="/students-list"
                    hx-trigger="input changed delay:300ms, search"
                    hx-target="#student-table-container"
                    hx-include="[name='limit'],[name='group'],[name='study_program'],[name='topic_status']"
                    hx-indicator="#search-indicator"
                />
                <!-- Loading indicator -->
                <div id="search-indicator" class="htmx-indicator absolute inset-y-0 right-0 pr-3 flex items-center">
                    @icon.LoaderCircle(icon.Props{Size: 16, Class: "animate-spin text-blue-500"})
                </div>
            </div>
        </div>
    </div>
}

// Update filters to work with HTMX
templ StudentListFilters(pagination *database.PaginationInfo) {
    <div class="bg-gray-50 rounded-lg p-3 border border-gray-200">
        <div class="flex items-center gap-4 flex-wrap">
            <!-- Records per page -->
            <div class="flex items-center gap-2">
                <label class="text-sm font-medium text-gray-700 whitespace-nowrap">Kiek rodyti:</label>
                <select
                    name="limit"
                    class="h-9 rounded-md border border-gray-300 bg-white px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-w-16"
                    hx-get="/students-list"
                    hx-trigger="change"
                    hx-target="#student-table-container"
                    hx-include="[name='search'],[name='group'],[name='study_program'],[name='topic_status']"
                >
                    if pagination != nil && pagination.Limit == 10 {
                        <option value="10" selected>10</option>
                    } else {
                        <option value="10">10</option>
                    }
                    if pagination != nil && pagination.Limit == 25 {
                        <option value="25" selected>25</option>
                    } else {
                        <option value="25">25</option>
                    }
                    if pagination != nil && pagination.Limit == 50 {
                        <option value="50" selected>50</option>
                    } else {
                        <option value="50">50</option>
                    }
                </select>
            </div>

            <!-- Group filter -->
            <div class="flex items-center gap-2">
                <label class="text-sm font-medium text-gray-700 whitespace-nowrap">Grupė:</label>
                <select
                    name="group"
                    class="h-9 rounded-md border border-gray-300 bg-white px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-w-24"
                    hx-get="/students-list"
                    hx-trigger="change"
                    hx-target="#student-table-container"
                    hx-include="[name='search'],[name='limit'],[name='study_program'],[name='topic_status']"
                >
                    <option value="">Visos</option>
                    <option value="PI22B">PI22B</option>
                    <option value="PI22S">PI22S</option>
                    <option value="PIT22">PIT22</option>
                </select>
            </div>

            <!-- Study program filter -->
            <div class="flex items-center gap-2">
                <label class="text-sm font-medium text-gray-700 whitespace-nowrap">Programa:</label>
                <select
                    name="study_program"
                    class="h-9 rounded-md border border-gray-300 bg-white px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-w-32"
                    hx-get="/students-list"
                    hx-trigger="change"
                    hx-target="#student-table-container"
                    hx-include="[name='search'],[name='limit'],[name='group'],[name='topic_status']"
                >
                    <option value="">Visos</option>
                    <option value="Informatikos inžinerija">Informatikos inž.</option>
                    <option value="Programų sistemų inžinerija">Programų sist. inž.</option>
                </select>
            </div>

            <!-- Topic status filter -->
            <div class="flex items-center gap-2">
                <label class="text-sm font-medium text-gray-700 whitespace-nowrap">Temos būsena:</label>
                <select
                    name="topic_status"
                    class="h-9 rounded-md border border-gray-300 bg-white px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-w-28"
                    hx-get="/students-list"
                    hx-trigger="change"
                    hx-target="#student-table-container"
                    hx-include="[name='search'],[name='limit'],[name='group'],[name='study_program']"
                >
                    <option value="">Visos</option>
                    <option value="">Nepradėta</option>
                    <option value="draft">Juodraštis</option>
                    <option value="submitted">Pateikta</option>
                    <option value="approved">Patvirtinta</option>
                    <option value="rejected">Atmesta</option>
                </select>
            </div>

            <!-- Clear filters -->
            <div class="ml-auto">
                @button.Button(button.Props{
                    Type: button.TypeButton,
                    Variant: button.VariantOutline,
                    Class: "h-9 px-3 text-sm flex items-center gap-1",
                    Attributes: templ.Attributes{
                        "hx-get": "/students-list",
                        "hx-target": "#student-table-container",
                        "onclick": "clearAllFilters()",
                    },
                }) {
                    @icon.X(icon.Props{Size: 16})
                    Išvalyti
                }
            </div>
        </div>
    </div>
}

// Separate component for table and pagination that can be updated
templ StudentTableWithPagination(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string, pagination *database.PaginationInfo) {
    <!-- Table Card -->
    @card.Card() {
        @StudentListTable(user, students, currentLocale)
    }

    <!-- Pagination -->
    if pagination != nil {
        @PaginationComponent(pagination)
    }
}

// Main Table
templ StudentListTable(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string) {
    <div class="relative w-full overflow-auto">
        <table class="w-full caption-bottom text-sm">
            <thead class="border-b">
                <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                    <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-20">
                        Grupė
                    </th>
                    <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-64">
                        Studentas
                    </th>
                    if canViewTopicRegistration(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-48">
                            Tema
                        </th>
                    }
                    if canViewDocuments(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-32">
                            Dokumentai
                        </th>
                    }
                    if canViewReviewer(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-48">
                            Recenzentas
                        </th>
                    }
                    if canViewSupervisor(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-48">
                            Vadovas
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="[&_tr:last-child]:border-0">
                for _, student := range students {
                    <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                        <!-- Group -->
                        <td class="p-4 align-middle">
                            @CompactBadge(student.StudentGroup, "primary")
                        </td>

                        <!-- Student Info -->
                        <td class="p-4 align-middle">
                            <div class="space-y-1">
                                <div class="font-medium text-foreground">
                                    { student.GetDisplayName(currentLocale) }
                                </div>
                                <div class="text-sm text-muted-foreground">
                                    { student.GetLocalizedTitle(currentLocale) }
                                </div>
                                if canViewStudentDetails(user.Role) {
                                    <div class="text-xs text-muted-foreground">
                                        { student.StudentEmail }
                                    </div>
                                }
                            </div>
                        </td>

                        if canViewTopicRegistration(user.Role) {
                            <td class="p-4 align-middle">
                                @RegistrationStatus(user, student.TopicStatus, student.TopicApproved, student.ID)
                            </td>
                        }

                        if canViewDocuments(user.Role) {
                            <td class="p-4 align-middle">
                                @DocumentsCell(user, student.ID)
                            </td>
                        }

                        if canViewReviewer(user.Role) {
                            <td class="p-4 align-middle">
                                @ReviewerStatus(user, student.ReviewerName, student.HasReviewerReport, student.ReviewerReportSigned, student.ID)
                            </td>
                        }

                        if canViewSupervisor(user.Role) {
                            <td class="p-4 align-middle">
                                @SupervisorStatus(user, student.SupervisorEmail, student.HasSupervisorReport, student.SupervisorReportSigned, student.ID)
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

// Enhanced registration status with proper view buttons
templ RegistrationStatus(user *auth.AuthenticatedUser, status string, approved bool, studentID int) {
    <div class="space-y-2">
        if approved {
            <div class="space-y-2">
                <div class="text-sm font-medium text-green-700">Patvirtinta katedros vedėjo</div>
                <div class="flex flex-col gap-1">
                    @IconButton("eye", "viewRegistration(" + strconv.Itoa(studentID) + ")", "Žiūrėti registraciją", "outline")
                    if user.Role == "department_head" || user.Role == "admin" {
                        @IconButton("file-text", "viewTopicRegistrationForm(" + strconv.Itoa(studentID) + ")", "Temos registravimo lapas", "primary")
                    }
                </div>
            </div>
        } else if status == "submitted" {
            @CompactBadge("Pateikta", "warning")
            <div class="flex items-center gap-1">
                if canEditRegistration(user.Role, status) {
                    @IconButton("edit", "editRegistration(" + strconv.Itoa(studentID) + ")", "Redaguoti", "outline")
                }
                if user.Role == "department_head" || user.Role == "admin" {
                    @IconButton("check", "approveRegistration(" + strconv.Itoa(studentID) + ")", "Patvirtinti", "success")
                    @IconButton("edit-3", "requestChanges(" + strconv.Itoa(studentID) + ")", "Prašyti pakeitimų", "warning")
                }
            </div>
        } else if status == "draft" {
            @CompactBadge("Juodraštis", "secondary")
            if canEditRegistration(user.Role, status) {
                <div class="flex">
                    @IconButton("edit", "editRegistration(" + strconv.Itoa(studentID) + ")", "Redaguoti", "outline")
                </div>
            }
        } else if status == "needs_revision" {
            @CompactBadge("Reikia pataisymų", "warning")
            if canEditRegistration(user.Role, status) {
                <div class="flex">
                    @IconButton("edit", "editRegistration(" + strconv.Itoa(studentID) + ")", "Pataisyti", "primary")
                </div>
            }
        } else if status == "rejected" {
            @CompactBadge("Atmesta", "error")
            if canEditRegistration(user.Role, status) {
                <div class="flex">
                    @IconButton("edit", "editRegistration(" + strconv.Itoa(studentID) + ")", "Redaguoti", "outline")
                </div>
            }
        } else {
            @CompactBadge("Nepradėta", "error")
            if canCreateRegistration(user.Role) {
                <div class="flex">
                    @IconButton("plus", "editRegistration(" + strconv.Itoa(studentID) + ")", "Pradėti", "primary")
                </div>
            }
        }
    </div>
}

templ DocumentsCell(user *auth.AuthenticatedUser, studentID int) {
    <div class="space-y-2">
        <div
            id={ "docs-" + strconv.Itoa(studentID) }
            class="space-y-1"
            data-student-id={ strconv.Itoa(studentID) }
            data-user-role={ user.Role }
            data-load-documents="true"
        >
            <div class="text-xs text-muted-foreground italic">Kraunama...</div>
        </div>
        if canUploadDocuments(user.Role) {
            <div class="flex">
                @IconButton("upload", "uploadDocument(" + strconv.Itoa(studentID) + ")", "Įkelti dokumentą", "outline")
            </div>
        }
    </div>
}

// Enhanced reviewer status with view button when signed
templ ReviewerStatus(user *auth.AuthenticatedUser, reviewerName string, hasReport bool, isSigned bool, studentID int) {
    <div class="space-y-2">
        if reviewerName != "" {
            <div class="text-xs font-medium text-foreground truncate max-w-32" title={ reviewerName }>
                { reviewerName }
            </div>
            if hasReport {
                <div class="flex items-center gap-1">
                    if isSigned {
                        @CompactBadge("Pasirašyta", "success")
                        @IconButton("eye", "viewReviewerReport(" + strconv.Itoa(studentID) + ")", "Žiūrėti recenzento atsiliepimą", "outline")
                    } else {
                        @CompactBadge("Užpildyta", "info")
                        if canViewReview(user.Role) {
                            @IconButton("eye", "viewReview(" + strconv.Itoa(studentID) + ")", "Žiūrėti", "outline")
                        }
                    }
                </div>
            } else {
                <div class="flex items-center gap-1">
                    @CompactBadge("Neužpildyta", "secondary")
                    if canEditReview(user.Role, reviewerName, user.Email) {
                        @IconButton("edit", "editReview(" + strconv.Itoa(studentID) + ")", "Pildyti", "primary")
                    }
                </div>
            }
        } else {
            <div class="space-y-1">
                <span class="text-xs text-muted-foreground">Nepaskirtas</span>
                if canAssignReviewer(user.Role) {
                    <div class="flex">
                        @IconButton("user-plus", "assignReviewer(" + strconv.Itoa(studentID) + ")", "Paskirti", "outline")
                    </div>
                }
            </div>
        }
    </div>
}

// Enhanced supervisor status with view button when signed
templ SupervisorStatus(user *auth.AuthenticatedUser, supervisorEmail string, hasReport bool, isSigned bool, studentID int) {
    <div class="space-y-2">
        <div class="text-xs text-muted-foreground truncate max-w-32" title={ supervisorEmail }>
            { supervisorEmail }
        </div>
        if hasReport {
            <div class="flex items-center gap-1">
                if isSigned {
                    @CompactBadge("Pasirašyta", "success")
                    @IconButton("eye", "viewSupervisorReport(" + strconv.Itoa(studentID) + ")", "Žiūrėti vadovo ataskaitą", "outline")
                } else {
                    @CompactBadge("Užpildyta", "info")
                    if canViewSupervisorReport(user.Role) {
                        @IconButton("eye", "viewSupervisorReport(" + strconv.Itoa(studentID) + ")", "Žiūrėti", "outline")
                    }
                }
            </div>
        } else {
            <div class="flex items-center gap-1">
                @CompactBadge("Neužpildyta", "secondary")
                if canEditSupervisorReport(user.Role, supervisorEmail, user.Email) {
                    @IconButton("edit", "editSupervisorReport(" + strconv.Itoa(studentID) + ")", "Pildyti", "primary")
                }
            </div>
        }
    </div>
}

// Pagination Component
templ PaginationComponent(pagination *database.PaginationInfo) {
    <div class="flex items-center justify-between">
        <div class="text-sm text-muted-foreground">
            Rodoma { strconv.Itoa((pagination.Page-1)*pagination.Limit + 1) } - { strconv.Itoa(minInt(pagination.Page*pagination.Limit, pagination.Total)) } iš { strconv.Itoa(pagination.Total) }
        </div>

        <div class="flex items-center gap-2">
            @button.Button(button.Props{
                Variant: button.VariantOutline,
                Size: button.SizeIcon,
                Attributes: templ.Attributes{
                    "hx-get": "/students-list",
                    "hx-target": "#student-table-container",
                    "hx-include": "[name='search'],[name='limit'],[name='group'],[name='study_program'],[name='topic_status']",
                },
            }) {
                @icon.RotateCcw(icon.Props{Size: 16})
            }

            <div class="flex">
                if pagination.HasPrev {
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Class: "rounded-r-none",
                        Attributes: templ.Attributes{
                            "hx-get": "/students-list?page=" + strconv.Itoa(pagination.PrevPage),
                            "hx-target": "#student-table-container",
                            "hx-include": "[name='search'],[name='limit'],[name='group'],[name='study_program'],[name='topic_status']",
                        },
                    }) {
                        @icon.ChevronLeft(icon.Props{Size: 16})
                    }
                }

                for i := maxInt(1, pagination.Page-2); i <= minInt(pagination.TotalPages, pagination.Page+2); i++ {
                    if i == pagination.Page {
                        @button.Button(button.Props{
                            Variant: button.VariantDefault,
                            Class: "rounded-none",
                        }) {
                            { strconv.Itoa(i) }
                        }
                    } else {
                        @button.Button(button.Props{
                            Variant: button.VariantOutline,
                            Class: "rounded-none",
                            Attributes: templ.Attributes{
                                "hx-get": "/students-list?page=" + strconv.Itoa(i),
                                "hx-target": "#student-table-container",
                                "hx-include": "[name='search'],[name='limit'],[name='group'],[name='study_program'],[name='topic_status']",
                            },
                        }) {
                            { strconv.Itoa(i) }
                        }
                    }
                }

                if pagination.HasNext {
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Class: "rounded-l-none",
                        Attributes: templ.Attributes{
                            "hx-get": "/students-list?page=" + strconv.Itoa(pagination.NextPage),
                            "hx-target": "#student-table-container",
                            "hx-include": "[name='search'],[name='limit'],[name='group'],[name='study_program'],[name='topic_status']",
                        },
                    }) {
                        @icon.ChevronRight(icon.Props{Size: 16})
                    }
                }
            </div>
        </div>
    </div>
}

// Enhanced icon button with templui icons
templ IconButton(iconName, action, tooltip string, variant string) {
    @button.Button(button.Props{
        Variant: getButtonVariant(variant),
        Class: "h-8 w-full px-2 text-xs flex items-center justify-center gap-1",
        Attributes: templ.Attributes{
            "onclick": action,
            "title": tooltip,
        },
    }) {
        @renderTemplUIIcon(iconName)
        <span class="truncate">{ getButtonText(iconName, tooltip) }</span>
    }
}

// Render templui icons with correct icon names from your available icons
templ renderTemplUIIcon(iconName string) {
    switch iconName {
    case "eye":
        @icon.Eye(icon.Props{Size: 14})
    case "file-text":
        @icon.FileText(icon.Props{Size: 14})
    case "edit":
        @icon.PencilLine(icon.Props{Size: 14})
    case "edit-3":
        @icon.Pencil(icon.Props{Size: 14})
    case "check":
        @icon.Check(icon.Props{Size: 14})
    case "x":
        @icon.X(icon.Props{Size: 14})
    case "plus":
        @icon.Plus(icon.Props{Size: 14})
    case "upload":
        @icon.Upload(icon.Props{Size: 14})
    case "user-plus":
        @icon.UserPlus(icon.Props{Size: 14})
    case "more-vertical":
        @icon.EllipsisVertical(icon.Props{Size: 14})
    default:
        @icon.CircleHelp(icon.Props{Size: 14})
    }
}

// Utility Components
templ CompactBadge(text, variant string) {
    <span class={
        "inline-flex items-center px-1.5 py-0.5 text-xs font-medium rounded-md " +
        getBadgeClasses(variant)
    }>
        { text }
    </span>
}

// Badge classes
func getBadgeClasses(variant string) string {
    switch variant {
    case "success":
        return "bg-green-50 text-green-700 ring-1 ring-green-600/20"
    case "warning":
        return "bg-yellow-50 text-yellow-700 ring-1 ring-yellow-600/20"
    case "error":
        return "bg-red-50 text-red-700 ring-1 ring-red-600/20"
    case "info":
        return "bg-blue-50 text-blue-700 ring-1 ring-blue-600/20"
    case "primary":
        return "bg-blue-50 text-blue-700 ring-1 ring-blue-600/20"
    case "secondary":
        return "bg-gray-50 text-gray-700 ring-1 ring-gray-600/20"
    default:
        return "bg-gray-50 text-gray-700 ring-1 ring-gray-600/20"
    }
}

// Helper function to get button text
func getButtonText(iconName, tooltip string) string {
    switch iconName {
    case "eye":
        return "Žiūrėti"
    case "file-text":
        return "Lapas"
    case "edit":
        return "Redaguoti"
    case "edit-3":
        return "Pakeitimai"
    case "check":
        return "Patvirtinti"
    case "x":
        return "Atmesti"
    case "plus":
        return "Pradėti"
    case "upload":
        return "Įkelti"
    case "user-plus":
        return "Paskirti"
    default:
        return tooltip
    }
}

// Button variant mapping
func getButtonVariant(variant string) button.Variant {
    switch variant {
    case "success":
        return button.VariantDefault
    case "error":
        return button.VariantDestructive
    case "warning":
        return button.VariantOutline
    case "primary":
        return button.VariantDefault
    case "ghost":
        return button.VariantGhost
    default:
        return button.VariantOutline
    }
}

// Utility functions
func minInt(a, b int) int {
    if a < b {
        return a
    }
    return b
}

func maxInt(a, b int) int {
    if a > b {
        return a
    }
    return b
}