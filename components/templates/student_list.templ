package templates

import (
	"FinalProjectManagementApp/auth"
	"FinalProjectManagementApp/components/badge"
	"FinalProjectManagementApp/components/button"
	"FinalProjectManagementApp/components/icon"
	"FinalProjectManagementApp/components/input"
	"FinalProjectManagementApp/components/label"
	"FinalProjectManagementApp/components/selectbox"
	"FinalProjectManagementApp/components/table"
	"FinalProjectManagementApp/database"
	"fmt"
	"database/sql"
	"strconv"
)

// Single unified StudentList template
templ StudentList(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string, pagination *database.PaginationInfo, searchValue string, filters *database.TemplateFilterParams, filterOptions *database.FilterOptions) {
	@Layout(user, currentLocale, "Studentų sąrašas") {
		<div class="space-y-6">
			<!-- Header Section -->
			@StudentListHeader(user, searchValue)
			<!-- Filters Form -->
			<form id="filters-form" hx-get="/students-list" hx-target="#student-table-container" hx-trigger="change">
				@StudentListFilters(pagination, filters, filterOptions)
			</form>
			<!-- Table Container for HTMX updates -->
			<div id="student-table-container">
				@StudentTableWithPagination(user, students, currentLocale, pagination)
			</div>
		</div>
		<!-- Modal Container -->
		<div id="modal-container" style="display: none;"></div>
		<script>
            // Clear all filters function
            function clearAllFilters() {
                const searchInput = document.getElementById('search');
                if (searchInput) {
                    searchInput.value = '';
                }

                document.querySelectorAll('.select-container').forEach(container => {
                    const trigger = container.querySelector('.select-trigger');
                    const hiddenInput = trigger?.querySelector('input[type="hidden"]');
                    const valueEl = trigger?.querySelector('.select-value');
                    const contentId = trigger?.dataset.contentId;

                    if (hiddenInput) {
                        hiddenInput.value = '';
                    }

                    if (valueEl) {
                        const inputName = hiddenInput?.name;
                        let placeholder = 'Visos';
                        if (inputName === 'limit') {
                            placeholder = '10';
                            hiddenInput.value = '10';
                        } else if (inputName === 'year') {
                            placeholder = 'Visi metai';
                        }
                        valueEl.textContent = placeholder;
                        valueEl.classList.add('text-muted-foreground');
                    }

                    if (contentId) {
                        const content = document.getElementById(contentId);
                        if (content) {
                            content.querySelectorAll('.select-item').forEach(item => {
                                item.setAttribute('data-selected', 'false');
                                item.classList.remove('bg-accent', 'text-accent-foreground');
                                const check = item.querySelector('.select-check');
                                if (check) check.classList.replace('opacity-100', 'opacity-0');
                            });

                            const inputName = hiddenInput?.name;
                            let defaultValue = '';
                            if (inputName === 'limit') {
                                defaultValue = '10';
                            }

                            const defaultItem = content.querySelector(`.select-item[data-value="${defaultValue}"]`);
                            if (defaultItem) {
                                defaultItem.setAttribute('data-selected', 'true');
                                defaultItem.classList.add('bg-accent', 'text-accent-foreground');
                                const check = defaultItem.querySelector('.select-check');
                                if (check) check.classList.replace('opacity-0', 'opacity-100');
                            }
                        }
                    }
                });

                htmx.ajax('GET', '/students-list', {
                    target: '#student-table-container',
                    values: { limit: '10', group: '', study_program: '', topic_status: '', year: '', search: '', page: '1' }
                });
            }

function viewStudentRepository(studentId) {
        window.open('/repository/student/' + studentId, '_blank');
    }

         // Function to view topic registration (read-only)
         function viewTopicRegistration(studentId) {
             console.log('viewTopicRegistration called with:', studentId);
             htmx.ajax('GET', `/topic-registration/${studentId}?mode=view`, {
                 target: '#modal-container',
                 swap: 'innerHTML'
             });
             showModal();
         }

         // Function to view topic registration form (for review)
         function viewTopicRegistrationForm(studentId) {
             console.log('viewTopicRegistrationForm called with:', studentId);
             htmx.ajax('GET', `/topic-registration/${studentId}?mode=review`, {
                 target: '#modal-container',
                 swap: 'innerHTML'
             });
             showModal();
         }


// STUDENTU LISTO ATNAUJINIMAS UZPILDZIUS VADOVO ATSILIEPIMA
// Add this to your main page where the student list is displayed
document.addEventListener('supervisorReportSaved', function(event) {
    console.log('Supervisor report saved, refreshing...');

    // Close any open modals
    const modal = document.getElementById('supervisor-modal');
    if (modal && window.modalState) {
        modal.style.display = 'none';
        window.modalState.openModalId = null;
        document.body.style.overflow = '';
    }

    // Show success notification
    showSuccessNotification('Supervisor report saved successfully!');

    // Refresh the student table
    setTimeout(function() {
        window.location.reload(); // Simple and reliable
    }, 1500);
});

function showSuccessNotification(message) {
    // Create notification element
    const notification = document.createElement('div');
    notification.id = 'success-notification';
    notification.className = 'fixed top-4 right-4 z-50 bg-green-50 border border-green-200 rounded-lg p-4 shadow-lg max-w-sm';
    notification.innerHTML = `
        <div class="flex items-center">
            <svg class="h-5 w-5 text-green-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div class="text-green-600 text-sm font-medium">${message}</div>
        </div>
    `;

    // Add to page
    document.body.appendChild(notification);

    // Remove after 3 seconds
    setTimeout(function() {
        if (notification && notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 3000);
}

///========================================================================================



            function approveRegistration(studentId) {
                console.log('approveRegistration called with:', studentId);
                htmx.ajax('GET', `/topic-registration/${studentId}?mode=review`, {
                    target: '#modal-container',
                    swap: 'innerHTML'
                });
                showModal();
            }

            // Supervisor Report Functions
 // Update editSupervisorReport to check if editing is allowed
 function editSupervisorReport(studentId) {
     console.log('DEBUG: editSupervisorReport called for student:', studentId);

     // Don't include mode parameter for edit - let the handler decide based on status
     htmx.ajax('GET', `/supervisor-report/${studentId}/compact-modal`, {
         target: '#modal-container',
         swap: 'innerHTML'
     });
     showModal();
 }

 // View function always passes mode=view
 function viewSupervisorReport(studentId) {
     console.log('DEBUG: viewSupervisorReport called for student:', studentId);

     htmx.ajax('GET', '/supervisor-report/' + studentId + '/compact-modal?mode=view', {
         target: '#modal-container',
         swap: 'innerHTML'
     }).then(() => {
         console.log('DEBUG: HTMX request completed');
         showModal();
     }).catch((error) => {
         console.error('DEBUG: HTMX request failed:', error);
     });
 }

    // Update createSupervisorReport to not include mode (allows editing)
    function createSupervisorReport(studentId) {
        htmx.ajax('GET', `/supervisor-report/${studentId}/compact-modal`, {
            target: '#modal-container',
            swap: 'innerHTML'
        });
        showModal();
    }



      function showModal() {
          let modalContainer = document.getElementById('modal-container');
          if (!modalContainer) {
              modalContainer = document.createElement('div');
              modalContainer.id = 'modal-container';
              modalContainer.className = 'fixed inset-0 z-50';
              document.body.appendChild(modalContainer);
          }
          modalContainer.style.display = 'block';

          // Add event listener for HTMX after content loads
          document.addEventListener('htmx:afterSwap', function(evt) {
              if (evt.detail.target.id === 'modal-container') {
                  // Focus trap for accessibility
                  setTimeout(() => {
                      const modal = modalContainer.querySelector('[role="dialog"]');
                      if (modal) {
                          modal.focus();
                      }
                  }, 100);
              }
          });
      }

                  // Update hideModal to work with TemplUI modals
                  function hideModal() {
                      const modalContainer = document.getElementById('modal-container');
                      if (modalContainer) {
                          modalContainer.style.display = 'none';
                          modalContainer.innerHTML = '';
                      }
                      // Reset modal state
                      if (window.modalState) {
                          window.modalState.openModalId = null;
                      }
                      document.body.style.overflow = '';
                  }

            // Event Listeners
            document.addEventListener('htmx:afterRequest', function(evt) {
                if (evt.detail.xhr.getResponseHeader('HX-Trigger') === 'reportSaved') {
                    hideModal();
                    htmx.ajax('GET', '/students-list', {
                        target: '#student-table-container',
                        values: htmx.values('#filters-form')
                    });
                }
            });

            // Debug logging
            document.addEventListener('htmx:beforeRequest', function(evt) {
                console.log('HTMX Request URL:', evt.detail.requestConfig.path);
            });

            // Confirm functions are loaded
            console.log('All functions loaded successfully');



            // ==================================================
            // MODAL FOR IMPORT EXPORT
            // =================================================
            function openImportModal() {
                htmx.ajax('GET', '/admin/import/modal', {
                    target: '#modal-container',
                    swap: 'innerHTML'
                });
                showModal();
            }

            function closeImportModal(event) {
                if (event && event.target !== event.currentTarget) return;
                hideModal();
            }

            function handleFileSelect(input) {
                const file = input.files[0];
                const fileInfo = document.getElementById('file-info');
                const fileName = document.getElementById('file-name');
                const fileSize = document.getElementById('file-size');
                const importButton = document.getElementById('import-button');
                const previewSection = document.getElementById('preview-section');

                if (file) {
                    fileName.textContent = file.name;
                    fileSize.textContent = `(${formatFileSize(file.size)})`;
                    fileInfo.classList.remove('hidden');
                    importButton.disabled = false;

                    // Show preview for Excel files
                    if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
                        previewFile(file);
                    }
                } else {
                    fileInfo.classList.add('hidden');
                    importButton.disabled = true;
                    previewSection.classList.add('hidden');
                }
            }

            function previewFile(file) {
                const formData = new FormData();
                formData.append('file', file);
                formData.append('preview', 'true');

                fetch('/admin/import/preview', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(html => {
                    document.getElementById('preview-content').innerHTML = html;
                    document.getElementById('preview-section').classList.remove('hidden');
                })
                .catch(error => {
                    console.error('Preview error:', error);
                });
            }

            function startImport() {
                const fileInput = document.getElementById('import-file');
                const file = fileInput.files[0];

                if (!file) {
                    alert('Pasirinkite failą');
                    return;
                }

                const formData = new FormData();
                formData.append('file', file);
                formData.append('overwrite_existing', document.getElementById('overwrite-existing').checked);
                formData.append('validate_emails', document.getElementById('validate-emails').checked);
                formData.append('send_notifications', document.getElementById('send-notifications').checked);

                const importButton = document.getElementById('import-button');
                const buttonText = document.getElementById('import-button-text');

                importButton.disabled = true;
                buttonText.textContent = 'Importuojama...';

                fetch('/admin/import/process', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.text())
                .then(html => {
                    document.getElementById('import-results').innerHTML = html;
                    document.getElementById('import-results').classList.remove('hidden');

                    // Hide other sections
                    document.getElementById('preview-section').classList.add('hidden');

                    // Refresh the student list after successful import
                    setTimeout(() => {
                        hideModal();
                        window.location.reload();
                    }, 3000);
                })
                .catch(error => {
                    console.error('Import error:', error);
                    alert('Importavimo klaida: ' + error.message);
                })
                .finally(() => {
                    importButton.disabled = false;
                    buttonText.textContent = 'Importuoti';
                });
            }

     function exportData() {
         console.log('Export function called');

         // Get the form element first
         const filtersForm = document.getElementById('filters-form');
         const searchValue = document.getElementById('search')?.value || '';

         // Get current filters from the form
         let filters = {};
         if (filtersForm) {
             // Get all form inputs manually
             const formData = new FormData(filtersForm);
             for (let [key, value] of formData.entries()) {
                 filters[key] = value;
             }
         }

         console.log('Filters:', filters);
         console.log('Search value:', searchValue);

         // Build query string
         const params = new URLSearchParams();
         if (searchValue) params.append('search', searchValue);

         // Add all filter values
         Object.keys(filters).forEach(key => {
             if (filters[key] && filters[key] !== '') {
                 params.append(key, filters[key]);
             }
         });

         const exportUrl = '/admin/export/students?' + params.toString();
         console.log('Export URL:', exportUrl);

         // Download file
         window.location.href = exportUrl;
     }

            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }



            // ===================================================

           // VIEW REVIEWER FORM
      function viewReview(studentId) {
          console.log('viewReview called with:', studentId);

          // First, load the modal content via HTMX
          htmx.ajax('GET', `/reviewer-report/${studentId}/compact-modal?mode=view`, {
              target: '#modal-container',
              swap: 'innerHTML'
          }).then(() => {
              // After content is loaded, show the modal container
              const modalContainer = document.getElementById('modal-container');
              if (modalContainer) {
                  modalContainer.style.display = 'block';

                  // Wait a bit for the modal to be in the DOM, then open it using templUI
                  setTimeout(() => {
                      if (typeof window.openModalById === 'function') {
                          window.openModalById('reviewer-modal');
                      } else {
                          // Fallback if templUI functions aren't available
                          const modal = document.getElementById('reviewer-modal');
                          if (modal) {
                              modal.style.display = 'flex';
                              modal.classList.remove('hidden', 'opacity-0');
                              modal.classList.add('opacity-100');

                              const content = modal.querySelector('[data-modal-content]');
                              if (content) {
                                  content.classList.remove('scale-95', 'opacity-0');
                                  content.classList.add('scale-100', 'opacity-100');
                              }
                          }
                      }
                  }, 100);
              }
          });
      }

      // Update createReviewerReport function similarly
      function createReviewerReport(studentId) {
          console.log('createReviewerReport called with:', studentId);

          htmx.ajax('GET', `/reviewer-report/${studentId}/compact-modal`, {
              target: '#modal-container',
              swap: 'innerHTML'
          }).then(() => {
              const modalContainer = document.getElementById('modal-container');
              if (modalContainer) {
                  modalContainer.style.display = 'block';

                  setTimeout(() => {
                      if (typeof window.openModalById === 'function') {
                          window.openModalById('reviewer-modal');
                      } else {
                          const modal = document.getElementById('reviewer-modal');
                          if (modal) {
                              modal.style.display = 'flex';
                              modal.classList.remove('hidden', 'opacity-0');
                              modal.classList.add('opacity-100');

                              const content = modal.querySelector('[data-modal-content]');
                              if (content) {
                                  content.classList.remove('scale-95', 'opacity-0');
                                  content.classList.add('scale-100', 'opacity-100');
                              }
                          }
                      }
                  }, 100);
              }
          });
      }

           // Add event listener for reviewer report saved
           document.addEventListener('reviewerReportSaved', function(event) {
               console.log('Reviewer report saved, refreshing...');

               // Close modal
               const modal = document.getElementById('reviewer-modal');
               if (modal && window.modalState) {
                   modal.style.display = 'none';
                   window.modalState.openModalId = null;
                   document.body.style.overflow = '';
               }

               // Show success notification
               showSuccessNotification('Reviewer report saved successfully!');

               // Refresh the student table
               setTimeout(function() {
                   window.location.reload();
               }, 1500);
           });




        </script>
	}
}

// Update your StudentListHeader template
templ StudentListHeader(user *auth.AuthenticatedUser, searchValue string) {
	<div class="space-y-4">
		<div class="flex items-center justify-between">
			<div>
				<h1 class="text-3xl font-bold tracking-tight text-foreground">Studentų sąrašas</h1>
				<p class="text-muted-foreground">Valdyti ir peržiūrėti studentų informaciją</p>
			</div>
			<div class="flex items-center gap-3">
				// Add import button for department heads and admins
				if canImportData(user.Role) {
					@button.Button(button.Props{
						Variant: button.VariantDefault,
						Class:   "flex items-center gap-2",
						Attributes: templ.Attributes{
							"onclick": "openImportModal()",
						},
					}) {
						@icon.Upload(icon.Props{Size: 16})
						Importuoti studentus
					}
				}
				if canExportData(user.Role) {
					@button.Button(button.Props{
						Variant: button.VariantOutline,
						Class:   "flex items-center gap-2",
						Attributes: templ.Attributes{
							"onclick": "exportData()",
						},
					}) {
						@icon.Download(icon.Props{Size: 16})
						Eksportuoti
					}
				}
			</div>
		</div>
		<!-- HTMX-powered Search Bar -->
		<div class="w-full">
			<div class="relative">
				<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none z-10">
					@icon.Search(icon.Props{Size: 20, Class: "text-muted-foreground"})
				</div>
				@input.Input(input.Props{
					Type:        "text",
					ID:          "search",
					Name:        "search",
					Placeholder: "Ieškoti studentų pagal vardą, pavardę, temą arba el. paštą...",
					Value:       searchValue,
					Class:       "pl-10 h-12",
					Attributes: templ.Attributes{
						"hx-get":       "/students-list",
						"hx-trigger":   "input changed delay:300ms, search",
						"hx-target":    "#student-table-container",
						"hx-include":   "#filters-form",
						"autocomplete": "off",
					},
				})
			</div>
		</div>
	</div>
}

templ StudentListFilters(pagination *database.PaginationInfo, filters *database.TemplateFilterParams, filterOptions *database.FilterOptions) {
	<div class="bg-muted/50 rounded-lg p-4 border border-border">
		<div class="flex items-center gap-4 flex-wrap">
			<!-- Records per page -->
			<div class="flex items-center gap-2">
				@label.Label(label.Props{Class: "text-sm font-medium whitespace-nowrap"}) {
					Kiek rodyti:
				}
				@selectbox.SelectBox(selectbox.Props{Class: "min-w-16"}) {
					@selectbox.Trigger(selectbox.TriggerProps{
						Name:       "limit",
						Attributes: templ.Attributes{"hx-include": "#search, #filters-form"},
					}) {
						@selectbox.Value(selectbox.ValueProps{Placeholder: "10"}) {
							if filters != nil && filters.Limit > 0 {
								{ strconv.Itoa(filters.Limit) }
							} else if pagination != nil {
								{ strconv.Itoa(pagination.Limit) }
							} else {
								10
							}
						}
					}
					@selectbox.Content() {
						@selectbox.Item(selectbox.ItemProps{Value: "10", Selected: (filters != nil && filters.Limit == 10) || (pagination != nil && pagination.Limit == 10) || (filters == nil && pagination == nil)}) {
							10 
						}
						@selectbox.Item(selectbox.ItemProps{Value: "25", Selected: (filters != nil && filters.Limit == 25) || (pagination != nil && pagination.Limit == 25)}) {
							25 
						}
						@selectbox.Item(selectbox.ItemProps{Value: "50", Selected: (filters != nil && filters.Limit == 50) || (pagination != nil && pagination.Limit == 50)}) {
							50 
						}
					}
				}
			</div>
			<!-- Year filter (optional) -->
			if filterOptions != nil && len(filterOptions.Years) > 0 {
				<div class="flex items-center gap-2">
					@label.Label(label.Props{Class: "text-sm font-medium whitespace-nowrap"}) {
						Metai:
					}
					@selectbox.SelectBox(selectbox.Props{Class: "min-w-20"}) {
						@selectbox.Trigger(selectbox.TriggerProps{
							Name:       "year",
							Attributes: templ.Attributes{"hx-include": "#search, #filters-form"},
						}) {
							@selectbox.Value(selectbox.ValueProps{Placeholder: "Visi"}) {
								if filters != nil && filters.Year > 0 {
									{ strconv.Itoa(filters.Year) }
								}
							}
						}
						@selectbox.Content() {
							@selectbox.Item(selectbox.ItemProps{Value: "", Selected: filters == nil || filters.Year == 0}) {
								Visi metai
							}
							for _, year := range filterOptions.Years {
								@selectbox.Item(selectbox.ItemProps{
									Value:    strconv.Itoa(year),
									Selected: filters != nil && filters.Year == year,
								}) {
									{ strconv.Itoa(year) }
								}
							}
						}
					}
				</div>
			}
			<!-- Group filter -->
			<div class="flex items-center gap-2">
				@label.Label(label.Props{Class: "text-sm font-medium whitespace-nowrap"}) {
					Grupė:
				}
				@selectbox.SelectBox(selectbox.Props{Class: "min-w-24"}) {
					@selectbox.Trigger(selectbox.TriggerProps{
						Name:       "group",
						Attributes: templ.Attributes{"hx-include": "#search, #filters-form"},
					}) {
						@selectbox.Value(selectbox.ValueProps{Placeholder: "Visos"}) {
							if filters != nil && filters.Group != "" {
								{ filters.Group }
							}
						}
					}
					@selectbox.Content() {
						@selectbox.Item(selectbox.ItemProps{Value: "", Selected: filters == nil || filters.Group == ""}) {
							Visos
						}
						if filterOptions != nil && len(filterOptions.Groups) > 0 {
							for _, group := range filterOptions.Groups {
								@selectbox.Item(selectbox.ItemProps{
									Value:    group,
									Selected: filters != nil && filters.Group == group,
								}) {
									{ group }
								}
							}
						} else {
							@selectbox.Item(selectbox.ItemProps{Value: "PI22B", Selected: filters != nil && filters.Group == "PI22B"}) {
								PI22B 
							}
							@selectbox.Item(selectbox.ItemProps{Value: "PI22S", Selected: filters != nil && filters.Group == "PI22S"}) {
								PI22S 
							}
							@selectbox.Item(selectbox.ItemProps{Value: "PIT22", Selected: filters != nil && filters.Group == "PIT22"}) {
								PIT22 
							}
						}
					}
				}
			</div>
			<!-- Study program filter -->
			<div class="flex items-center gap-2">
				@label.Label(label.Props{Class: "text-sm font-medium whitespace-nowrap"}) {
					Programa:
				}
				@selectbox.SelectBox(selectbox.Props{Class: "min-w-32"}) {
					@selectbox.Trigger(selectbox.TriggerProps{
						Name:       "study_program",
						Attributes: templ.Attributes{"hx-include": "#search, #filters-form"},
					}) {
						@selectbox.Value(selectbox.ValueProps{Placeholder: "Visos"}) {
							if filters != nil && filters.StudyProgram != "" {
								if filters.StudyProgram == "Informatikos inžinerija" {
									Informatikos inž.
								} else if filters.StudyProgram == "Programų sistemų inžinerija" {
									Programų sist. inž.
								} else {
									{ filters.StudyProgram }
								}
							}
						}
					}
					@selectbox.Content() {
						@selectbox.Item(selectbox.ItemProps{Value: "", Selected: filters == nil || filters.StudyProgram == ""}) {
							Visos
						}
						if filterOptions != nil && len(filterOptions.StudyPrograms) > 0 {
							for _, program := range filterOptions.StudyPrograms {
								@selectbox.Item(selectbox.ItemProps{
									Value:    program,
									Selected: filters != nil && filters.StudyProgram == program,
								}) {
									if program == "Informatikos inžinerija" {
										Informatikos inž.
									} else if program == "Programų sistemų inžinerija" {
										Programų sist. inž.
									} else {
										{ program }
									}
								}
							}
						} else {
							@selectbox.Item(selectbox.ItemProps{Value: "Informatikos inžinerija", Selected: filters != nil && filters.StudyProgram == "Informatikos inžinerija"}) {
								Informatikos inž.
							}
							@selectbox.Item(selectbox.ItemProps{Value: "Programų sistemų inžinerija", Selected: filters != nil && filters.StudyProgram == "Programų sistemų inžinerija"}) {
								Programų sist. inž.
							}
						}
					}
				}
			</div>
			<!-- Topic status filter -->
			<div class="flex items-center gap-2">
				@label.Label(label.Props{Class: "text-sm font-medium whitespace-nowrap"}) {
					Temos būsena:
				}
				@selectbox.SelectBox(selectbox.Props{Class: "min-w-28"}) {
					@selectbox.Trigger(selectbox.TriggerProps{
						Name:       "topic_status",
						Attributes: templ.Attributes{"hx-include": "#search, #filters-form"},
					}) {
						@selectbox.Value(selectbox.ValueProps{Placeholder: "Visos"}) {
							if filters != nil && filters.TopicStatus != "" {
								switch filters.TopicStatus {
									case "not_started":
										Nepradėta
									case "draft":
										Juodraštis
									case "submitted":
										Pateikta
									case "supervisor_approved":
										Vadovas patvirtino
									case "revision_requested":
										Prašoma pataisymų
									case "approved":
										Patvirtinta
									case "rejected":
										Atmesta
									default:
										{ filters.TopicStatus }
								}
							}
						}
					}
					@selectbox.Content() {
						@selectbox.Item(selectbox.ItemProps{Value: "", Selected: filters == nil || filters.TopicStatus == ""}) {
							Visos
						}
						@selectbox.Item(selectbox.ItemProps{Value: "not_started", Selected: filters != nil && filters.TopicStatus == "not_started"}) {
							Nepradėta
						}
						@selectbox.Item(selectbox.ItemProps{Value: "draft", Selected: filters != nil && filters.TopicStatus == "draft"}) {
							Juodraštis
						}
						@selectbox.Item(selectbox.ItemProps{Value: "submitted", Selected: filters != nil && filters.TopicStatus == "submitted"}) {
							Pateikta
						}
						// ADD THESE NEW OPTIONS:
						@selectbox.Item(selectbox.ItemProps{Value: "supervisor_approved", Selected: filters != nil && filters.TopicStatus == "supervisor_approved"}) {
							Vadovas patvirtino
						}
						@selectbox.Item(selectbox.ItemProps{Value: "revision_requested", Selected: filters != nil && filters.TopicStatus == "revision_requested"}) {
							Prašoma pataisymų
						}
						@selectbox.Item(selectbox.ItemProps{Value: "approved", Selected: filters != nil && filters.TopicStatus == "approved"}) {
							Patvirtinta
						}
						@selectbox.Item(selectbox.ItemProps{Value: "rejected", Selected: filters != nil && filters.TopicStatus == "rejected"}) {
							Atmesta
						}
					}
				}
			</div>
			<!-- Clear filters -->
			<div class="ml-auto">
				@button.Button(button.Props{
					Type:       button.TypeButton,
					Variant:    button.VariantOutline,
					Class:      "h-9 px-3 text-sm flex items-center gap-1",
					Attributes: templ.Attributes{"onclick": "clearAllFilters()"},
				}) {
					@icon.X(icon.Props{Size: 16})
					Atstatyti filtrą
				}
			</div>
		</div>
		<!-- Hidden inputs to ensure page resets when filters change -->
		<input type="hidden" name="page" value="1"/>
	</div>
}

templ StudentTableWithPagination(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string, pagination *database.PaginationInfo) {
	@StudentListTable(user, students, currentLocale)
	if pagination != nil {
		@PaginationComponent(pagination)
	}
}

templ StudentListTable(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string) {
	@table.Table() {
		@table.Header() {
			@table.Row() {
				@table.Head() {
					Grupė 
				}
				@table.Head() {
					<div class="flex items-center gap-1">
						Vardas pavardė
						@icon.ArrowUpDown(icon.Props{Size: 14})
					</div>
				}
				if canViewTopicRegistration(user.Role) {
					@table.Head() {
						<div class="flex items-center gap-1">
							Temos registravimo lapas
							@icon.ArrowUpDown(icon.Props{Size: 14})
						</div>
					}
				}
				if canViewDocuments(user.Role) {
					@table.Head() {
						Dokumentai 
					}
				}
				if canViewReviewer(user.Role) {
					@table.Head() {
						<div class="flex items-center gap-1">
							Recenzentas
							@icon.ArrowUpDown(icon.Props{Size: 14})
						</div>
					}
				}
				if canViewSupervisor(user.Role) {
					@table.Head() {
						<div class="flex items-center gap-1">
							Vadovas
							@icon.ArrowUpDown(icon.Props{Size: 14})
						</div>
					}
				}
			}
		}
		@table.Body() {
			for _, student := range students {
				@table.Row() {
					@table.Cell() {
						@badge.Badge(badge.Props{Variant: badge.VariantDefault, Class: "text-xs"}) {
							{ student.StudentGroup }
						}
					}
					@table.Cell() {
						<div class="space-y-1">
							<div class="font-medium text-foreground text-sm">
								{ student.GetDisplayName(currentLocale) }
							</div>
							<div class="text-xs text-muted-foreground">
								{ student.GetLocalizedTitle(currentLocale) }
							</div>
						</div>
					}
					if canViewTopicRegistration(user.Role) {
						@table.Cell() {
							@RegistrationStatus(user, getTopicStatus(student.TopicStatus), student.TopicApproved, student.ID)
						}
					}
					if canViewDocuments(user.Role) {
                        @table.Cell() {
                            @DocumentsCell(user, student.ID, student.HasSourceCode)
                        }
                    }
					if canViewReviewer(user.Role) {
						@table.Cell() {
@ReviewerStatus(user, getStringFromNullString(student.ReviewerName), student.HasReviewerReport, student.ReviewerReportSigned.Valid && student.ReviewerReportSigned.Bool, student.ID)
						}
					}
					if canViewSupervisor(user.Role) {
						@table.Cell() {
							// Pass the topic status as the last parameter
							@SupervisorStatus(user, student.SupervisorEmail, student.HasSupervisorReport, student.SupervisorReportSigned.Valid && student.SupervisorReportSigned.Bool, student.ID, getTopicStatus(student.TopicStatus))
						}
					}
				}
			}
		}
	}
}

templ RegistrationStatus(user *auth.AuthenticatedUser, status string, approved bool, studentID int) {
	if approved {
		// Topic is fully approved by department head
		<div class="space-y-1">
			<div class="text-xs text-green-700 dark:text-green-400 font-medium">Patvirtinta katedros vedėjo</div>
			<div class="flex gap-1">
				@CompactIconButton("eye", "viewTopicRegistration("+strconv.Itoa(studentID)+")", "Žiūrėti registraciją")
				@CompactIconButton("file-text", "viewTopicRegistrationForm("+strconv.Itoa(studentID)+")", "Lapas")
			</div>
		</div>
	} else if status == "submitted" {
		// Student submitted for review - supervisor/department can review
		<div class="space-y-1">
			<div class="text-xs text-blue-600 font-medium">Studentas pateikė peržiūrai</div>
			@button.Button(button.Props{
				Variant: button.VariantDefault,
				Class:   "h-7 px-3 text-xs",
				Attributes: templ.Attributes{
					"onclick": "approveRegistration(" + strconv.Itoa(studentID) + ")",
				},
			}) {
				@icon.FileText(icon.Props{Size: 12})
				Peržiūrėti
			}
		</div>
	} else if status == "supervisor_approved" {
		// Supervisor approved, waiting for department head
		<div class="space-y-1">
			<div class="text-xs text-blue-600 font-medium">Vadovas patvirtino - Laukia katedros</div>
			<div class="flex gap-1">
				@CompactIconButton("eye", "viewTopicRegistration("+strconv.Itoa(studentID)+")", "Žiūrėti registraciją")
			</div>
		</div>
	} else if status == "revision_requested" {
		// Revision requested - only allow viewing
		<div class="space-y-1">
			<div class="text-xs text-orange-600 font-medium">Prašoma pataisymų</div>
			<div class="flex gap-1">
				@CompactIconButton("eye", "viewTopicRegistration("+strconv.Itoa(studentID)+")", "Žiūrėti registraciją")
			</div>
		</div>
	} else if status == "draft" {
		// Draft - no actions available
		<div class="text-xs text-muted-foreground">Juodraštis</div>
	} else if status == "rejected" {
		// Rejected - only allow viewing
		<div class="space-y-1">
			<div class="text-xs text-red-600">Atmesta</div>
			<div class="flex gap-1">
				@CompactIconButton("eye", "viewTopicRegistration("+strconv.Itoa(studentID)+")", "Žiūrėti registraciją")
			</div>
		</div>
	} else {
		// Not started
		<div class="text-xs text-muted-foreground">Nepradėtas pildyti</div>
	}
}


templ DocumentsCell(user *auth.AuthenticatedUser, studentID int, hasSourceCode bool) {
    <div class="flex items-center gap-1">
        if hasSourceCode {
            @button.Button(button.Props{
                Variant: button.VariantGhost,
                Size:    button.SizeIcon,
                Class:   "h-6 w-6 p-0",
                Attributes: templ.Attributes{
                    "onclick": fmt.Sprintf("viewStudentRepository(%d)", studentID),
                    "title":   "View Repository",
                },
            }) {
                @icon.Github(icon.Props{Size: 14})
            }
        } else {
            <!-- Show a placeholder or nothing for students without source code -->
            <div class="flex items-center justify-center h-6 w-6 p-0">
                <span class="text-xs text-muted-foreground" title="No source code uploaded">-</span>
            </div>
        }
        <div
            id={ "docs-" + strconv.Itoa(studentID) }
            class="text-xs"
            data-student-id={ strconv.Itoa(studentID) }
            data-user-role={ user.Role }
            data-load-documents="true"
        >
            <div class="text-muted-foreground italic">Kraunama...</div>
        </div>
    </div>
}


templ ReviewerStatus(user *auth.AuthenticatedUser, reviewerName string, hasReport bool, isSigned bool, studentID int) {
	if reviewerName != "" {
		<div class="space-y-1">
			<div class="text-xs font-medium text-foreground">
				{ reviewerName }
			</div>
			if hasReport {
				// Report exists - show status and ONLY view button
				if isSigned {
					<div class="flex items-center gap-1">
						<div class="w-2 h-2 bg-green-500 rounded-full"></div>
						<span class="text-xs text-green-700">Pasirašyta</span>
					</div>
				} else {
					<div class="flex items-center gap-1">
						<div class="w-2 h-2 bg-blue-500 rounded-full"></div>
						<span class="text-xs text-blue-700">Užpildyta</span>
					</div>
				}
				<div class="flex gap-1">
					// Only show VIEW button when report exists
					@CompactIconButton("eye", "viewReview("+strconv.Itoa(studentID)+")", "Žiūrėti")
					// NO EDIT BUTTON - once report is filled, it can only be viewed
				</div>
			} else {
				// Report doesn't exist - show create option
				<div class="flex items-center gap-1">
					<div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
					<span class="text-xs text-yellow-700">Neužpildyta</span>
				</div>
				// Show create button if user can create
				if canCreateReviewerReport(user.Role, reviewerName, user.Email) {
					@CompactReviewerButton(studentID, "create", "Pildyti recenziją")
				}
			}
		</div>
	} else {
		<div class="text-xs text-muted-foreground">Nepaskirtas</div>
	}
}
templ CompactReviewerButton(studentID int, action, tooltip string) {
	@button.Button(button.Props{
		Variant: button.VariantGhost,
		Size:    button.SizeIcon,
		Class:   "h-6 w-6 p-0",
		Attributes: templ.Attributes{
			"onclick": getCompactReviewerAction(studentID, action),
			"title":   tooltip,
		},
	}) {
		if action == "create" {
			@icon.Plus(icon.Props{Size: 14})
		} else {
			@icon.PencilLine(icon.Props{Size: 14})
		}
	}
}
templ SupervisorStatus(user *auth.AuthenticatedUser, supervisorEmail string, hasReport bool, isSigned bool, studentID int, topicStatus string) {
	<div class="space-y-1">
		<div class="text-xs text-muted-foreground">
			{ supervisorEmail }
		</div>
		if hasReport {
			// Report exists - show status and ONLY view button
			if isSigned {
				<div class="flex items-center gap-1">
					<div class="w-2 h-2 bg-green-500 rounded-full"></div>
					<span class="text-xs text-green-700">Pasirašyta</span>
				</div>
			} else {
				<div class="flex items-center gap-1">
					<div class="w-2 h-2 bg-blue-500 rounded-full"></div>
					<span class="text-xs text-blue-700">Užpildyta</span>
				</div>
			}
			<div class="flex gap-1">
				// Only show VIEW button when report exists
				@CompactIconButton("eye", "viewSupervisorReport("+strconv.Itoa(studentID)+")", "Žiūrėti")
				// NO EDIT BUTTON - once report is filled, it can only be viewed
			</div>
		} else {
			// Report doesn't exist - show create option
			<div class="flex items-center gap-1">
				<div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
				<span class="text-xs text-yellow-700">Neužpildyta</span>
			</div>
			// Show create button if user can create
			if canCreateSupervisorReport(user.Role, supervisorEmail, user.Email) {
				@CompactSupervisorButton(studentID, "create", "Pildyti atsiliepimą")
			}
		}
	</div>
}

templ CompactIconButton(iconName, action, tooltip string) {
	@button.Button(button.Props{
		Variant: button.VariantGhost,
		Size:    button.SizeIcon,
		Class:   "h-6 w-6 p-0",
		Attributes: templ.Attributes{
			"onclick": action,
			"title":   tooltip,
		},
	}) {
		@renderTemplUIIcon(iconName)
	}
}

templ CompactSupervisorButton(studentID int, action, tooltip string) {
	@button.Button(button.Props{
		Variant: button.VariantGhost,
		Size:    button.SizeIcon,
		Class:   "h-6 w-6 p-0",
		Attributes: templ.Attributes{
			"onclick": getCompactSupervisorAction(studentID, action),
			"title":   tooltip,
		},
	}) {
		if action == "create" {
			@icon.Plus(icon.Props{Size: 14})
		} else {
			@icon.PencilLine(icon.Props{Size: 14})
		}
	}
}

templ PaginationComponent(pagination *database.PaginationInfo) {
	<div class="flex items-center justify-between py-4">
		<div class="text-sm text-muted-foreground">
			Rodoma { strconv.Itoa((pagination.Page-1)*pagination.Limit + 1) } - { strconv.Itoa(minInt(pagination.Page*pagination.Limit, pagination.Total)) } iš { strconv.Itoa(pagination.Total) }
		</div>
		<div class="flex items-center gap-2">
			<div class="flex">
				if pagination.HasPrev {
					@button.Button(button.Props{
						Variant: button.VariantOutline,
						Class:   "rounded-r-none",
						Attributes: templ.Attributes{
							"hx-get":     "/students-list?page=" + strconv.Itoa(pagination.PrevPage),
							"hx-target":  "#student-table-container",
							"hx-include": "#search, #filters-form",
						},
					}) {
						@icon.ChevronLeft(icon.Props{Size: 16})
					}
				}
				for i := maxInt(1, pagination.Page-2); i <= minInt(pagination.TotalPages, pagination.Page+2); i++ {
					if i == pagination.Page {
						@button.Button(button.Props{
							Variant: button.VariantDefault,
							Class:   "rounded-none",
						}) {
							{ strconv.Itoa(i) }
						}
					} else {
						@button.Button(button.Props{
							Variant: button.VariantOutline,
							Class:   "rounded-none",
							Attributes: templ.Attributes{
								"hx-get":     "/students-list?page=" + strconv.Itoa(i),
								"hx-target":  "#student-table-container",
								"hx-include": "#search, #filters-form",
							},
						}) {
							{ strconv.Itoa(i) }
						}
					}
				}
				if pagination.HasNext {
					@button.Button(button.Props{
						Variant: button.VariantOutline,
						Class:   "rounded-l-none",
						Attributes: templ.Attributes{
							"hx-get":     "/students-list?page=" + strconv.Itoa(pagination.NextPage),
							"hx-target":  "#student-table-container",
							"hx-include": "#search, #filters-form",
						},
					}) {
						@icon.ChevronRight(icon.Props{Size: 16})
					}
				}
			</div>
		</div>
	</div>
}

templ renderTemplUIIcon(iconName string) {
	switch iconName {
		case "eye":
			@icon.Eye(icon.Props{Size: 14})
		case "file-text":
			@icon.FileText(icon.Props{Size: 14})
		case "edit":
			@icon.PencilLine(icon.Props{Size: 14})
		case "edit-3":
			@icon.Pencil(icon.Props{Size: 14})
		case "check":
			@icon.Check(icon.Props{Size: 14})
		case "x":
			@icon.X(icon.Props{Size: 14})
		case "plus":
			@icon.Plus(icon.Props{Size: 14})
		case "upload":
			@icon.Upload(icon.Props{Size: 14})
		case "user-plus":
			@icon.UserPlus(icon.Props{Size: 14})
		case "more-vertical":
			@icon.EllipsisVertical(icon.Props{Size: 14})
		default:
			@icon.CircleHelp(icon.Props{Size: 14})
	}
}

// Helper functions
func minInt(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func maxInt(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func getTopicStatus(status sql.NullString) string {
	if status.Valid {
		return status.String
	}
	return ""
}

func getCompactSupervisorAction(studentID int, action string) string {
	if action == "create" {
		return "createSupervisorReport(" + strconv.Itoa(studentID) + ")"
	}
	return "editSupervisorReport(" + strconv.Itoa(studentID) + ")"
}



func getCompactReviewerAction(studentID int, action string) string {
	if action == "create" {
		return "createReviewerReport(" + strconv.Itoa(studentID) + ")"
	}
	return "editReviewerReport(" + strconv.Itoa(studentID) + ")"
}
func canCreateReviewerReport(userRole, reviewerEmail, userEmail string) bool {
	// Reviewers can only create reports for students they are assigned to
	if userRole == auth.RoleReviewer && reviewerEmail == userEmail {
		return true
	}
	// Admins can create reviewer reports
	if userRole == auth.RoleAdmin {
		return true
	}
	return false
}