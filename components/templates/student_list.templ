package templates

import (
    "FinalProjectManagementApp/auth"
    "FinalProjectManagementApp/database"
    "FinalProjectManagementApp/components/card"
    "FinalProjectManagementApp/components/button"
    "strconv"
)

templ StudentList(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string, pagination *database.PaginationInfo) {
    @Layout(user, currentLocale, "Studentų sąrašas") {
        <div class="space-y-6">
            <!-- Header Section -->
            @StudentListHeader(user)

            <!-- Filters -->
            @StudentListFilters(pagination)

            <!-- Table Card -->
            @card.Card() {
                @StudentListTable(user, students, currentLocale)
            }

            <!-- Pagination -->
            if pagination != nil {
                @PaginationComponent(pagination)
            }
        </div>
        <script src="/static/js/student-list.js"></script>
    }
}

templ StudentListHeader(user *auth.AuthenticatedUser) {
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold tracking-tight text-foreground">Studentų sąrašas</h1>
            <p class="text-muted-foreground">Valdyti ir peržiūrėti studentų informaciją</p>
        </div>

        <div class="flex items-center gap-3">
            <!-- Search -->
            <div class="flex max-w-sm">
                <input
                    type="text"
                    id="search"
                    placeholder="Ieškoti studentų..."
                    class="flex h-10 w-full rounded-l-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                />
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Class: "rounded-l-none border-l-0",
                }) {
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                    </svg>
                }
            </div>

            <!-- Filter Button -->
            @button.Button(button.Props{
                Variant: button.VariantOutline,
                Attributes: templ.Attributes{
                    "onclick": "toggleFilters()",
                },
            }) {
                <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"/>
                </svg>
                Filtrai
            }

            if canExportData(user.Role) {
                @button.Button(button.Props{
                    Variant: button.VariantDefault,
                }) {
                    <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    Eksportuoti
                }
            }
        </div>
    </div>
}

templ StudentListFilters(pagination *database.PaginationInfo) {
    <div id="filters" class="hidden">
        @card.Card() {
            @card.Header() {
                @card.Title() {
                    Filtrai
                }
                @card.Description() {
                    Filtruoti studentų sąrašą pagal įvairius kriterijus
                }
            }
            @card.Content() {
                <form method="GET" id="filterForm" class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="space-y-2">
                        <label class="text-sm font-medium text-foreground">Įrašų skaičius</label>
                        <select name="limit" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2" onchange="submitForm()">
                            if pagination.Limit == 10 {
                                <option value="10" selected>10 įrašų</option>
                            } else {
                                <option value="10">10 įrašų</option>
                            }
                            if pagination.Limit == 25 {
                                <option value="25" selected>25 įrašai</option>
                            } else {
                                <option value="25">25 įrašai</option>
                            }
                            if pagination.Limit == 50 {
                                <option value="50" selected>50 įrašų</option>
                            } else {
                                <option value="50">50 įrašų</option>
                            }
                        </select>
                    </div>

                    <div class="space-y-2">
                        <label class="text-sm font-medium text-foreground">Grupė</label>
                        <select name="group" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2" onchange="submitForm()">
                            <option value="">Visos grupės</option>
                            <option value="PI22B">PI22B</option>
                            <option value="PI22S">PI22S</option>
                            <option value="PIT22">PIT22</option>
                        </select>
                    </div>

                    <div class="space-y-2">
                        <label class="text-sm font-medium text-foreground">Studijų programa</label>
                        <select name="study_program" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2" onchange="submitForm()">
                            <option value="">Visos programos</option>
                            <option value="Informatikos inžinerija">Informatikos inžinerija</option>
                            <option value="Programų sistemų inžinerija">Programų sistemų inžinerija</option>
                        </select>
                    </div>

                    <div class="flex items-end">
                        @button.Button(button.Props{
                            Type: button.TypeButton,
                            Variant: button.VariantOutline,
                            FullWidth: true,
                            Attributes: templ.Attributes{
                                "onclick": "clearFilters()",
                            },
                        }) {
                            Išvalyti
                        }
                    </div>
                </form>
            }
        }
    </div>
}

templ StudentListTable(user *auth.AuthenticatedUser, students []database.StudentSummaryView, currentLocale string) {
    <div class="relative w-full overflow-auto">
        <table class="w-full caption-bottom text-sm">
            <thead class="border-b">
                <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                    <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-20">
                        Grupė
                    </th>
                    <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-64">
                        Studentas
                    </th>
                    if canViewTopicRegistration(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-48">
                            Tema
                        </th>
                    }
                    if canViewDocuments(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-64">
                            Dokumentai
                        </th>
                    }
                    if canViewReviewer(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-48">
                            Recenzentas
                        </th>
                    }
                    if canViewSupervisor(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-48">
                            Vadovas
                        </th>
                    }
                    if canPerformActions(user.Role) {
                        <th class="h-12 px-4 text-left align-middle font-medium text-muted-foreground w-12">
                            Veiksmai
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="[&_tr:last-child]:border-0">
                for _, student := range students {
                    <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                        <!-- Group -->
                        <td class="p-4 align-middle">
                            <span class="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 bg-primary text-primary-foreground hover:bg-primary/80">
                                { student.StudentGroup }
                            </span>
                        </td>

                        <!-- Student Info -->
                        <td class="p-4 align-middle">
                            <div class="space-y-1">
                                <div class="font-medium text-foreground">
                                    { student.GetDisplayName(currentLocale) }
                                </div>
                                <div class="text-sm text-muted-foreground">
                                    { student.GetLocalizedTitle(currentLocale) }
                                </div>
                                if canViewStudentDetails(user.Role) {
                                    <div class="text-xs text-muted-foreground">
                                        { student.StudentEmail }
                                    </div>
                                }
                            </div>
                        </td>

                        if canViewTopicRegistration(user.Role) {
                            <td class="p-4 align-middle">
                                @RegistrationStatus(user, student.TopicStatus, student.TopicApproved, student.ID)
                            </td>
                        }

                        if canViewDocuments(user.Role) {
                            <td class="p-4 align-middle">
                                @DocumentsCell(user, student.ID)
                            </td>
                        }

                        if canViewReviewer(user.Role) {
                            <td class="p-4 align-middle">
                                @ReviewerStatus(user, student.ReviewerName, student.HasReviewerReport, student.ReviewerReportSigned, student.ID)
                            </td>
                        }

                        if canViewSupervisor(user.Role) {
                            <td class="p-4 align-middle">
                                @SupervisorStatus(user, student.SupervisorEmail, student.HasSupervisorReport, student.SupervisorReportSigned, student.ID)
                            </td>
                        }

                        if canPerformActions(user.Role) {
                            <td class="p-4 align-middle">
                                @ActionsCell(user, student)
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

templ RegistrationStatus(user *auth.AuthenticatedUser, status string, approved bool, studentID int) {
    <div class="space-y-1">
        if approved {
            <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-green-500 text-green-50 hover:bg-green-500/80">
                Patvirtinta
            </div>
            if canViewRegistration(user.Role) {
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Class: "h-6 px-2 text-xs w-full",
                    Attributes: templ.Attributes{
                        "onclick": "viewRegistration(" + strconv.Itoa(studentID) + ")",
                    },
                }) {
                    <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                    Žiūrėti
                }
            }
        } else if status == "submitted" {
            <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-yellow-500 text-yellow-50 hover:bg-yellow-500/80">
                Pateikta
            </div>
            <div class="flex gap-1">
                if canEditRegistration(user.Role, status) {
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Class: "h-6 px-1 text-xs",
                        Attributes: templ.Attributes{
                            "onclick": "editRegistration(" + strconv.Itoa(studentID) + ")",
                        },
                    }) {
                        <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                    }
                }
                if canApproveRegistration(user.Role) {
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Class: "h-6 px-1 text-xs text-green-600 hover:text-green-700",
                        Attributes: templ.Attributes{
                            "onclick": "approveRegistration(" + strconv.Itoa(studentID) + ")",
                        },
                    }) {
                        <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                        </svg>
                    }
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Class: "h-6 px-1 text-xs text-red-600 hover:text-red-700",
                        Attributes: templ.Attributes{
                            "onclick": "rejectRegistration(" + strconv.Itoa(studentID) + ")",
                        },
                    }) {
                        <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    }
                }
            </div>
        } else if status == "draft" {
            <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-gray-500 text-gray-50 hover:bg-gray-500/80">
                Juodraštis
            </div>
            if canEditRegistration(user.Role, status) {
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Class: "h-6 px-2 text-xs w-full",
                    Attributes: templ.Attributes{
                        "onclick": "editRegistration(" + strconv.Itoa(studentID) + ")",
                    },
                }) {
                    <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                    </svg>
                    Redaguoti
                }
            }
        } else {
            <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-red-500 text-red-50 hover:bg-red-500/80">
                Nepradėta
            </div>
            if canCreateRegistration(user.Role) {
                @button.Button(button.Props{
                    Variant: button.VariantDefault,
                    Class: "h-6 px-2 text-xs w-full",
                    Attributes: templ.Attributes{
                        "onclick": "editRegistration(" + strconv.Itoa(studentID) + ")",
                    },
                }) {
                    <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                    </svg>
                    Pradėti
                }
            }
        }
    </div>
}

templ DocumentsCell(user *auth.AuthenticatedUser, studentID int) {
    <div class="space-y-1">
        <div id={ "docs-" + strconv.Itoa(studentID) } class="space-y-1">
            <div class="text-xs text-muted-foreground italic">Kraunama...</div>
        </div>
        if canUploadDocuments(user.Role) {
            @button.Button(button.Props{
                Variant: button.VariantOutline,
                Class: "h-6 px-2 text-xs w-full",
                Attributes: templ.Attributes{
                    "onclick": "uploadDocument(" + strconv.Itoa(studentID) + ")",
                },
            }) {
                <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
                </svg>
                Įkelti
            }
        }
    </div>
    <script>
        loadDocuments({ strconv.Itoa(studentID) }, { strconv.Quote(user.Role) });
    </script>
}

templ ReviewerStatus(user *auth.AuthenticatedUser, reviewerName string, hasReport bool, isSigned bool, studentID int) {
    <div class="space-y-1">
        if reviewerName != "" {
            <div class="text-sm font-medium text-foreground truncate">{ reviewerName }</div>
            if hasReport {
                if isSigned {
                    <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-green-500 text-green-50 hover:bg-green-500/80">
                        Pasirašyta
                    </div>
                } else {
                    <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-blue-500 text-blue-50 hover:bg-blue-500/80">
                        Užpildyta
                    </div>
                }
                if canViewReview(user.Role) {
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Class: "h-6 px-2 text-xs w-full",
                        Attributes: templ.Attributes{
                            "onclick": "viewReview(" + strconv.Itoa(studentID) + ")",
                        },
                    }) {
                        <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                        Žiūrėti
                    }
                }
            } else {
                <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-gray-500 text-gray-50 hover:bg-gray-500/80">
                    Neužpildyta
                </div>
                if canEditReview(user.Role, reviewerName, user.Email) {
                    @button.Button(button.Props{
                        Variant: button.VariantDefault,
                        Class: "h-6 px-2 text-xs w-full",
                        Attributes: templ.Attributes{
                            "onclick": "editReview(" + strconv.Itoa(studentID) + ")",
                        },
                    }) {
                        <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                        Pildyti
                    }
                }
            }
        } else {
            <span class="text-sm text-muted-foreground">Nepaskirtas</span>
            if canAssignReviewer(user.Role) {
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Class: "h-6 px-2 text-xs w-full",
                    Attributes: templ.Attributes{
                        "onclick": "assignReviewer(" + strconv.Itoa(studentID) + ")",
                    },
                }) {
                    <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                    Paskirti
                }
            }
        }
    </div>
}

templ SupervisorStatus(user *auth.AuthenticatedUser, supervisorEmail string, hasReport bool, isSigned bool, studentID int) {
    <div class="space-y-1">
        <div class="text-sm text-muted-foreground truncate">{ supervisorEmail }</div>
        if hasReport {
            if isSigned {
                <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-green-500 text-green-50 hover:bg-green-500/80">
                    Pasirašyta
                </div>
            } else {
                <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-blue-500 text-blue-50 hover:bg-blue-500/80">
                    Užpildyta
                </div>
            }
            if canViewSupervisorReport(user.Role) {
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Class: "h-6 px-2 text-xs w-full",
                    Attributes: templ.Attributes{
                        "onclick": "viewSupervisorReport(" + strconv.Itoa(studentID) + ")",
                    },
                }) {
                    <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                    </svg>
                    Žiūrėti
                }
            }
        } else {
            <div class="inline-flex items-center rounded-full border px-2 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-gray-500 text-gray-50 hover:bg-gray-500/80">
                Neužpildyta
            </div>
            if canEditSupervisorReport(user.Role, supervisorEmail, user.Email) {
                @button.Button(button.Props{
                    Variant: button.VariantDefault,
                    Class: "h-6 px-2 text-xs w-full",
                    Attributes: templ.Attributes{
                        "onclick": "editSupervisorReport(" + strconv.Itoa(studentID) + ")",
                    },
                }) {
                    <svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                    </svg>
                    Pildyti
                }
            }
        }
    </div>
}

templ ActionsCell(user *auth.AuthenticatedUser, student database.StudentSummaryView) {
    <div class="relative">
        @button.Button(button.Props{
            Variant: button.VariantGhost,
            Class: "h-6 w-6 p-0",
            Attributes: templ.Attributes{
                "onclick": "toggleActions(" + strconv.Itoa(student.ID) + ")",
            },
        }) {
            <svg class="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
                <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
            </svg>
        }
        <div id={ "actions-" + strconv.Itoa(student.ID) } class="hidden absolute right-0 top-full mt-1 bg-popover border border-border rounded-md shadow-lg py-1 z-10 min-w-48">
            if canEditStudent(user.Role) {
                <a href={ templ.SafeURL("/students/edit/" + strconv.Itoa(student.ID)) } class="block px-4 py-2 text-sm text-popover-foreground hover:bg-accent hover:text-accent-foreground">
                    <svg class="h-4 w-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                    </svg>
                    Redaguoti
                </a>
            }
            if canViewStudentHistory(user.Role) {
                <a href={ templ.SafeURL("/students/" + strconv.Itoa(student.ID) + "/history") } class="block px-4 py-2 text-sm text-popover-foreground hover:bg-accent hover:text-accent-foreground">
                    <svg class="h-4 w-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v11a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                    </svg>
                    Istorija
                </a>
            }
            if canDeleteStudent(user.Role) {
                <button
                    onclick={ templ.ComponentScript{ Call: "deleteStudent(" + strconv.Itoa(student.ID) + ")" } }
                    class="block w-full text-left px-4 py-2 text-sm text-destructive hover:bg-destructive/10"
                >
                    <svg class="h-4 w-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                    </svg>
                    Šalinti
                </button>
            }
        </div>
    </div>
}

templ PaginationComponent(pagination *database.PaginationInfo) {
    <div class="flex items-center justify-between">
        <div class="text-sm text-muted-foreground">
            Rodoma { strconv.Itoa((pagination.Page-1)*pagination.Limit + 1) } - { strconv.Itoa(minInt(pagination.Page*pagination.Limit, pagination.Total)) } iš { strconv.Itoa(pagination.Total) }
        </div>

        <div class="flex items-center gap-2">
            @button.Button(button.Props{
                Variant: button.VariantOutline,
                Size: button.SizeIcon,
                Attributes: templ.Attributes{
                    "onclick": "window.location.reload()",
                },
            }) {
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                </svg>
            }

            <div class="flex">
                if pagination.HasPrev {
                    <a href={ templ.SafeURL("?page=" + strconv.Itoa(pagination.PrevPage)) }>
                        @button.Button(button.Props{
                            Variant: button.VariantOutline,
                            Class: "rounded-r-none",
                        }) {
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                            </svg>
                        }
                    </a>
                }

                for i := maxInt(1, pagination.Page-2); i <= minInt(pagination.TotalPages, pagination.Page+2); i++ {
                    if i == pagination.Page {
                        @button.Button(button.Props{
                            Variant: button.VariantDefault,
                            Class: "rounded-none",
                        }) {
                            { strconv.Itoa(i) }
                        }
                    } else {
                        <a href={ templ.SafeURL("?page=" + strconv.Itoa(i)) }>
                            @button.Button(button.Props{
                                Variant: button.VariantOutline,
                                Class: "rounded-none",
                            }) {
                                { strconv.Itoa(i) }
                            }
                        </a>
                    }
                }

                if pagination.HasNext {
                    <a href={ templ.SafeURL("?page=" + strconv.Itoa(pagination.NextPage)) }>
                        @button.Button(button.Props{
                            Variant: button.VariantOutline,
                            Class: "rounded-l-none",
                        }) {
                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                            </svg>
                        }
                    </a>
                }
            </div>
        </div>
    </div>
}