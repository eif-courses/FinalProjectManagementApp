// components/templates/student_reports.templ
package templates
import (
    "FinalProjectManagementApp/database"
        "FinalProjectManagementApp/components/card"
         "FinalProjectManagementApp/components/button"
          "FinalProjectManagementApp/components/icon"
          "fmt"
)
templ ReportsSection(data *StudentDashboardData) {
    @card.Card() {
        @card.Header() {
            @card.Title() {
                ðŸ“‹ Evaluation Reports
            }
            @card.Description() {
                Feedback and evaluation reports from your supervisor and reviewer.
            }
        }
        @card.Content() {
            <div class="space-y-6">
                @SupervisorReportPreview(data.SupervisorReport)
                @ReviewerReportPreview(data.ReviewerReport)
            </div>
        }
    }
}

templ SupervisorReportPreview(report *database.SupervisorReport) {
    <div class="border rounded-lg p-4">
        <div class="flex items-center justify-between mb-3">
            <h4 class="font-medium flex items-center">
                @icon.User(icon.Props{Size: 18, Class: "mr-2"})
                Supervisor Report
            </h4>
            if report != nil {
                <div class="flex items-center space-x-2">
                    if report.IsSigned {
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800">
                            @icon.CircleCheck(icon.Props{Size: 12, Class: "mr-1"})
                            Signed
                        </span>
                    } else {
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-800">
                            @icon.Clock(icon.Props{Size: 12, Class: "mr-1"})
                            Draft
                        </span>
                    }
                    if report.Grade != nil {
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800 font-medium">
                            Grade: { fmt.Sprintf("%d", *report.Grade) }
                        </span>
                    }
                </div>
            }
        </div>
        
        if report != nil {
            <div class="space-y-3">
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div>
                        <span class="text-muted-foreground">Supervisor:</span>
                        <span class="ml-2 font-medium">{ report.SupervisorName }</span>
                    </div>
                    <div>
                        <span class="text-muted-foreground">Updated:</span>
                        <span class="ml-2 font-medium">{ report.UpdatedDate.Format("Jan 2, 2006") }</span>
                    </div>
                </div>
                
                if report.SupervisorComments != "" {
                    <div>
                        <span class="text-sm text-muted-foreground">Comments Preview:</span>
                        <p class="text-sm mt-1 p-2 bg-gray-50 rounded text-gray-700 line-clamp-3">
                            { truncateText(report.SupervisorComments, 150) }
                        </p>
                    </div>
                }
                
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Size: button.SizeIcon,
                    Attributes: templ.Attributes{
                        "onclick": "viewFullReport('supervisor', '" + fmt.Sprintf("%d", report.ID) + "')",
                    },
                }) {
                    @icon.Eye(icon.Props{Size: 16, Class: "mr-2"})
                    View Full Report
                }
            </div>
        } else {
            <div class="text-center py-4">
                @icon.FileX(icon.Props{Size: 32, Class: "mx-auto text-gray-400 mb-2"})
                <p class="text-muted-foreground">No supervisor report available yet</p>
            </div>
        }
    </div>
}

templ ReviewerReportPreview(report *database.ReviewerReport) {
    <div class="border rounded-lg p-4">
        <div class="flex items-center justify-between mb-3">
            <h4 class="font-medium flex items-center">
                @icon.UserCheck(icon.Props{Size: 18, Class: "mr-2"})
                Reviewer Report
            </h4>
            if report != nil {
                <div class="flex items-center space-x-2">
                    if report.IsSigned {
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800">
                            @icon.CircleCheck(icon.Props{Size: 12, Class: "mr-1"})
                            Signed
                        </span>
                    } else {
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-800">
                            @icon.Clock(icon.Props{Size: 12, Class: "mr-1"})
                            Draft
                        </span>
                    }
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800 font-medium">
                        Grade: { fmt.Sprintf("%.1f", report.Grade) }
                    </span>
                </div>
            }
        </div>
        
        if report != nil {
            <div class="space-y-3">
                <div class="text-sm">
                    <span class="text-muted-foreground">Updated:</span>
                    <span class="ml-2 font-medium">{ report.UpdatedDate.Format("Jan 2, 2006") }</span>
                </div>
                
                if report.ReviewPros != "" {
                    <div>
                        <span class="text-sm text-muted-foreground">Strengths Preview:</span>
                        <p class="text-sm mt-1 p-2 bg-green-50 rounded text-gray-700 line-clamp-2">
                            { truncateText(report.ReviewPros, 100) }
                        </p>
                    </div>
                }
                
                if report.ReviewCons != "" {
                    <div>
                        <span class="text-sm text-muted-foreground">Areas for Improvement:</span>
                        <p class="text-sm mt-1 p-2 bg-yellow-50 rounded text-gray-700 line-clamp-2">
                            { truncateText(report.ReviewCons, 100) }
                        </p>
                    </div>
                }
                
                @button.Button(button.Props{
                    Variant: button.VariantOutline,
                    Size: button.SizeIcon,
                    Attributes: templ.Attributes{
                        "onclick": "viewFullReport('reviewer', '" + fmt.Sprintf("%d", report.ID) + "')",
                    },
                }) {
                    @icon.Eye(icon.Props{Size: 16, Class: "mr-2"})
                    View Full Report
                }
            </div>
        } else {
            <div class="text-center py-4">
                @icon.FileX(icon.Props{Size: 32, Class: "mx-auto text-gray-400 mb-2"})
                <p class="text-muted-foreground">No reviewer report available yet</p>
            </div>
        }
    </div>
    
    <script>
        function viewFullReport(type, reportId) {
            const url = `/api/reports/${type}/${reportId}`;
            window.open(url, '_blank', 'width=800,height=600,scrollbars=yes');
        }
    </script>
}