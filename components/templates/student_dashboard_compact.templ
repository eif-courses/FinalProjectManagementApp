// components/templates/student_dashboard_compact.templ
package templates

import (
    "fmt"
    "FinalProjectManagementApp/auth"
    "FinalProjectManagementApp/database"
    "FinalProjectManagementApp/components/card"
    "FinalProjectManagementApp/components/icon"
    "FinalProjectManagementApp/components/button"
)

templ CompactStudentDashboard(user *auth.AuthenticatedUser, data *database.StudentDashboardData, currentLocale string) {
    @Layout(user, currentLocale, "Dashboard") {
        <div class="space-y-6">
            <!-- Compact Header -->
            <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-4 text-white">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-xl font-bold">{ user.Name }</h1>
                        <p class="text-sm opacity-90">{ data.StudentRecord.StudentNumber } â€¢ { data.StudentRecord.StudyProgram }</p>
                    </div>
                    <div class="text-right">
                        <div class="text-2xl font-bold">{ fmt.Sprintf("%d%%", calculateProgress(data)) }</div>
                        <div class="text-xs opacity-90">Complete</div>
                    </div>
                </div>
                <div class="mt-3 bg-white bg-opacity-20 rounded-full h-2">
                    <div class="bg-white h-2 rounded-full transition-all duration-500"
                         style={ "width: " + fmt.Sprintf("%d%%", calculateProgress(data)) }></div>
                </div>
            </div>

            <!-- Compact Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                @CompactSourceSection(data)
                @CompactDocsSection(data)
                @CompactEvalSection(data)

                <!-- Defense Status -->
                @card.Card() {
                    @card.Header() {
                        @card.Title() {
                            ðŸŽ“ Defense
                        }
                    }
                    @card.Content() {
                        if data.DefenseScheduled {
                            <div class="text-center">
                                <div class="text-sm font-medium text-green-600">Scheduled</div>
                                <div class="text-xs text-gray-600">{ formatDefenseDate(data.DefenseDate) }</div>
                                <div class="text-xs text-gray-500 mt-1">{ data.StudentRecord.DefenseLocation }</div>
                            </div>
                        } else {
                            <div class="text-center">
                                <div class="text-sm text-gray-600">Not Scheduled</div>
                                <div class="text-xs text-gray-500">Complete all requirements</div>
                            </div>
                        }
                    }
                }
            </div>
        </div>

        <!-- JavaScript -->
        <script src="/static/js/student-dashboard-compact.js"></script>
    }
}

// Source Code Section
templ CompactSourceSection(data *database.StudentDashboardData) {
    @card.Card() {
        @card.Header() {
            @card.Title() {
                ðŸ’» Source Code
            }
            if data.SourceCodeRepository != nil {
                <div class="flex items-center space-x-2 ml-auto">
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800">
                        @icon.CircleCheck(icon.Props{Size: 12, Class: "mr-1"})
                        Uploaded
                    </span>
                </div>
            }
        }
        @card.Content() {
            if data.SourceCodeRepository != nil {
                <!-- Compact Preview -->
                <div class="space-y-3">
                    <div class="flex items-center justify-between p-2 bg-gray-50 rounded">
                        <div class="flex items-center space-x-2">
                            @icon.Github(icon.Props{Size: 16, Class: "text-gray-600"})
                            <span class="text-sm font-medium">Repository Ready</span>
                        </div>
                        <div class="flex space-x-1">
                            @button.Button(button.Props{
                                Variant: button.VariantOutline,
                                Size: button.SizeIcon,
                                Attributes: templ.Attributes{
                                    "onclick": fmt.Sprintf("window.open('/repository/student/%d', '_blank')", data.StudentRecord.ID),
                                },
                            }) {
                                @icon.Eye(icon.Props{Size: 14})
                            }
                            if data.SourceCodeRepository.RepositoryURL != nil {
                                @button.Button(button.Props{
                                    Variant: button.VariantOutline,
                                    Size: button.SizeIcon,
                                    Attributes: templ.Attributes{
                                        "onclick": fmt.Sprintf("window.open('%s', '_blank')", *data.SourceCodeRepository.RepositoryURL),
                                    },
                                }) {
                                    @icon.ExternalLink(icon.Props{Size: 14})
                                }
                            }
                            @button.Button(button.Props{
                                Variant: button.VariantOutline,
                                Size: button.SizeIcon,
                                Attributes: templ.Attributes{
                                    "onclick": "uploadNewVersion()",
                                    "title": "Upload new version",
                                },
                            }) {
                                @icon.Upload(icon.Props{Size: 14})
                            }
                        </div>
                    </div>
                    <div class="text-xs text-gray-500">
                        Uploaded: { data.SourceCodeRepository.UploadedDate.Format("Jan 2, 15:04") }
                    </div>
                </div>
            } else {
                <!-- Compact Upload Form -->
                @SourceUploadFormCompact()
            }
        }
    }
}

// Source Upload Form
templ SourceUploadFormCompact() {
    <div class="space-y-3">
        <div class="border-2 border-dashed border-gray-300 rounded p-4 text-center">
            @icon.Upload(icon.Props{Size: 24, Class: "mx-auto text-gray-400 mb-2"})
            <p class="text-sm text-gray-600 mb-3">Upload your thesis source code (ZIP)</p>

            <form id="compact-source-form" class="space-y-2">
                <input type="file" name="source_code" accept=".zip" required
                       class="block w-full text-sm text-gray-500 file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:bg-blue-50 file:text-blue-700" />

                <div class="grid grid-cols-2 gap-2">
                    <input type="text" name="name" placeholder="Full Name" required
                           class="px-2 py-1 text-sm border rounded" />
                    <input type="text" name="student_id" placeholder="Student ID" required
                           class="px-2 py-1 text-sm border rounded" />
                </div>

                <input type="email" name="email" placeholder="Email" required
                       class="w-full px-2 py-1 text-sm border rounded" />

                <input type="text" name="thesis_title" placeholder="Thesis Title" required
                       class="w-full px-2 py-1 text-sm border rounded" />

                @button.Button(button.Props{
                    Type: "submit",
                    Size: button.SizeIcon,
                    Class: "w-full",
                    Attributes: templ.Attributes{
                        "id": "compact-upload-btn",
                    },
                }) {
                    @icon.Upload(icon.Props{Size: 14, Class: "mr-1"})
                    Upload
                }
            </form>

            <div id="compact-progress" class="hidden mt-2">
                <div class="w-full bg-gray-200 rounded-full h-1">
                    <div id="compact-progress-bar" class="bg-blue-600 h-1 rounded-full" style="width: 0%"></div>
                </div>
                <p id="compact-status" class="text-xs text-gray-500 mt-1">Uploading...</p>
            </div>
        </div>
    </div>
}

// Documents Section
templ CompactDocsSection(data *database.StudentDashboardData) {
    @card.Card() {
        @card.Header() {
            @card.Title() {
                ðŸ“„ Documents
            }
        }
        @card.Content() {
            <div class="space-y-2">
                <!-- Thesis PDF -->
                <div class="flex items-center justify-between p-2 border rounded">
                    <div class="flex items-center space-x-2">
                        @icon.FileText(icon.Props{Size: 16, Class: "text-red-600"})
                        <span class="text-sm">Thesis PDF</span>
                    </div>
                    if data.HasThesisPDF && data.ThesisDocument != nil {
                        <div class="flex space-x-1">
                            <span class="text-xs text-green-600">âœ“</span>
                            @button.Button(button.Props{
                                Variant: button.VariantOutline,
                                Size: button.SizeIcon,
                                Attributes: templ.Attributes{
                                    "onclick": fmt.Sprintf("window.open('/api/documents/%d/preview', '_blank')", data.ThesisDocument.ID),
                                },
                            }) {
                                @icon.Eye(icon.Props{Size: 12})
                            }
                        </div>
                    } else {
                        <span class="text-xs text-gray-500">Admin upload</span>
                    }
                </div>

                <!-- Company Recommendation -->
                <div class="flex items-center justify-between p-2 border rounded">
                    <div class="flex items-center space-x-2">
                        @icon.Building(icon.Props{Size: 16, Class: "text-blue-600"})
                        <span class="text-sm">Recommendation</span>
                    </div>
                    if data.CompanyRecommendation != nil {
                        <div class="flex space-x-1">
                            <span class="text-xs text-green-600">âœ“</span>
                            @button.Button(button.Props{
                                Variant: button.VariantOutline,
                                Size: button.SizeIcon,
                                Attributes: templ.Attributes{
                                    "onclick": fmt.Sprintf("window.open('/api/documents/%d/preview', '_blank')", data.CompanyRecommendation.ID),
                                },
                            }) {
                                @icon.Eye(icon.Props{Size: 12})
                            }
                        </div>
                    } else {
                        @button.Button(button.Props{
                            Variant: button.VariantOutline,
                            Size: button.SizeIcon,
                            Attributes: templ.Attributes{
                                "onclick": "uploadRecommendation()",
                            },
                        }) {
                            @icon.Upload(icon.Props{Size: 12})
                        }
                    }
                </div>

                <!-- Video Presentation -->
                <div class="flex items-center justify-between p-2 border rounded">
                    <div class="flex items-center space-x-2">
                        @icon.Video(icon.Props{Size: 16, Class: "text-purple-600"})
                        <span class="text-sm">Video (Optional)</span>
                    </div>
                    if data.VideoPresentation != nil {
                        <div class="flex space-x-1">
                            <span class="text-xs text-green-600">âœ“</span>
                            @button.Button(button.Props{
                                Variant: button.VariantOutline,
                                Size: button.SizeIcon,
                                Attributes: templ.Attributes{
                                    "onclick": "playVideo()",
                                },
                            }) {
                                @icon.Play(icon.Props{Size: 12})
                            }
                        </div>
                    } else {
                        @button.Button(button.Props{
                            Variant: button.VariantOutline,
                            Size: button.SizeIcon,
                            Attributes: templ.Attributes{
                                "onclick": "uploadVideo()",
                            },
                        }) {
                            @icon.Upload(icon.Props{Size: 12})
                        }
                    }
                </div>
            </div>
        }
    }
}

// Reports/Evaluation Section
templ CompactEvalSection(data *database.StudentDashboardData) {
    @card.Card() {
        @card.Header() {
            @card.Title() {
                ðŸ“‹ Evaluation
            }
        }
        @card.Content() {
            <div class="space-y-2">
                <!-- Supervisor Report -->
                <div class="flex items-center justify-between p-2 border rounded">
                    <div class="flex items-center space-x-2">
                        @icon.User(icon.Props{Size: 16, Class: "text-green-600"})
                        <span class="text-sm">Supervisor</span>
                        if data.SupervisorReport != nil && data.SupervisorReport.Grade != nil {
                            <span class="text-xs font-medium text-blue-600">
                                Grade: { fmt.Sprintf("%d", *data.SupervisorReport.Grade) }
                            </span>
                        }
                    </div>
                    if data.SupervisorReport != nil {
                        <div class="flex items-center space-x-1">
                            if data.SupervisorReport.IsSigned {
                                <span class="text-xs text-green-600">âœ“ Signed</span>
                            } else {
                                <span class="text-xs text-yellow-600">Draft</span>
                            }
                            @button.Button(button.Props{
                                Variant: button.VariantOutline,
                                Size: button.SizeIcon,
                                Attributes: templ.Attributes{
                                    "onclick": fmt.Sprintf("viewReport('supervisor', %d)", data.SupervisorReport.ID),
                                },
                            }) {
                                @icon.Eye(icon.Props{Size: 12})
                            }
                        </div>
                    } else {
                        <span class="text-xs text-gray-500">Pending</span>
                    }
                </div>

                <!-- Reviewer Report -->
                <div class="flex items-center justify-between p-2 border rounded">
                    <div class="flex items-center space-x-2">
                        @icon.UserCheck(icon.Props{Size: 16, Class: "text-blue-600"})
                        <span class="text-sm">Reviewer</span>
                        if data.ReviewerReport != nil {
                            <span class="text-xs font-medium text-blue-600">
                                Grade: { fmt.Sprintf("%.1f", data.ReviewerReport.Grade) }
                            </span>
                        }
                    </div>
                    if data.ReviewerReport != nil {
                        <div class="flex items-center space-x-1">
                            if data.ReviewerReport.IsSigned {
                                <span class="text-xs text-green-600">âœ“ Signed</span>
                            } else {
                                <span class="text-xs text-yellow-600">Draft</span>
                            }
                            @button.Button(button.Props{
                                Variant: button.VariantOutline,
                                Size: button.SizeIcon,
                                Attributes: templ.Attributes{
                                    "onclick": fmt.Sprintf("viewReport('reviewer', %d)", data.ReviewerReport.ID),
                                },
                            }) {
                                @icon.Eye(icon.Props{Size: 12})
                            }
                        </div>
                    } else {
                        <span class="text-xs text-gray-500">Pending</span>
                    }
                </div>
            </div>
        }
    }
}