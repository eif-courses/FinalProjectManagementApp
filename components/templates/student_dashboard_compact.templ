// components/templates/student_dashboard_compact.templ
package templates

import (
	"FinalProjectManagementApp/auth"
	"FinalProjectManagementApp/components/button"
	"FinalProjectManagementApp/components/card"
	"FinalProjectManagementApp/components/icon"
	"FinalProjectManagementApp/database"
	"fmt"
	"time"
)

templ CompactStudentDashboard(user *auth.AuthenticatedUser, data *database.StudentDashboardData, currentLocale string) {
	@Layout(user, currentLocale, getDashboardTitle(currentLocale), "/dashboard") {
		<div class="space-y-6">
			<!-- Simplified Header with integrated progress -->
			<div class="bg-white rounded-lg border p-4 shadow-sm">
				<div class="flex items-center justify-between mb-3">
					<div>
						<h1 class="text-xl font-semibold text-gray-900">{ user.Name }</h1>
						<p class="text-sm text-gray-500">{ data.StudentRecord.StudentNumber } ‚Ä¢ { data.StudentRecord.StudentGroup } ‚Ä¢ { data.StudentRecord.StudyProgram }</p>
					</div>
					<div class="text-right">
						<div class="text-3xl font-bold text-blue-600">{ fmt.Sprintf("%d%%", calculateProgress(data)) }</div>
						<div class="text-sm text-gray-500">
							if currentLocale == "en" {
								Progress
							} else {
								Progresas
							}
						</div>
					</div>
				</div>

				<!-- Horizontal Progress Steps -->
				@HorizontalProgressSteps(data, currentLocale)
			</div>

			<!-- Main Content Grid -->
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
				@CompactTopicSection(data, currentLocale)
				@CompactSourceSection(data, currentLocale)
				@CompactDocsSection(data, currentLocale)
				@CompactEvalSection(data, currentLocale)
			</div>
		</div>

			<div id="modal-container" style="display: none;"></div>

<script>
// User data from template
const currentUserData = {
    name: "{{ user.Name }}",
    email: "{{ user.Email }}",
    studentId: "{{ data.StudentRecord.StudentNumber }}",
    thesisTitle: "{{ data.StudentRecord.FinalProjectTitle }}"
};

const currentStudentId = {{ data.StudentRecord.ID }};

// Topic Modal
function openTopicModal() {
    console.log('Opening topic modal for student:', currentStudentId);

    ModalManager.openHTMXModal(
        '/topic-registration/' + currentStudentId,
        function() {
            console.log('Topic modal loaded successfully');
        },
        function(error) {
            alert('Failed to load topic registration. Please try again.');
        }
    );
}

// View Report Modal
function viewReport(type, reportId) {
    console.log('View report:', type, reportId);

    let url = '';
    if (type === 'supervisor') {
        url = `/supervisor-report/${currentStudentId}/compact-modal?mode=view`;
    } else if (type === 'reviewer') {
        url = `/reviewer-report/${currentStudentId}/compact-modal?mode=view`;
    } else {
        console.warn('Unknown report type:', type);
        return;
    }

    ModalManager.openHTMXModal(url);
}

// Source code upload functions
function uploadNewVersion() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.zip';
    input.onchange = async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        showUploadProgress(file.name);

        const formData = new FormData();
        formData.append('source_code', file);
        formData.append('name', currentUserData.name);
        formData.append('student_id', currentUserData.studentId);
        formData.append('email', currentUserData.email);
        formData.append('thesis_title', currentUserData.thesisTitle || 'Final Thesis Project');

        try {
            const response = await fetch('/api/source-code/upload', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            if (data.success) {
                updateUploadProgress(100, 'Upload complete!', 'success');
                setTimeout(() => {
                    hideUploadProgress();
                    location.reload();
                }, 1500);
            } else {
                throw new Error(data.error || 'Upload failed');
            }
        } catch (error) {
            updateUploadProgress(0, 'Upload failed: ' + error.message, 'error');
            setTimeout(hideUploadProgress, 3000);
        }
    };
    input.click();
}

// Upload progress functions
function showUploadProgress(filename) {
    const progressHtml = `
        <div id="upload-progress-modal" class="fixed bottom-4 right-4 bg-white rounded-lg shadow-lg p-4 w-80 border z-[60]">
            <div class="flex items-center justify-between mb-2">
                <h4 class="text-sm font-medium">Uploading New Version</h4>
                <button onclick="hideUploadProgress()" class="text-gray-400 hover:text-gray-600">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <p class="text-xs text-gray-600 mb-2 truncate">${filename}</p>
            <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
                <div id="upload-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all" style="width: 0%"></div>
            </div>
            <p id="upload-status" class="text-xs text-gray-500">Uploading...</p>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', progressHtml);
}

function updateUploadProgress(percent, status, type) {
    const bar = document.getElementById('upload-progress-bar');
    const statusText = document.getElementById('upload-status');

    if (bar) bar.style.width = percent + '%';
    if (statusText && status) {
        statusText.textContent = status;
        if (type === 'success') {
            statusText.className = 'text-xs text-green-600';
        } else if (type === 'error') {
            statusText.className = 'text-xs text-red-600';
        }
    }
}

function hideUploadProgress() {
    const modal = document.getElementById('upload-progress-modal');
    if (modal) modal.remove();
}

// HTMX event handling
document.addEventListener('htmx:afterRequest', function(evt) {
    const trigger = evt.detail.xhr.getResponseHeader('HX-Trigger');

    if (trigger === 'topicUpdated') {
        ModalManager.cleanupModalContainer();
        location.reload();
    }

    if (trigger === 'supervisorReportSaved' || trigger === 'reviewerReportSaved') {
        ModalManager.cleanupModalContainer();
    }
});

// Error handling
document.addEventListener('htmx:responseError', function(evt) {
    console.error('HTMX response error:', evt.detail);
    ModalManager.cleanupModalContainer();
    alert('An error occurred. Please try again.');
});

// Source upload form handler
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('compact-source-form');
    if (form) {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();

            const fileInput = form.querySelector('input[type="file"]');
            if (!fileInput.files[0]) {
                alert('Please select a file');
                return;
            }

            const formData = new FormData();
            formData.append('source_code', fileInput.files[0]);
            formData.append('name', currentUserData.name);
            formData.append('student_id', currentUserData.studentId);
            formData.append('email', currentUserData.email);
            formData.append('thesis_title', currentUserData.thesisTitle || 'Final Thesis Project');

            const uploadBtn = document.getElementById('compact-upload-btn');
            const progressDiv = document.getElementById('compact-progress');
            const progressBar = document.getElementById('compact-progress-bar');
            const statusText = document.getElementById('compact-status');

            uploadBtn.disabled = true;
            uploadBtn.innerHTML = '<span class="animate-spin">‚è≥</span> Uploading...';
            progressDiv.classList.remove('hidden');

            try {
                const response = await fetch('/api/source-code/upload', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();
                progressBar.style.width = '100%';

                if (data.success) {
                    statusText.textContent = '‚úÖ Upload complete!';
                    statusText.classList.add('text-green-600');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    throw new Error(data.error || 'Upload failed');
                }
            } catch (error) {
                statusText.textContent = '‚ùå ' + error.message;
                statusText.classList.add('text-red-600');
                uploadBtn.disabled = false;
                uploadBtn.innerHTML = 'Upload Source Code';
            }
        });
    }
});
</script>

	}
}



templ HorizontalProgressSteps(data *database.StudentDashboardData, locale string) {
	<div class="mt-4">
		<!-- Progress Bar -->
		<div class="bg-gray-200 rounded-full h-2 mb-3">
			<div
				class="bg-blue-600 h-2 rounded-full transition-all duration-500"
				style={ "width: " + fmt.Sprintf("%d%%", calculateProgress(data)) }
			></div>
		</div>

		<!-- Steps -->
		<div class="flex justify-between items-center">
			@ProgressStep("üìù", getStatLabel("topic", locale), data.TopicRegistration != nil, getTopicStatusText(data, locale), 1)
			@ProgressStepConnector(data.TopicRegistration != nil)
			@ProgressStep("üíª", getStatLabel("code", locale), data.SourceCodeRepository != nil, getCodeStatusText(data, locale), 2)
			@ProgressStepConnector(data.SourceCodeRepository != nil)
			@ProgressStep("üìÑ", getStatLabel("docs", locale), data.HasThesisPDF, getDocsStatusText(data, locale), 3)
			@ProgressStepConnector(data.HasThesisPDF)
			@ProgressStep("üìã", getStatLabel("evaluation", locale), hasEvaluation(data), getEvaluationStatusText(data, locale), 4)
		</div>
	</div>
}

// Progress Step Component
templ ProgressStep(icon string, label string, completed bool, status string, step int) {
	<div class="flex flex-col items-center flex-1">
		<div class={ "flex items-center justify-center w-10 h-10 rounded-full mb-2 transition-all",
			templ.KV("bg-blue-600 text-white", completed),
			templ.KV("bg-gray-200 text-gray-400", !completed) }>
			if completed {
				<span class="text-lg">‚úì</span>
			} else {
				<span class="text-sm font-medium">{ fmt.Sprintf("%d", step) }</span>
			}
		</div>
		<div class="text-center">
			<div class="text-xs font-medium text-gray-700">{ label }</div>
			<div class="text-xs text-gray-500">{ status }</div>
		</div>
	</div>
}

// Progress Step Connector
templ ProgressStepConnector(completed bool) {
	<div class={ "flex-1 h-0.5 -mt-5 mx-2",
		templ.KV("bg-blue-600", completed),
		templ.KV("bg-gray-300", !completed) }></div>
}



// Simplified Mini Stat Card
templ MiniStatCard(icon string, label string, completed bool, status string) {
	<div class="bg-white rounded-lg border p-3 hover:shadow-sm transition-shadow">
		<div class="flex items-center justify-between">
			<div class="flex items-center space-x-2">
				<span class="text-xl">{ icon }</span>
				<div>
					<div class="text-xs font-medium text-gray-700">{ label }</div>
					<div class="text-xs text-gray-500">{ status }</div>
				</div>
			</div>
			if completed {
				<span class="text-green-500 text-sm">‚úì</span>
			} else {
				<span class="text-gray-300 text-sm">‚óã</span>
			}
		</div>
	</div>
}

// Updated Topic Registration Section with smaller buttons
templ CompactTopicSection(data *database.StudentDashboardData, locale string) {
	@card.Card() {
		@card.Header() {
			@card.Title() {
				üìù
				if locale == "en" {
					Topic Registration
				} else {
					Temos registravimas
				}
			}
			if data.TopicRegistration != nil {
				@StatusBadge(data.TopicRegistration.Status, locale)
			}
		}
		@card.Content() {
			if data.TopicRegistration != nil {
				<div class="space-y-3">
					<!-- Title -->
					<div>
						<p class="text-xs text-gray-500 mb-1">
							if locale == "en" {
								Title
							} else {
								Tema
							}
						</p>
						<p class="text-sm font-medium text-gray-900 line-clamp-2">
							{ data.TopicRegistration.Title }
						</p>
					</div>

					<!-- Supervisor -->
					<div class="flex items-center justify-between">
						<span class="text-xs text-gray-500">
							if locale == "en" {
								Supervisor
							} else {
								Vadovas
							}
						</span>
						<span class="text-sm text-gray-700">{ data.TopicRegistration.Supervisor }</span>
					</div>

					<!-- Simplified Action Buttons -->
					<div class="flex gap-2 pt-2">
						@button.Button(button.Props{
							Variant: button.VariantOutline,
							Size:    button.SizeIcon,
							Attributes: templ.Attributes{
								"onclick": "openTopicModal()",
							},
						}) {
							@icon.Eye(icon.Props{Size: 14})
							<span class="ml-1">
								if locale == "en" {
									View
								} else {
									Per≈æi≈´rƒóti
								}
							</span>
						}
						if data.TopicRegistration.IsEditable() {
							@button.Button(button.Props{
								Variant: button.VariantOutline,
								Size:    button.SizeIcon,
								Attributes: templ.Attributes{
									"onclick": "openTopicModal()",
								},
							}) {
								@icon.Pencil(icon.Props{Size: 14})
								<span class="ml-1">
									if locale == "en" {
										Edit
									} else {
										Redaguoti
									}
								</span>
							}
						}
					</div>

					<!-- Comments if any -->
					if data.TopicCommentCount > 0 {
						<div class="flex items-center text-xs text-gray-500 pt-2 border-t">
							@icon.MessageCircle(icon.Props{Size: 12})
							<span class="ml-1">
								{ fmt.Sprintf("%d", data.TopicCommentCount) }
								if data.TopicCommentCount == 1 {
									if locale == "en" {
										comment
									} else {
										komentaras
									}
								} else {
									if locale == "en" {
										comments
									} else {
										komentarai
									}
								}
							</span>
							if data.HasUnreadComments {
								<span class="ml-auto w-2 h-2 bg-blue-500 rounded-full"></span>
							}
						</div>
					}
				</div>
			} else {
				<!-- No topic - simplified start -->
				<div class="text-center py-6">
					<div class="inline-flex items-center justify-center w-12 h-12 bg-gray-100 rounded-full mb-3">
						@icon.PencilLine(icon.Props{Size: 20, Class: "text-gray-400"})
					</div>
					<p class="text-sm text-gray-600 mb-4">
						if locale == "en" {
							Start by registering your topic
						} else {
							Pradƒókite registruodami temƒÖ
						}
					</p>
					@button.Button(button.Props{
						Variant: button.VariantDefault,
						Size:    button.SizeIcon,
						Attributes: templ.Attributes{
							"onclick": "openTopicModal()",
						},
					}) {
						@icon.Plus(icon.Props{Size: 14})
						<span class="ml-1">
							if locale == "en" {
								Register Topic
							} else {
								Registruoti temƒÖ
							}
						</span>
					}
				</div>
			}
		}
	}
}

// Status Badge Component
templ StatusBadge(status string, locale string) {
	switch status {
		case "draft":
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-700">
				if locale == "en" {
					Draft
				} else {
					Juodra≈°tis
				}
			</span>
		case "submitted":
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-700">
				if locale == "en" {
					Submitted
				} else {
					Pateikta
				}
			</span>
		case "supervisor_approved":
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-700">
				if locale == "en" {
					Supervisor OK
				} else {
					Vadovas patvirtino
				}
			</span>
		case "approved":
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-700">
				‚úì
				if locale == "en" {
					Approved
				} else {
					Patvirtinta
				}
			</span>
		case "rejected":
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-red-100 text-red-700">
				if locale == "en" {
					Rejected
				} else {
					Atmesta
				}
			</span>
		case "revision_requested":
			<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-orange-100 text-orange-700">
				if locale == "en" {
					Needs revision
				} else {
					Reikia pataisym≈≥
				}
			</span>
	}
}

// Updated Source Section with cleaner design
templ CompactSourceSection(data *database.StudentDashboardData, locale string) {
	@card.Card() {
		@card.Header() {
			@card.Title() {
				üíª
				if locale == "en" {
					Source Code
				} else {
					Programos kodas
				}
			}
			if data.SourceCodeRepository != nil {
				<span class="text-xs text-green-600 font-medium">
					‚úì
					if locale == "en" {
						Uploaded
					} else {
						ƒÆkelta
					}
				</span>
			}
		}
		@card.Content() {
			if data.SourceCodeRepository != nil {
				<div class="space-y-3">
					<div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
						<div class="flex items-center space-x-2">
							@icon.Github(icon.Props{Size: 16, Class: "text-gray-600"})
							<span class="text-sm font-medium">
								if locale == "en" {
									Repository Ready
								} else {
									Repozitorija paruo≈°ta
								}
							</span>
						</div>
						<div class="flex gap-1">
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
								Attributes: templ.Attributes{
									"onclick": fmt.Sprintf("window.open('/repository/student/%d', '_blank')", data.StudentRecord.ID),
									"title": "View repository",
								},
							}) {
								@icon.Eye(icon.Props{Size: 16})
							}
							if data.SourceCodeRepository.RepositoryURL != nil {
								@button.Button(button.Props{
									Variant: button.VariantGhost,
									Size:    button.SizeIcon,
									Attributes: templ.Attributes{
										"onclick": fmt.Sprintf("window.open('%s', '_blank')", *data.SourceCodeRepository.RepositoryURL),
										"title": "Open in GitHub",
									},
								}) {
									@icon.ExternalLink(icon.Props{Size: 16})
								}
							}
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
								Attributes: templ.Attributes{
									"onclick": "uploadNewVersion()",
									"title": getUploadNewVersionTitle(locale),
								},
							}) {
								@icon.Upload(icon.Props{Size: 16})
							}
						</div>
					</div>
					<p class="text-xs text-gray-500">
						if locale == "en" {
							Uploaded: { data.SourceCodeRepository.UploadedDate.Format("Jan 2, 15:04") }
						} else {
							ƒÆkelta: { formatDateLT(data.SourceCodeRepository.UploadedDate) }
						}
					</p>
				</div>
			} else {
				@SourceUploadFormCompact(locale)
			}
		}
	}
}

// Source Upload Form
// Source Upload Form with improved visibility
// Source Upload Form with improved visibility
templ SourceUploadFormCompact(locale string) {
    <div class="space-y-3">
        <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center transition-all hover:border-gray-400">
            @icon.Upload(icon.Props{Size: 24, Class: "mx-auto text-gray-400 mb-2"})
            <p class="text-sm text-gray-600 mb-1">
				if locale == "en" {
					Upload your thesis source code (ZIP)
				} else {
					ƒÆkelkite savo darbo programos kodƒÖ (ZIP)
				}
			</p>
            <p class="text-xs text-gray-500 mb-3">
                if locale == "en" {
                    or drag and drop your file here
                } else {
                    arba nuvilkite failƒÖ ƒçia
                }
            </p>

            <form id="compact-source-form" class="space-y-2">
                <input
                    type="file"
                    name="source_code"
                    accept=".zip"
                    required
                    class="block w-full text-sm text-gray-500
                           file:mr-2 file:py-2 file:px-4
                           file:rounded-md file:border-0
                           file:text-sm file:font-medium
                           file:bg-blue-50 file:text-blue-700
                           hover:file:bg-blue-100 file:cursor-pointer
                           cursor-pointer"
                />

                @button.Button(button.Props{
                    Type:  "submit",
                    Size:  button.SizeIcon,
                    Class: "w-full mt-2",
                    Attributes: templ.Attributes{
                        "id": "compact-upload-btn",
                    },
                }) {
                    @icon.Upload(icon.Props{Size: 14, Class: "mr-1"})
                    if locale == "en" {
						Upload Source Code
					} else {
						ƒÆkelti programos kodƒÖ
					}
                }
            </form>

            <div id="compact-progress" class="hidden mt-3">
                <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
                    <div id="compact-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                </div>
                <p id="compact-status" class="text-xs text-gray-500 mt-2">
					if locale == "en" {
						Uploading...
					} else {
						ƒÆkeliama...
					}
				</p>
            </div>
        </div>

        <!-- File requirements -->
        <div class="text-xs text-gray-500 space-y-1">
            <p class="flex items-center">
                @icon.Info(icon.Props{Size: 12, Class: "mr-1"})
                if locale == "en" {
                    Maximum file size: 50MB
                } else {
                    Maksimalus failo dydis: 50MB
                }
            </p>
            <p class="flex items-center">
                @icon.FileArchive(icon.Props{Size: 12, Class: "mr-1"})
                if locale == "en" {
                    Format: ZIP archive only
                } else {
                    Formatas: tik ZIP archyvas
                }
            </p>
        </div>
    </div>
}

// Documents Section
templ CompactDocsSection(data *database.StudentDashboardData, locale string) {
	@card.Card() {
		@card.Header() {
			@card.Title() {
				üìÑ
				if locale == "en" {
					Documents
				} else {
					Dokumentai
				}
			}
		}
		@card.Content() {
			<div class="space-y-2">
				<!-- Thesis PDF -->
				<div class="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50">
					<div class="flex items-center space-x-2">
						@icon.FileText(icon.Props{Size: 16, Class: "text-red-600"})
						<span class="text-sm">
							if locale == "en" {
								Thesis PDF
							} else {
								Darbo PDF
							}
						</span>
					</div>
					if data.HasThesisPDF && data.ThesisDocument != nil {
						<div class="flex items-center space-x-2">
							<span class="text-xs text-green-600">‚úì</span>
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
								Attributes: templ.Attributes{
									"onclick": fmt.Sprintf("window.open('/api/documents/%d/preview', '_blank')", data.ThesisDocument.ID),
								},
							}) {
								@icon.Eye(icon.Props{Size: 14})
							}
						</div>
					} else {
						<span class="text-xs text-gray-500">
							if locale == "en" {
								Admin upload
							} else {
								ƒÆkelia administratorius
							}
						</span>
					}
				</div>

				<!-- Company Recommendation -->
				<div class="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50">
					<div class="flex items-center space-x-2">
						@icon.Building(icon.Props{Size: 16, Class: "text-blue-600"})
						<span class="text-sm">
							if locale == "en" {
								Recommendation
							} else {
								Rekomendacija
							}
						</span>
					</div>
					if data.CompanyRecommendation != nil {
						<div class="flex items-center space-x-2">
							<span class="text-xs text-green-600">‚úì</span>
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
								Attributes: templ.Attributes{
									"onclick": fmt.Sprintf("window.open('/api/documents/%d/preview', '_blank')", data.CompanyRecommendation.ID),
								},
							}) {
								@icon.Eye(icon.Props{Size: 14})
							}
						</div>
					} else {
						@button.Button(button.Props{
							Variant: button.VariantGhost,
							Size:    button.SizeIcon,
							Attributes: templ.Attributes{
								"onclick": "uploadRecommendation()",
							},
						}) {
							@icon.Upload(icon.Props{Size: 14})
						}
					}
				</div>

				<!-- Video Presentation -->
				<div class="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50">
					<div class="flex items-center space-x-2">
						@icon.Video(icon.Props{Size: 16, Class: "text-purple-600"})
						<span class="text-sm">
							if locale == "en" {
								Video (Optional)
							} else {
								Video (Neprivaloma)
							}
						</span>
					</div>
					if data.VideoPresentation != nil {
						<div class="flex items-center space-x-2">
							<span class="text-xs text-green-600">‚úì</span>
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
								Attributes: templ.Attributes{
									"onclick": "playVideo()",
								},
							}) {
								@icon.Play(icon.Props{Size: 14})
							}
						</div>
					} else {
						@button.Button(button.Props{
							Variant: button.VariantGhost,
							Size:    button.SizeIcon,
							Attributes: templ.Attributes{
								"onclick": "uploadVideo()",
							},
						}) {
							@icon.Upload(icon.Props{Size: 14})
						}
					}
				</div>
			</div>
		}
	}
}

// Reports/Evaluation Section
templ CompactEvalSection(data *database.StudentDashboardData, locale string) {
	@card.Card() {
		@card.Header() {
			@card.Title() {
				üìã
				if locale == "en" {
					Evaluation
				} else {
					Vertinimas
				}
			}
		}
		@card.Content() {
			<div class="space-y-2">
				<!-- Supervisor Report -->
				<div class="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50">
					<div class="flex items-center space-x-2">
						@icon.User(icon.Props{Size: 16, Class: "text-green-600"})
						<span class="text-sm">
							if locale == "en" {
								Supervisor
							} else {
								Vadovas
							}
						</span>
						if data.SupervisorReport != nil && data.SupervisorReport.Grade != nil {
							<span class="text-xs font-medium text-blue-600">
								if locale == "en" {
									Grade: { fmt.Sprintf("%d", *data.SupervisorReport.Grade) }
								} else {
									Balas: { fmt.Sprintf("%d", *data.SupervisorReport.Grade) }
								}
							</span>
						}
					</div>
					if data.SupervisorReport != nil {
						<div class="flex items-center space-x-2">
							if data.SupervisorReport.IsSigned {
								<span class="text-xs text-green-600">
									if locale == "en" {
										‚úì Signed
									} else {
										‚úì Pasira≈°yta
									}
								</span>
							} else {
								<span class="text-xs text-yellow-600">
									if locale == "en" {
										Draft
									} else {
										Juodra≈°tis
									}
								</span>
							}
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
								Attributes: templ.Attributes{
									"onclick": fmt.Sprintf("viewReport('supervisor', %d)", data.SupervisorReport.ID),
								},
							}) {
								@icon.Eye(icon.Props{Size: 14})
							}
						</div>
					} else {
						<span class="text-xs text-gray-500">
							if locale == "en" {
								Pending
							} else {
								Laukiama
							}
						</span>
					}
				</div>

				<!-- Reviewer Report -->
				<div class="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50">
					<div class="flex items-center space-x-2">
						@icon.UserCheck(icon.Props{Size: 16, Class: "text-blue-600"})
						<span class="text-sm">
							if locale == "en" {
								Reviewer
							} else {
								Recenzentas
							}
						</span>
						if data.ReviewerReport != nil {
							<span class="text-xs font-medium text-blue-600">
								if locale == "en" {
									Grade: { fmt.Sprintf("%.1f", data.ReviewerReport.Grade) }
								} else {
									Balas: { fmt.Sprintf("%.1f", data.ReviewerReport.Grade) }
								}
							</span>
						}
					</div>
					if data.ReviewerReport != nil {
						<div class="flex items-center space-x-2">
							if data.ReviewerReport.IsSigned {
								<span class="text-xs text-green-600">
									if locale == "en" {
										‚úì Signed
									} else {
										‚úì Pasira≈°yta
									}
								</span>
							} else {
								<span class="text-xs text-yellow-600">
									if locale == "en" {
										Draft
									} else {
										Juodra≈°tis
									}
								</span>
							}
							@button.Button(button.Props{
								Variant: button.VariantGhost,
								Size:    button.SizeIcon,
								Attributes: templ.Attributes{
									"onclick": fmt.Sprintf("viewReport('reviewer', %d)", data.ReviewerReport.ID),
								},
							}) {
								@icon.Eye(icon.Props{Size: 14})
							}
						</div>
					} else {
						<span class="text-xs text-gray-500">
							if locale == "en" {
								Pending
							} else {
								Laukiama
							}
						</span>
					}
				</div>
			</div>
		}
	}
}

// Helper function to calculate progress
func calculateProgress(data *database.StudentDashboardData) int {
	progress := 0

	// Topic registered and approved (25% total)
	if data.TopicRegistration != nil {
		progress += 15 // Draft or submitted
		if data.TopicRegistration.Status == "approved" {
			progress += 10 // Approved adds more
		}
	}

	// Source code uploaded (25%)
	if data.SourceCodeRepository != nil {
		progress += 25
	}

	// Thesis PDF (25%)
	if data.HasThesisPDF {
		progress += 25
	}

	// Supervisor report (12.5%)
	if data.SupervisorReport != nil && data.SupervisorReport.IsSigned {
		progress += 12
	}

	// Reviewer report (12.5%)
	if data.ReviewerReport != nil && data.ReviewerReport.IsSigned {
		progress += 13
	}

	// Cap at 100%
	if progress > 100 {
		progress = 100
	}

	return progress
}

// Helper function to format defense date
func formatDefenseDate(date string) string {
	if date == "" {
		return "TBD"
	}
	return date
}

// Helper functions
func getUploadNewVersionTitle(locale string) string {
	if locale == "en" {
		return "Upload new version"
	}
	return "ƒÆkelti naujƒÖ versijƒÖ"
}

func formatDateLT(date time.Time) string {
	months := []string{
		"", "sausio", "vasario", "kovo", "baland≈æio", "gegu≈æƒós", "bir≈æelio",
		"liepos", "rugpj≈´ƒçio", "rugsƒójo", "spalio", "lapkriƒçio", "gruod≈æio",
	}
	return fmt.Sprintf("%s %d, %02d:%02d", months[date.Month()], date.Day(), date.Hour(), date.Minute())
}

// Helper functions with language support
func getDashboardTitle(locale string) string {
	if locale == "en" {
		return "Dashboard"
	}
	return "Valdymo skydelis"
}

func getStatLabel(stat string, locale string) string {
	labels := map[string]map[string]string{
		"topic": {
			"en": "Topic",
			"lt": "Tema",
		},
		"code": {
			"en": "Code",
			"lt": "Kodas",
		},
		"docs": {
			"en": "Docs",
			"lt": "Dok.",
		},
		"evaluation": {
			"en": "Evaluation",
			"lt": "Vertinimas",
		},
	}

	if label, ok := labels[stat][locale]; ok {
		return label
	}
	return labels[stat]["en"]
}

func getTopicStatusText(data *database.StudentDashboardData, locale string) string {
	if data.TopicRegistration == nil {
		if locale == "en" {
			return "Not started"
		}
		return "Nepradƒóta"
	}

	statusMap := map[string]map[string]string{
		"draft": {
			"en": "Draft",
			"lt": "Juodra≈°tis",
		},
		"submitted": {
			"en": "Submitted",
			"lt": "Pateikta",
		},
		"supervisor_approved": {
			"en": "Supervisor OK",
			"lt": "Vadovas patvirtino",
		},
		"approved": {
			"en": "Approved",
			"lt": "Patvirtinta",
		},
		"rejected": {
			"en": "Rejected",
			"lt": "Atmesta",
		},
		"revision_requested": {
			"en": "Needs revision",
			"lt": "Reikia pataisym≈≥",
		},
	}

	if status, ok := statusMap[data.TopicRegistration.Status][locale]; ok {
		return status
	}

	if locale == "en" {
		return "In progress"
	}
	return "Vykdoma"
}

func getCodeStatusText(data *database.StudentDashboardData, locale string) string {
	if data.SourceCodeRepository != nil {
		if locale == "en" {
			return "Uploaded"
		}
		return "ƒÆkelta"
	}
	if locale == "en" {
		return "Not uploaded"
	}
	return "NeƒØkelta"
}

func getDocsStatusText(data *database.StudentDashboardData, locale string) string {
	count := 0
	total := 1 // Only thesis PDF is required

	if data.HasThesisPDF {
		count++
	}

	if locale == "en" {
		return fmt.Sprintf("%d/%d required", count, total)
	}
	return fmt.Sprintf("%d/%d b≈´tina", count, total)
}

func hasEvaluation(data *database.StudentDashboardData) bool {
	return (data.SupervisorReport != nil && data.SupervisorReport.IsSigned) ||
		   (data.ReviewerReport != nil && data.ReviewerReport.IsSigned)
}

func getEvaluationStatusText(data *database.StudentDashboardData, locale string) string {
	count := 0
	if data.SupervisorReport != nil {
		count++
	}
	if data.ReviewerReport != nil {
		count++
	}

	if locale == "en" {
		return fmt.Sprintf("%d/2 reports", count)
	}
	return fmt.Sprintf("%d/2 ataskaitos", count)
}

