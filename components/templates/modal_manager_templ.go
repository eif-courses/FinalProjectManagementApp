// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ModalManager() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\r\n    (function() {\r\n        // Global modal management system\r\n        window.ModalManager = {\r\n            // Clean up modal container\r\n            cleanupModalContainer: function() {\r\n                console.log('ModalManager: Starting cleanup');\r\n\r\n                // CRITICAL: Check navbar exists BEFORE cleanup\r\n                const navbarBefore = document.querySelector('nav');\r\n                console.log('ModalManager: Navbar exists before cleanup:', !!navbarBefore);\r\n\r\n                const modalContainer = document.getElementById('modal-container');\r\n                if (modalContainer) {\r\n                    console.log('ModalManager: Cleaning modal container');\r\n                    // Use more surgical cleanup - only remove modals, not everything\r\n                    const modals = modalContainer.querySelectorAll('[id$=\"-modal\"]');\r\n                    modals.forEach(modal => {\r\n                        modal.remove();\r\n                    });\r\n                    modalContainer.style.display = 'none';\r\n                }\r\n\r\n                // Only reset body overflow\r\n                document.body.style.overflow = '';\r\n\r\n                // Check navbar after cleanup\r\n                const navbarAfter = document.querySelector('nav');\r\n                if (!navbarAfter && navbarBefore) {\r\n                    console.error('ModalManager: Navbar was accidentally removed during cleanup!');\r\n                    // Emergency: reload the page to restore navbar\r\n                    if (confirm('The navigation was accidentally removed. Reload the page?')) {\r\n                        window.location.reload();\r\n                    }\r\n                }\r\n            },\r\n\r\n            // Ensure modal container exists with proper z-index\r\n            ensureModalContainer: function() {\r\n                let container = document.getElementById('modal-container');\r\n                if (!container) {\r\n                    console.log('ModalManager: Creating new modal container');\r\n                    container = document.createElement('div');\r\n                    container.id = 'modal-container';\r\n                    container.style.display = 'none';\r\n                    container.style.position = 'fixed';\r\n                    container.style.inset = '0';\r\n                    container.style.zIndex = '1000';\r\n                    document.body.appendChild(container);\r\n                } else {\r\n                    console.log('ModalManager: Using existing modal container');\r\n                }\r\n\r\n                // Ensure z-index is correct\r\n                container.style.zIndex = '1000';\r\n                return container;\r\n            },\r\n\r\n            // Open a modal via HTMX\r\n            openHTMXModal: function(url, onSuccess, onError) {\r\n                console.log('ModalManager: Opening modal from URL:', url);\r\n\r\n                // Check navbar before any operations\r\n                const navbarBefore = document.querySelector('nav');\r\n                console.log('ModalManager: Navbar exists before opening:', !!navbarBefore);\r\n\r\n                this.cleanupModalContainer();\r\n                const container = this.ensureModalContainer();\r\n\r\n                return htmx.ajax('GET', url, {\r\n                    target: '#modal-container',\r\n                    swap: 'innerHTML'\r\n                }).then(() => {\r\n                    console.log('ModalManager: Modal content loaded');\r\n\r\n                    // CRITICAL: Check navbar after HTMX swap\r\n                    const navbarAfter = document.querySelector('nav');\r\n                    console.log('ModalManager: Navbar exists after HTMX swap:', !!navbarAfter);\r\n\r\n                    if (!navbarAfter && navbarBefore) {\r\n                        console.error('ModalManager: HTMX swap removed the navbar!');\r\n                        // This is the smoking gun - the HTMX response is problematic\r\n\r\n                        // Emergency recovery\r\n                        container.innerHTML = '<div>Error: Invalid modal response removed navigation. Please reload.</div>';\r\n                        if (confirm('An error occurred that removed the navigation. Reload the page?')) {\r\n                            window.location.reload();\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    container.style.display = 'block';\r\n                    document.body.style.overflow = 'hidden';\r\n\r\n                    if (onSuccess) onSuccess();\r\n                }).catch((error) => {\r\n                    console.error('ModalManager: Modal load error:', error);\r\n                    this.cleanupModalContainer();\r\n                    if (onError) onError(error);\r\n                });\r\n            },\r\n\r\n            // Close all modals\r\n            closeAll: function() {\r\n                console.log('ModalManager: Closing all modals');\r\n\r\n                // Check navbar before closing\r\n                const navbarBefore = document.querySelector('nav');\r\n                console.log('ModalManager: Navbar exists before closing:', !!navbarBefore);\r\n\r\n                this.cleanupModalContainer();\r\n\r\n                // Check navbar after closing\r\n                const navbarAfter = document.querySelector('nav');\r\n                console.log('ModalManager: Navbar exists after closing:', !!navbarAfter);\r\n            }\r\n        };\r\n\r\n        // Global escape key handler\r\n        document.addEventListener('keydown', function(e) {\r\n            if (e.key === 'Escape') {\r\n                const modalContainer = document.getElementById('modal-container');\r\n                if (modalContainer && modalContainer.style.display !== 'none') {\r\n                    console.log('ModalManager: Escape key pressed, closing modal');\r\n                    ModalManager.closeAll();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Clean up on navigation\r\n        window.addEventListener('beforeunload', () => ModalManager.closeAll());\r\n        document.addEventListener('htmx:beforeHistoryUpdate', () => ModalManager.closeAll());\r\n\r\n        console.log('ModalManager: Initialized');\r\n\r\n    })();\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
