package templates

import (
    "fmt"
    "strconv"
    "FinalProjectManagementApp/database"
    "FinalProjectManagementApp/components/badge"
    "FinalProjectManagementApp/components/button"
    "FinalProjectManagementApp/components/icon"
    "FinalProjectManagementApp/components/input"
    "FinalProjectManagementApp/components/table"
)

templ ReviewerStudentList(accessToken string, students []database.StudentSummaryView, reviewerName string, pagination *database.PaginationInfo) {
    <!DOCTYPE html>
    <html lang="lt">
    <head>
        <title>Recenzento prieiga - { reviewerName }</title>
        <meta charset="utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="stylesheet" href="/assets/css/output.css"/>
        <script src="https://unpkg.com/htmx.org@1.9.10"></script>
    </head>
    <body class="bg-background text-foreground min-h-screen">
        <div class="min-h-screen">
            <!-- Header -->
            <header class="bg-card border-b">
                <div class="container mx-auto px-4 py-6">
                    <div class="flex justify-between items-center">
                        <div>
                            <h1 class="text-2xl font-bold text-foreground">Recenzento prieiga</h1>
                            <p class="text-sm text-muted-foreground mt-1">
                                Sveiki, { reviewerName } - Priskirti studentai: { strconv.Itoa(len(students)) }
                            </p>
                        </div>
                        <div class="text-sm text-muted-foreground">
                            Prieiga galioja iki termino
                        </div>
                    </div>
                </div>
            </header>

            <!-- Search Bar -->
            <div class="container mx-auto px-4 py-6">
                <div class="max-w-md">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            @icon.Search(icon.Props{Size: 20, Class: "text-muted-foreground"})
                        </div>
                        @input.Input(input.Props{
                            Type:        "text",
                            ID:          "search",
                            Name:        "search",
                            Placeholder: "Ieškoti studentų pagal vardą, pavardę, temą...",
                            Class:       "pl-10",
                            Attributes: templ.Attributes{
                                "oninput": "filterTable(this.value)",
                            },
                        })
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <main class="container mx-auto px-4 pb-8">
                <div class="bg-card rounded-lg shadow-sm border overflow-hidden">
                    @table.Table() {
                        @table.Header() {
                            @table.Row() {
                                @table.Head() { Grupė }
                                @table.Head() { Vardas pavardė }
                                @table.Head() { Baigiamojo darbo tema }
                                @table.Head() { Dokumentai }
                                @table.Head() { Recenzija }
                            }
                        }
                        @table.Body() {
                            for _, student := range students {
                                @table.Row(table.RowProps{Class: "student-row"}) {
                                    @table.Cell() {
                                        @badge.Badge(badge.Props{
                                            Variant: badge.VariantDefault,
                                            Class: "text-xs",
                                        }) {
                                            { student.StudentGroup }
                                        }
                                    }
                                    @table.Cell() {
                                        <div class="space-y-1">
                                            <div class="font-medium text-sm searchable">
                                                { student.StudentName } { student.StudentLastname }
                                            </div>
                                            <div class="text-xs text-muted-foreground">
                                                { student.StudentEmail }
                                            </div>
                                        </div>
                                    }
                                    @table.Cell() {
                                        <div class="text-sm searchable">
                                            { student.FinalProjectTitle }
                                        </div>
                                    }
                                    @table.Cell() {
                                        <div class="flex items-center gap-2">
                                         if student.HasSourceCode {
                                             @button.Button(button.Props{
                                                 Variant: button.VariantOutline,
                                                 Size:    button.SizeIcon,
                                                 Class:   "h-8 w-8",
                                                 Attributes: templ.Attributes{
                                                     "onclick": fmt.Sprintf("viewSourceCode(%d, '%s')", student.ID, accessToken),
                                                     "title":   "Peržiūrėti kodą",
                                                 },
                                             }) {
                                                 @icon.Github(icon.Props{Size: 16})
                                             }
                                         }
                                        </div>
                                    }
                                    @table.Cell() {
                                        @ReviewerActionCell(accessToken, student)
                                    }
                                }
                            }
                        }
                    }
                </div>
            </main>
        </div>

        <!-- Modal Container -->
        <div id="modal-container"></div>

        <!-- Modal System Scripts -->
        <script>
            // Initialize modal state
            if (typeof window.modalState === 'undefined') {
                window.modalState = {
                    openModalId: null
                };
            }

            // Simplified modal functions for reviewer access
            function closeModal(modal, immediate = false) {
                if (!modal) return;

                const modalContainer = document.getElementById('modal-container');
                const content = modal.querySelector('[data-modal-content]');

                // Apply leaving transitions
                modal.classList.remove('opacity-100');
                modal.classList.add('opacity-0');

                if (content) {
                    content.classList.remove('scale-100', 'opacity-100');
                    content.classList.add('scale-95', 'opacity-0');
                }

                function hideModal() {
                    modal.style.display = 'none';
                    modalContainer.innerHTML = '';
                    modalContainer.style.display = 'none';
                    document.body.style.overflow = '';
                    window.modalState.openModalId = null;
                }

                if (immediate) {
                    hideModal();
                } else {
                    setTimeout(hideModal, 300);
                }
            }

            // Filter table function
            function filterTable(searchValue) {
                const rows = document.querySelectorAll('.student-row');
                const search = searchValue.toLowerCase();

                rows.forEach(row => {
                    const searchableElements = row.querySelectorAll('.searchable');
                    let found = false;

                    searchableElements.forEach(el => {
                        if (el.textContent.toLowerCase().includes(search)) {
                            found = true;
                        }
                    });

                    row.style.display = found ? '' : 'none';
                });
            }



function viewSourceCode(studentId, token) {
    // Option 1: Navigate to repository view
    const repoUrl = '/reviewer/' + token + '/repository/student/' + studentId;
    window.open(repoUrl, '_blank');
}

            // Open review modal
            function openReviewModal(studentId, token) {
                const modalContainer = document.getElementById('modal-container');
                modalContainer.style.display = 'block';

                htmx.ajax('GET', '/reviewer/' + token + '/student/' + studentId + '/review', {
                    target: '#modal-container',
                    swap: 'innerHTML'
                });
            }

            // Global close modal function
            window.closeReviewerModal = function() {
                const modal = document.getElementById('reviewer-modal');
                if (modal) {
                    closeModal(modal);
                }
            }

            // Handle escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && window.modalState && window.modalState.openModalId === 'reviewer-modal') {
                    closeReviewerModal();
                }
            });

            // Listen for successful submission
            document.addEventListener('htmx:afterRequest', function(evt) {
                if (evt.detail.xhr && evt.detail.xhr.getResponseHeader('HX-Trigger') === 'reviewerReportSaved') {
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                }
            });
        </script>
    </body>
    </html>
}

templ ReviewerActionCell(accessToken string, student database.StudentSummaryView) {
    <div class="space-y-2">
        if student.HasReviewerReport {
            if student.ReviewerReportSigned.Valid && student.ReviewerReportSigned.Bool {
                <!-- Report is signed -->
                <div class="flex items-center gap-2">
                    <div class="flex items-center gap-1">
                        <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span class="text-xs text-green-700 font-medium">Pasirašyta</span>
                    </div>
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Size:    button.SizeIcon,
                        Class:   "h-8 w-8",
                        Attributes: templ.Attributes{
                            "onclick": fmt.Sprintf("openReviewModal(%d, '%s')", student.ID, accessToken),
                            "title":   "Peržiūrėti recenziją",
                        },
                    }) {
                        @icon.Eye(icon.Props{Size: 16})
                    }
                </div>
                if student.ReviewerGrade.Valid {
                    <div class="text-xs text-muted-foreground">
                        Įvertinimas: <span class="font-medium">{ fmt.Sprintf("%.1f", student.ReviewerGrade.Float64) }</span>
                    </div>
                }
            } else {
                <!-- Draft exists -->
                <div class="flex items-center gap-2">
                    <div class="flex items-center gap-1">
                        <div class="w-2 h-2 bg-yellow-500 rounded-full"></div>
                        <span class="text-xs text-yellow-700 font-medium">Juodraštis</span>
                    </div>
                    @button.Button(button.Props{
                        Variant: button.VariantOutline,
                        Size:    button.SizeIcon,
                        Class:   "h-8 w-8",
                        Attributes: templ.Attributes{
                            "onclick": fmt.Sprintf("openReviewModal(%d, '%s')", student.ID, accessToken),
                            "title":   "Tęsti pildymą",
                        },
                    }) {
                        @icon.Pencil(icon.Props{Size: 16})
                    }
                </div>
            }
        } else {
            <!-- No report yet -->
            <div class="space-y-2">
                <div class="flex items-center gap-1">
                    <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
                    <span class="text-xs text-muted-foreground">Neužpildyta</span>
                </div>
                @button.Button(button.Props{
                    Variant: button.VariantDefault,
                    Class:   "h-8 text-xs",
                    Attributes: templ.Attributes{
                        "onclick": fmt.Sprintf("openReviewModal(%d, '%s')", student.ID, accessToken),
                    },
                }) {
                    @icon.Plus(icon.Props{Size: 14})
                    <span class="ml-1">Pildyti recenziją</span>
                }
            </div>
        }
    </div>
}