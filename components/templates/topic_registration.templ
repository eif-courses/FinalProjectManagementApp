// components/templates/topic_registration.templ
package templates

import (
    "FinalProjectManagementApp/auth"
    "FinalProjectManagementApp/database"
    "FinalProjectManagementApp/components/alert"
    "FinalProjectManagementApp/components/badge"
    "FinalProjectManagementApp/components/button"
    "FinalProjectManagementApp/components/card"
    "FinalProjectManagementApp/components/input"
    "FinalProjectManagementApp/components/label"
    "FinalProjectManagementApp/components/modal"
    "FinalProjectManagementApp/components/textarea"
    "FinalProjectManagementApp/components/selectbox"
    "fmt"
)

templ TopicRegistrationForm(user *auth.AuthenticatedUser, topic *database.ProjectTopicRegistration, comments []database.TopicRegistrationComment, locale string) {
    @Layout(user, locale, "Topic Registration") {
        <div class="container mx-auto p-6 max-w-4xl">
            <!-- Header -->
            @card.Card() {
                <div class="p-6">
                    <h1 class="text-3xl font-bold tracking-tight mb-4">
                        if locale == "en" {
                            Final Thesis Topic Registration
                        } else {
                            Baigiamojo darbo temos registravimo lapas
                        }
                    </h1>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            @badge.Badge(badge.Props{Variant: badge.VariantSecondary}) {
                                if locale == "en" {
                                    Faculty of Electronics and Informatics
                                } else {
                                    Elektronikos ir informatikos fakultetas
                                }
                            }
                        </div>
                    </div>

                    <div class="mt-4 space-y-2 text-sm text-muted-foreground">
                        <div class="flex items-center gap-2">
                            <span class="font-medium">
                                if locale == "en" {
                                    Student:
                                } else {
                                    Studentas(-ė):
                                }
                            </span>
                            <span>{ user.Name }</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="font-medium">
                                if locale == "en" {
                                    Academic Group:
                                } else {
                                    Akademinė grupė:
                                }
                            </span>
                            <span>{ user.Department }</span>
                        </div>
                    </div>
                </div>
            }

            <!-- Status Banner -->
            if topic != nil {
                <div class="mb-6">
                    @TopicStatusAlert(topic, locale)
                </div>
            }

            <!-- Main Form -->
            @card.Card() {
                <div class="p-6">
                    <h2 class="text-xl font-semibold mb-6">
                        if locale == "en" {
                            Thesis Topic Information
                        } else {
                            Baigiamojo darbo tema
                        }
                    </h2>

                    <form id="topic-form"
                          hx-post="/api/topic/submit"
                          hx-target="#form-result"
                          hx-swap="innerHTML"
                          hx-indicator="#loading"
                          class="space-y-6">

                        <!-- Supervisor Field -->
                        <div>
                            @label.Label(label.Props{For: "supervisor"}) {
                                if locale == "en" {
                                    Thesis Supervisor *
                                } else {
                                    Baigiamojo darbo vadovas(-ė) *
                                }
                            }
                            @input.Input(input.Props{
                                ID: "supervisor",
                                Name: "supervisor",
                                Value: getSupervisorValue(topic),
                                Required: true,
                                Disabled: isFieldDisabled(topic),
                                Placeholder: getSupervisorPlaceholder(locale),
                            })
                        </div>

                        <!-- Topic Title in Lithuanian -->
                        <div>
                            @label.Label(label.Props{For: "title"}) {
                                if locale == "en" {
                                    Topic Title (Lithuanian) *
                                } else {
                                    Baigiamojo darbo tema (lietuvių kalba) *
                                }
                            }
                            @input.Input(input.Props{
                                ID: "title",
                                Name: "title",
                                Value: getTitleValue(topic),
                                Required: true,
                                Disabled: isFieldDisabled(topic),
                                Placeholder: getTitlePlaceholder(locale),
                            })
                        </div>

                        <!-- Topic Title in English -->
                        <div>
                            @label.Label(label.Props{For: "title_en"}) {
                                if locale == "en" {
                                    Topic Title (English) *
                                } else {
                                    Baigiamojo darbo tema (anglų kalba) *
                                }
                            }
                            @input.Input(input.Props{
                                ID: "title_en",
                                Name: "title_en",
                                Value: getTitleEnValue(topic),
                                Required: true,
                                Disabled: isFieldDisabled(topic),
                                Placeholder: getTitleEnPlaceholder(locale),
                            })
                        </div>

                        <!-- Completion Date -->
                        <div>
                            @label.Label(label.Props{For: "completion_date"}) {
                                if locale == "en" {
                                    Expected Completion Date
                                } else {
                                    Baigiamojo darbo baigimo data
                                }
                            }
                            @input.Input(input.Props{
                                ID: "completion_date",
                                Name: "completion_date",
                                Type: "date",
                                Value: getCompletionValue(topic),
                                Disabled: isFieldDisabled(topic),
                            })
                        </div>

                        <!-- Problem Description -->
                        <div>
                            @label.Label(label.Props{For: "problem"}) {
                                if locale == "en" {
                                    Problem Description *
                                } else {
                                    Baigiamojo darbo problema *
                                }
                            }
                            @textarea.Textarea(textarea.Props{
                                ID: "problem",
                                Name: "problem",
                                Value: getProblemValue(topic),
                                Required: !isFieldDisabled(topic),
                                Disabled: isFieldDisabled(topic),
                                Placeholder: getProblemPlaceholder(locale),
                                Rows: 4,
                            })
                        </div>

                        <!-- Objective -->
                        <div>
                            @label.Label(label.Props{For: "objective"}) {
                                if locale == "en" {
                                    Objective *
                                } else {
                                    Baigiamojo darbo tikslas *
                                }
                            }
                            @textarea.Textarea(textarea.Props{
                                ID: "objective",
                                Name: "objective",
                                Value: getObjectiveValue(topic),
                                Required: !isFieldDisabled(topic),
                                Disabled: isFieldDisabled(topic),
                                Placeholder: getObjectivePlaceholder(locale),
                                Rows: 3,
                            })
                        </div>

                        <!-- Tasks -->
                        <div>
                            @label.Label(label.Props{For: "tasks"}) {
                                if locale == "en" {
                                    Preliminary Tasks and Content Plan *
                                } else {
                                    Preliminarus baigiamojo darbo uždaviniai ir turinio planas *
                                }
                            }
                            @textarea.Textarea(textarea.Props{
                                ID: "tasks",
                                Name: "tasks",
                                Value: getTasksValue(topic),
                                Required: !isFieldDisabled(topic),
                                Disabled: isFieldDisabled(topic),
                                Placeholder: getTasksPlaceholder(locale),
                                Rows: 6,
                            })
                        </div>

                        <!-- Student and Supervisor Info (Read-only) -->
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                @label.Label(label.Props{For: "student_name"}) {
                                    if locale == "en" {
                                        Student
                                    } else {
                                        Studentas(-ė)
                                    }
                                }
                                @input.Input(input.Props{
                                    ID: "student_name",
                                    Value: user.Name,
                                    Disabled: true,
                                })
                            </div>
                            <div>
                                @label.Label(label.Props{For: "registration_type"}) {
                                    if locale == "en" {
                                        Registration Type
                                    } else {
                                        Tema užregistruota
                                    }
                                }
                                @selectbox.SelectBox(selectbox.Props{
                                    ID: "registration_type",
                                }) {
                                    @selectbox.Trigger(selectbox.TriggerProps{
                                        ID: "registration_type_trigger",
                                        Disabled: true,
                                    }) {
                                        @selectbox.Value(selectbox.ValueProps{
                                            Placeholder: getRegistrationTypePlaceholder(locale),
                                        })
                                    }
                                    @selectbox.Content(selectbox.ContentProps{}) {
                                        @selectbox.Item(selectbox.ItemProps{
                                            Value: "department",
                                            Selected: true,
                                        }) {
                                            { getRegistrationTypeText(locale) }
                                        }
                                    }
                                }
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        if topic == nil || topic.IsEditable() {
                            <div class="flex gap-4 pt-6 border-t">
                                @button.Button(button.Props{Type: button.TypeSubmit}) {
                                    if locale == "en" {
                                        Submit
                                    } else {
                                        Išsaugoti
                                    }
                                }
                                @button.Button(button.Props{Type: button.TypeButton, Variant: button.VariantOutline}) {
                                    if locale == "en" {
                                        Close
                                    } else {
                                        Uždaryti
                                    }
                                }
                            </div>
                        }

                        <!-- Loading Indicator -->
                        <div id="loading" class="htmx-indicator">
                            <div class="flex items-center justify-center py-4">
                                <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                                <span class="ml-2 text-sm text-muted-foreground">
                                    if locale == "en" {
                                        Saving...
                                    } else {
                                        Išsaugojama...
                                    }
                                </span>
                            </div>
                        </div>

                        <div id="form-result" class="mt-4"></div>
                    </form>
                </div>
            }

            <!-- Comments Section -->
            if topic != nil {
                <div class="mt-6">
                    @TopicCommentsCard(user, topic, comments, locale)
                </div>
            }

            <!-- Approval Section (for department heads) -->
            if topic != nil && (user.Role == auth.RoleDepartmentHead || user.Role == auth.RoleAdmin) {
                <div class="mt-6">
                    @TopicApprovalCard(user, topic, locale)
                </div>
            }
        </div>
    }
}

// Helper functions
func getSupervisorValue(topic *database.ProjectTopicRegistration) string {
    if topic != nil {
        return topic.Supervisor
    }
    return ""
}

func getTitleValue(topic *database.ProjectTopicRegistration) string {
    if topic != nil {
        return topic.Title
    }
    return ""
}

func getTitleEnValue(topic *database.ProjectTopicRegistration) string {
    if topic != nil {
        return topic.TitleEn
    }
    return ""
}

func getCompletionValue(topic *database.ProjectTopicRegistration) string {
    if topic != nil && topic.CompletionDate != nil {
        return *topic.CompletionDate
    }
    return ""
}

func getProblemValue(topic *database.ProjectTopicRegistration) string {
    if topic != nil {
        return topic.Problem
    }
    return ""
}

func getObjectiveValue(topic *database.ProjectTopicRegistration) string {
    if topic != nil {
        return topic.Objective
    }
    return ""
}

func getTasksValue(topic *database.ProjectTopicRegistration) string {
    if topic != nil {
        return topic.Tasks
    }
    return ""
}

func isFieldDisabled(topic *database.ProjectTopicRegistration) bool {
    if topic != nil {
        return !topic.IsEditable()
    }
    return false
}

func getSupervisorPlaceholder(locale string) string {
    if locale == "en" {
        return "Enter supervisor name"
    }
    return "Įveskite vadovo vardą"
}

func getTitlePlaceholder(locale string) string {
    if locale == "en" {
        return "Enter topic in Lithuanian"
    }
    return "Įveskite temą lietuvių kalba"
}

func getTitleEnPlaceholder(locale string) string {
    if locale == "en" {
        return "Enter topic in English"
    }
    return "Įveskite temą anglų kalba"
}

func getProblemPlaceholder(locale string) string {
    if locale == "en" {
        return "Describe the problem your thesis will address..."
    }
    return "Aprašykite problemą, kurią spręs jūsų baigiamasis darbas..."
}

func getObjectivePlaceholder(locale string) string {
    if locale == "en" {
        return "State the main objective of your thesis..."
    }
    return "Nurodykite pagrindinį baigiamojo darbo tikslą..."
}

func getTasksPlaceholder(locale string) string {
    if locale == "en" {
        return "List the main tasks and outline the content plan..."
    }
    return "Išvardykite pagrindinius uždavinius ir turinio planą..."
}

func getRegistrationTypePlaceholder(locale string) string {
    if locale == "en" {
        return "Department Decision"
    }
    return "katedros sprendimu"
}

func getRegistrationTypeText(locale string) string {
    if locale == "en" {
        return "Department Decision"
    }
    return "katedros sprendimu"
}

templ TopicStatusAlert(topic *database.ProjectTopicRegistration, locale string) {
    switch topic.Status {
        case "draft":
            @alert.Alert(alert.Props{}) {
                @alert.Description() {
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-muted-foreground rounded-full mr-3"></div>
                        <span class="font-medium">
                            if locale == "en" {
                                Draft - Not submitted yet
                            } else {
                                Juodraštis - Dar nepateikta
                            }
                        </span>
                    </div>
                }
            }
        case "submitted":
            @alert.Alert(alert.Props{}) {
                @alert.Description() {
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-yellow-500 rounded-full mr-3"></div>
                        <span class="font-medium text-yellow-700">
                            if locale == "en" {
                                Submitted - Awaiting review
                            } else {
                                Pateikta - Laukia vertinimo
                            }
                        </span>
                    </div>
                }
            }
        case "approved":
            @alert.Alert(alert.Props{}) {
                @alert.Description() {
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-green-500 rounded-full mr-3"></div>
                        <span class="font-medium text-green-700">
                            if locale == "en" {
                                Approved
                            } else {
                                Patvirtinta
                            }
                        </span>
                        if topic.ApprovedBy != nil {
                            <span class="ml-2 text-sm text-green-600">
                                if locale == "en" {
                                    by { *topic.ApprovedBy }
                                } else {
                                    patvirtino { *topic.ApprovedBy }
                                }
                            </span>
                        }
                    </div>
                }
            }
        case "rejected":
            @alert.Alert(alert.Props{Variant: alert.VariantDestructive}) {
                @alert.Description() {
                    <div>
                        <div class="flex items-center mb-2">
                            <div class="w-3 h-3 bg-destructive rounded-full mr-3"></div>
                            <span class="font-medium">
                                if locale == "en" {
                                    Rejected - Requires revision
                                } else {
                                    Atmesta - Reikalauja pataisymų
                                }
                            </span>
                        </div>
                        if topic.RejectionReason != nil {
                            <p class="text-sm mt-2 pl-6">{ *topic.RejectionReason }</p>
                        }
                    </div>
                }
            }
    }
}

templ TopicCommentsCard(user *auth.AuthenticatedUser, topic *database.ProjectTopicRegistration, comments []database.TopicRegistrationComment, locale string) {
    @card.Card() {
        <div class="p-6">
            <h3 class="text-lg font-semibold mb-4">
                if locale == "en" {
                    Comments
                } else {
                    Komentarai
                }
            </h3>

            <!-- Add Comment Form -->
            if user.Role != auth.RoleStudent || topic.Status == "submitted" {
                <div class="mb-6">
                    <form hx-post={ fmt.Sprintf("/api/topic/%d/comment", topic.ID) }
                          hx-target="#comments-list"
                          hx-swap="beforeend"
                          hx-on-after-request="this.reset()"
                          class="space-y-3">

                        @textarea.Textarea(textarea.Props{
                            Name: "comment",
                            Required: true,
                            Placeholder: getCommentPlaceholder(locale),
                            Rows: 3,
                        })

                        <div class="flex justify-between items-center">
                            @selectbox.SelectBox(selectbox.Props{}) {
                                @selectbox.Trigger(selectbox.TriggerProps{
                                    Name: "comment_type",
                                }) {
                                    @selectbox.Value(selectbox.ValueProps{
                                        Placeholder: getCommentTypePlaceholder(locale),
                                    })
                                }
                                @selectbox.Content(selectbox.ContentProps{}) {
                                    @selectbox.Item(selectbox.ItemProps{
                                        Value: "comment",
                                        Selected: true,
                                    }) {
                                        { getCommentTypeText(locale) }
                                    }
                                    @selectbox.Item(selectbox.ItemProps{
                                        Value: "suggestion",
                                    }) {
                                        { getSuggestionTypeText(locale) }
                                    }
                                }
                            }

                            @button.Button(button.Props{Type: button.TypeSubmit, Class: "h-8 px-3 py-1 text-xs"}) {
                                if locale == "en" {
                                    Add Comment
                                } else {
                                    Pridėti komentarą
                                }
                            }
                        </div>
                    </form>
                </div>
            }

            <!-- Comments List -->
            <div id="comments-list" class="space-y-4">
                for _, comment := range comments {
                    @TopicCommentCard(comment, locale)
                }
                if len(comments) == 0 {
                    <div class="text-center py-8 text-muted-foreground">
                        if locale == "en" {
                            No comments yet
                        } else {
                            Komentarų dar nėra
                        }
                    </div>
                }
            </div>
        </div>
    }
}

func getCommentPlaceholder(locale string) string {
    if locale == "en" {
        return "Add a comment..."
    }
    return "Pridėti komentarą..."
}

func getCommentTypePlaceholder(locale string) string {
    if locale == "en" {
        return "Comment Type"
    }
    return "Komentaro tipas"
}

func getCommentTypeText(locale string) string {
    if locale == "en" {
        return "Comment"
    }
    return "Komentaras"
}

func getSuggestionTypeText(locale string) string {
    if locale == "en" {
        return "Suggestion"
    }
    return "Pasiūlymas"
}

templ TopicCommentCard(comment database.TopicRegistrationComment, locale string) {
    @card.Card() {
        <div class="p-4">
            <div class="flex items-start justify-between mb-2">
                <div class="flex items-center gap-2">
                    <span class="font-medium text-sm">{ comment.AuthorName }</span>
                    @badge.Badge(badge.Props{Variant: badge.VariantSecondary}) {
                        { comment.AuthorRole }
                    }
                    @badge.Badge(badge.Props{Variant: getCommentBadgeVariant(comment.CommentType)}) {
                        { comment.GetCommentTypeDisplay() }
                    }
                </div>
                <span class="text-xs text-muted-foreground">
                    { comment.CreatedAt.Format("2006-01-02 15:04") }
                </span>
            </div>
            <p class="text-sm">{ comment.CommentText }</p>
        </div>
    }
}

func getCommentBadgeVariant(commentType string) badge.Variant {
    if commentType == "suggestion" {
        return badge.VariantOutline
    }
    return badge.VariantSecondary
}

templ TopicApprovalCard(user *auth.AuthenticatedUser, topic *database.ProjectTopicRegistration, locale string) {
    if topic.Status == "submitted" {
        @card.Card() {
            <div class="p-6">
                <h3 class="text-lg font-semibold mb-4">
                    if locale == "en" {
                        Topic Approval
                    } else {
                        Temos patvirtinimas
                    }
                </h3>

                <div class="flex gap-4">
                    @button.Button(button.Props{
                        Variant: button.VariantDefault,
                        HxPost: fmt.Sprintf("/api/topic/%d/approve", topic.ID),
                        HxTarget: "#approval-result",
                        Attributes: templ.Attributes{
                            "hx-confirm": getConfirmMessage(locale),
                        },
                    }) {
                        if locale == "en" {
                            ✓ Approve Topic
                        } else {
                            ✓ Patvirtinti temą
                        }
                    }

                    @modal.Trigger(modal.TriggerProps{
                        ModalID: "reject-modal",
                    }) {
                        @button.Button(button.Props{
                            Variant: button.VariantDestructive,
                        }) {
                            if locale == "en" {
                                ✗ Reject Topic
                            } else {
                                ✗ Atmesti temą
                            }
                        }
                    }
                </div>

                <div id="approval-result" class="mt-4"></div>
            </div>
        }

        <!-- Reject Modal -->
        @modal.Modal(modal.Props{
            ID: "reject-modal",
            Class: "max-w-md",
        }) {
            @modal.Header() {
                if locale == "en" {
                    Reject Topic
                } else {
                    Atmesti temą
                }
            }
            @modal.Body() {
                <form id="reject-form"
                      hx-post={ fmt.Sprintf("/api/topic/%d/reject", topic.ID) }
                      hx-target="#approval-result"
                      hx-on-after-request="document.getElementById('reject-modal').close()"
                      class="space-y-4">

                    @label.Label(label.Props{For: "rejection_reason"}) {
                        if locale == "en" {
                            Reason for rejection *
                        } else {
                            Atmetimo priežastis *
                        }
                    }

                    @textarea.Textarea(textarea.Props{
                        ID: "rejection_reason",
                        Name: "rejection_reason",
                        Required: true,
                        Placeholder: getRejectionPlaceholder(locale),
                        Rows: 4,
                    })
                </form>
            }
            @modal.Footer() {
                <div class="flex gap-2">
                    @modal.Close(modal.CloseProps{
                        ModalID: "reject-modal",
                    }) {
                        @button.Button(button.Props{
                            Variant: button.VariantOutline,
                        }) {
                            if locale == "en" {
                                Cancel
                            } else {
                                Atšaukti
                            }
                        }
                    }
                    @button.Button(button.Props{
                        Type: button.TypeSubmit,
                        Variant: button.VariantDestructive,
                        Attributes: templ.Attributes{
                            "form": "reject-form",
                        },
                    }) {
                        if locale == "en" {
                            Reject
                        } else {
                            Atmesti
                        }
                    }
                </div>
            }
        }
    }
}

func getConfirmMessage(locale string) string {
    if locale == "en" {
        return "Are you sure you want to approve this topic?"
    }
    return "Ar tikrai norite patvirtinti šią temą?"
}

func getRejectionPlaceholder(locale string) string {
    if locale == "en" {
        return "Please provide a reason for rejection..."
    }
    return "Prašome nurodyti atmetimo priežastį..."
}