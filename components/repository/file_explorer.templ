package repository

import (
    "FinalProjectManagementApp/types"
    "fmt"
    "strings"
    "path/filepath"
)

templ FileExplorer(studentID int, currentPath string, files []types.RepositoryFile) {
    <div class="container mx-auto px-4 py-6">
        @Breadcrumb(studentID, currentPath)

        <div class="file-explorer bg-white">
            <div class="file-header">
                <div class="flex items-center justify-between">
                    <span class="text-sm font-medium text-gray-700">
                        { fmt.Sprintf("%d items", len(files)) }
                    </span>
                </div>
            </div>

            <div class="file-tree">
                if len(files) == 0 {
                    <div class="p-8 text-center text-gray-500">
                        <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
                        </svg>
                        <p>This folder is empty</p>
                    </div>
                } else {
                    for _, file := range files {
                        @FileRow(studentID, currentPath, file)
                    }
                }
            </div>
        </div>
    </div>
}

templ FileRow(studentID int, currentPath string, file types.RepositoryFile) {
    <div class="file-row"
         if file.Type == "file" {
             hx-get={ fmt.Sprintf("/repository/student/%d/file/%s", studentID, file.Path) }
             hx-target="#file-content"
             hx-swap="innerHTML"
             style="cursor: pointer;"
         }>
        <span class="file-icon">
            if file.Type == "dir" {
                <svg class="w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"></path>
                </svg>
            } else {
                @FileIcon(file.Name)
            }
        </span>

        if file.Type == "dir" {
            <a href={ templ.SafeURL(fmt.Sprintf("/repository/student/%d/browse/%s", studentID, file.Path)) }
               class="file-name">
                { file.Name }
            </a>
        } else {
            <span class="file-name">{ file.Name }</span>
        }

        <span class="file-meta">
            if file.Type == "file" {
                { formatFileSize(file.Size) }
            }
        </span>
    </div>
}

templ FileIcon(filename string) {
    switch strings.ToLower(filepath.Ext(filename)) {
        case ".go":
            <svg class="w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm4 5a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" clip-rule="evenodd"></path>
            </svg>
        case ".js", ".ts", ".jsx", ".tsx":
            <svg class="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm4 5a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" clip-rule="evenodd"></path>
            </svg>
        case ".py":
            <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm4 5a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" clip-rule="evenodd"></path>
            </svg>
        case ".md", ".markdown":
            <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm3 5a1 1 0 01-1-1v2a1 1 0 11-2 0V8a1 1 0 011-1h2zm3 0a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1z" clip-rule="evenodd"></path>
            </svg>
        default:
            <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4z" clip-rule="evenodd"></path>
            </svg>
    }
}

templ Breadcrumb(studentID int, currentPath string) {
    <nav class="breadcrumb">
        <a href={ templ.SafeURL(fmt.Sprintf("/repository/student/%d", studentID)) }
           class="flex items-center gap-1 hover:text-blue-600">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
            </svg>
            Repository
        </a>

        if currentPath != "" {
            @renderPathSegments(studentID, strings.Split(currentPath, "/"))
        }
    </nav>
}

templ renderPathSegments(studentID int, segments []string) {
    for i, segment := range segments {
        <span class="text-gray-400">/</span>
        if i == len(segments) - 1 {
            <span class="text-gray-700">{ segment }</span>
        } else {
            <a href={ templ.SafeURL(fmt.Sprintf("/repository/student/%d/browse/%s", studentID, strings.Join(segments[:i+1], "/"))) }
               class="hover:text-blue-600">
                { segment }
            </a>
        }
    }
}

func formatFileSize(size int64) string {
    if size < 1024 {
        return fmt.Sprintf("%d B", size)
    } else if size < 1024*1024 {
        return fmt.Sprintf("%.1f KB", float64(size)/1024)
    } else {
        return fmt.Sprintf("%.1f MB", float64(size)/(1024*1024))
    }
}